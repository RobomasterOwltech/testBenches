
testH7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac40  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800aee0  0800aee0  0000bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af90  0800af90  0000c124  2**0
                  CONTENTS
  4 .ARM          00000008  0800af90  0800af90  0000bf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af98  0800af98  0000c124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af98  0800af98  0000bf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af9c  0800af9c  0000bf9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  24000000  0800afa0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000064  0800b004  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c4  0800b064  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005268  24000124  0800b0c4  0000c124  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400538c  0800b0c4  0000c38c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002dc15  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d85  00000000  00000000  00039d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e90  00000000  00000000  0003eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017c3  00000000  00000000  00040980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000409b4  00000000  00000000  00042143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000248e5  00000000  00000000  00082af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00199f98  00000000  00000000  000a73dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00241374  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008688  00000000  00000000  002413b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00249a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aec8 	.word	0x0800aec8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800aec8 	.word	0x0800aec8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3d      	ldr	r3, [pc, #244]	@ (80006cc <SystemInit+0xfc>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005da:	4a3c      	ldr	r2, [pc, #240]	@ (80006cc <SystemInit+0xfc>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b39      	ldr	r3, [pc, #228]	@ (80006cc <SystemInit+0xfc>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a38      	ldr	r2, [pc, #224]	@ (80006cc <SystemInit+0xfc>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <SystemInit+0x100>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a32      	ldr	r2, [pc, #200]	@ (80006d0 <SystemInit+0x100>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <SystemInit+0x104>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a30      	ldr	r2, [pc, #192]	@ (80006d4 <SystemInit+0x104>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <SystemInit+0x104>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <SystemInit+0x104>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492c      	ldr	r1, [pc, #176]	@ (80006d4 <SystemInit+0x104>)
 8000624:	4b2c      	ldr	r3, [pc, #176]	@ (80006d8 <SystemInit+0x108>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <SystemInit+0x100>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a24      	ldr	r2, [pc, #144]	@ (80006d0 <SystemInit+0x100>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <SystemInit+0x104>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <SystemInit+0x104>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <SystemInit+0x104>)
 800065a:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <SystemInit+0x10c>)
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <SystemInit+0x104>)
 8000660:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <SystemInit+0x110>)
 8000662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <SystemInit+0x104>)
 8000666:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <SystemInit+0x114>)
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <SystemInit+0x104>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <SystemInit+0x104>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <SystemInit+0x114>)
 8000674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <SystemInit+0x104>)
 800067e:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <SystemInit+0x114>)
 8000680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <SystemInit+0x104>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a11      	ldr	r2, [pc, #68]	@ (80006d4 <SystemInit+0x104>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <SystemInit+0x104>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <SystemInit+0x118>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <SystemInit+0x118>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <SystemInit+0x11c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <SystemInit+0x120>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <SystemInit+0x124>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <SystemInit+0x128>)
 80006bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	52002000 	.word	0x52002000
 80006d4:	58024400 	.word	0x58024400
 80006d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006dc:	02020200 	.word	0x02020200
 80006e0:	01ff0000 	.word	0x01ff0000
 80006e4:	01010280 	.word	0x01010280
 80006e8:	580000c0 	.word	0x580000c0
 80006ec:	5c001000 	.word	0x5c001000
 80006f0:	ffff0000 	.word	0xffff0000
 80006f4:	51008108 	.word	0x51008108
 80006f8:	52004000 	.word	0x52004000

080006fc <_ZN13ControllerPWMC1EP17TIM_HandleTypeDeft>:
#include "ControllerPWM.hpp"

ControllerPWM::ControllerPWM(TIM_HandleTypeDef* _timer, uint16_t _channel) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
	htim = _timer;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	601a      	str	r2, [r3, #0]
    channel = _channel;
 8000710:	88fa      	ldrh	r2, [r7, #6]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	611a      	str	r2, [r3, #16]

    /*
    _timer->Init.Prescaler = _prescaler - 1;
    prescaler = _timer->Init.Prescaler;
    clock_frequency = 1 / (_timer->Init.Period * _timer->Init.Prescaler);*/
}
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <_ZN13ControllerPWM19set_clock_frequencyEm>:

ControllerPWM::~ControllerPWM() {}

void ControllerPWM::set_clock_frequency(uint32_t _clock_frequency) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
    //timer_frequency = (uint32_t) 1 / timer->Init.Period;
	htim->Init.Prescaler = (uint32_t)  HAL_RCC_GetSysClockFreq() / _clock_frequency;
 800072e:	f002 fe5f 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8000732:	4601      	mov	r1, r0
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	fbb1 f2f2 	udiv	r2, r1, r2
 800073e:	605a      	str	r2, [r3, #4]
    // TO DO:
    // Buscar clock source frequency
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN13ControllerPWM20set_signal_frequencyEt>:
void ControllerPWM::set_signal_frequency(uint16_t pwm_frequency) {
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	807b      	strh	r3, [r7, #2]
    //arr = clock_frequency / pwm_frequency;

	htim->Instance->ARR = HAL_RCC_GetSysClockFreq() / (pwm_frequency*get_prescaler());
 8000754:	f002 fe4c 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8000758:	4605      	mov	r5, r0
 800075a:	887c      	ldrh	r4, [r7, #2]
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f870 	bl	8000842 <_ZN13ControllerPWM13get_prescalerEv>
 8000762:	4603      	mov	r3, r0
 8000764:	fb03 f204 	mul.w	r2, r3, r4
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	fbb5 f2f2 	udiv	r2, r5, r2
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bdb0      	pop	{r4, r5, r7, pc}

0800077c <_ZN13ControllerPWM14set_duty_cycleEt>:
void ControllerPWM::set_duty_cycle(uint16_t _duty_cycle) { ccr = (uint32_t)(_duty_cycle * htim->Instance->ARR) / 100; }
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <_ZN13ControllerPWM14set_duty_cycleEt+0x34>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	095a      	lsrs	r2, r3, #5
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	51eb851f 	.word	0x51eb851f

080007b4 <_ZN13ControllerPWM9start_pwmEm>:

void ControllerPWM::start_pwm(uint32_t _channel) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    if (_channel == TIM_CHANNEL_1) {
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d106      	bne.n	80007d2 <_ZN13ControllerPWM9start_pwmEm+0x1e>
    	htim->Instance->CCR1 = ccr;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	6892      	ldr	r2, [r2, #8]
 80007ce:	635a      	str	r2, [r3, #52]	@ 0x34
    } else if (_channel == TIM_CHANNEL_3) {
    	htim->Instance->CCR1 = ccr;
    } else if (_channel == TIM_CHANNEL_4) {
    	htim->Instance->CCR1 = ccr;
    }
}
 80007d0:	e01c      	b.n	800080c <_ZN13ControllerPWM9start_pwmEm+0x58>
    } else if (_channel == TIM_CHANNEL_2) {
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d106      	bne.n	80007e6 <_ZN13ControllerPWM9start_pwmEm+0x32>
    	htim->Instance->CCR1 = ccr;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	6892      	ldr	r2, [r2, #8]
 80007e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007e4:	e012      	b.n	800080c <_ZN13ControllerPWM9start_pwmEm+0x58>
    } else if (_channel == TIM_CHANNEL_3) {
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d106      	bne.n	80007fa <_ZN13ControllerPWM9start_pwmEm+0x46>
    	htim->Instance->CCR1 = ccr;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	6892      	ldr	r2, [r2, #8]
 80007f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007f8:	e008      	b.n	800080c <_ZN13ControllerPWM9start_pwmEm+0x58>
    } else if (_channel == TIM_CHANNEL_4) {
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b0c      	cmp	r3, #12
 80007fe:	d105      	bne.n	800080c <_ZN13ControllerPWM9start_pwmEm+0x58>
    	htim->Instance->CCR1 = ccr;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	6892      	ldr	r2, [r2, #8]
 800080a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_ZN13ControllerPWM14get_duty_cycleEv>:
void ControllerPWM::set_arr(uint32_t _arr) {
    arr = _arr;
    htim->Instance->ARR = _arr;
}
uint32_t ControllerPWM::get_frequency() { return (uint32_t) clock_frequency / htim->Instance->ARR ; }
uint32_t ControllerPWM::get_duty_cycle() { return (uint32_t) (ccr*100)/htim->Instance->ARR;}
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	2264      	movs	r2, #100	@ 0x64
 8000826:	fb03 f202 	mul.w	r2, r3, r2
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_ZN13ControllerPWM13get_prescalerEv>:
uint32_t ControllerPWM::get_prescaler() { return htim->Init.Prescaler; }
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000866:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000868:	bf00      	nop
 800086a:	4b34      	ldr	r3, [pc, #208]	@ (800093c <main+0xe0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d006      	beq.n	8000884 <main+0x28>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	dd01      	ble.n	8000884 <main+0x28>
 8000880:	2301      	movs	r3, #1
 8000882:	e000      	b.n	8000886 <main+0x2a>
 8000884:	2300      	movs	r3, #0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1ef      	bne.n	800086a <main+0xe>
  if ( timeout < 0 )
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	da01      	bge.n	8000894 <main+0x38>
  {
  Error_Handler();
 8000890:	f000 fb62 	bl	8000f58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fe56 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f85e 	bl	8000958 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <main+0xe0>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a2:	4a26      	ldr	r2, [pc, #152]	@ (800093c <main+0xe0>)
 80008a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <main+0xe0>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f001 fdc0 	bl	8002440 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008c0:	2100      	movs	r1, #0
 80008c2:	2000      	movs	r0, #0
 80008c4:	f001 fdd6 	bl	8002474 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008cc:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008ce:	bf00      	nop
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <main+0xe0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d106      	bne.n	80008ea <main+0x8e>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dd01      	ble.n	80008ea <main+0x8e>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <main+0x90>
 80008ea:	2300      	movs	r3, #0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ef      	bne.n	80008d0 <main+0x74>
if ( timeout < 0 )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da01      	bge.n	80008fa <main+0x9e>
{
Error_Handler();
 80008f6:	f000 fb2f 	bl	8000f58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 fa31 	bl	8000d60 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 80008fe:	f000 f8b7 	bl	8000a70 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 8000902:	f000 f997 	bl	8000c34 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000906:	f000 f9f5 	bl	8000cf4 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM5_Init();
 800090a:	f000 f903 	bl	8000b14 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800090e:	f007 fc43 	bl	8008198 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000912:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <main+0xe4>)
 8000914:	2100      	movs	r1, #0
 8000916:	480b      	ldr	r0, [pc, #44]	@ (8000944 <main+0xe8>)
 8000918:	f007 fc88 	bl	800822c <osThreadNew>
 800091c:	4603      	mov	r3, r0
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <main+0xec>)
 8000920:	6013      	str	r3, [r2, #0]

  /* creation of TestTask */
  TestTaskHandle = osThreadNew(StartTestTask, NULL, &TestTask_attributes);
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <main+0xf0>)
 8000924:	2100      	movs	r1, #0
 8000926:	480a      	ldr	r0, [pc, #40]	@ (8000950 <main+0xf4>)
 8000928:	f007 fc80 	bl	800822c <osThreadNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a09      	ldr	r2, [pc, #36]	@ (8000954 <main+0xf8>)
 8000930:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000932:	f007 fc55 	bl	80081e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <main+0xda>
 800093a:	bf00      	nop
 800093c:	58024400 	.word	0x58024400
 8000940:	0800af20 	.word	0x0800af20
 8000944:	08000e65 	.word	0x08000e65
 8000948:	24000804 	.word	0x24000804
 800094c:	0800af44 	.word	0x0800af44
 8000950:	08000e75 	.word	0x08000e75
 8000954:	24000808 	.word	0x24000808

08000958 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	@ 0x70
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	224c      	movs	r2, #76	@ 0x4c
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00a f9c6 	bl	800acf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2220      	movs	r2, #32
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00a f9c0 	bl	800acf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000978:	2004      	movs	r0, #4
 800097a:	f001 febf 	bl	80026fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b39      	ldr	r3, [pc, #228]	@ (8000a68 <_Z18SystemClock_Configv+0x110>)
 8000984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000986:	4a38      	ldr	r2, [pc, #224]	@ (8000a68 <_Z18SystemClock_Configv+0x110>)
 8000988:	f023 0301 	bic.w	r3, r3, #1
 800098c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800098e:	4b36      	ldr	r3, [pc, #216]	@ (8000a68 <_Z18SystemClock_Configv+0x110>)
 8000990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <_Z18SystemClock_Configv+0x114>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009a0:	4a32      	ldr	r2, [pc, #200]	@ (8000a6c <_Z18SystemClock_Configv+0x114>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <_Z18SystemClock_Configv+0x114>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b4:	bf00      	nop
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <_Z18SystemClock_Configv+0x114>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009c2:	bf14      	ite	ne
 80009c4:	2301      	movne	r3, #1
 80009c6:	2300      	moveq	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1f3      	bne.n	80009b6 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009dc:	2302      	movs	r3, #2
 80009de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80009e4:	2312      	movs	r3, #18
 80009e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f4:	230c      	movs	r3, #12
 80009f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009f8:	2302      	movs	r3, #2
 80009fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80009fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fee2 	bl	80027d0 <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000a1c:	f000 fa9c 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	233f      	movs	r3, #63	@ 0x3f
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2303      	movs	r3, #3
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a30:	2340      	movs	r3, #64	@ 0x40
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2101      	movs	r1, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 fb1c 	bl	8003084 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000a5c:	f000 fa7c 	bl	8000f58 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3770      	adds	r7, #112	@ 0x70
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58000400 	.word	0x58000400
 8000a6c:	58024800 	.word	0x58024800

08000a70 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <_ZL11MX_ETH_Initv+0x8c>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <_ZL11MX_ETH_Initv+0x90>)
 8000a78:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a7a:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <_ZL11MX_ETH_Initv+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a80:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <_ZL11MX_ETH_Initv+0x94>)
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <_ZL11MX_ETH_Initv+0x94>)
 8000a88:	22e1      	movs	r2, #225	@ 0xe1
 8000a8a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <_ZL11MX_ETH_Initv+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <_ZL11MX_ETH_Initv+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <_ZL11MX_ETH_Initv+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <_ZL11MX_ETH_Initv+0x8c>)
 8000aa0:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <_ZL11MX_ETH_Initv+0x94>)
 8000aa2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <_ZL11MX_ETH_Initv+0x8c>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <_ZL11MX_ETH_Initv+0x8c>)
 8000aac:	4a16      	ldr	r2, [pc, #88]	@ (8000b08 <_ZL11MX_ETH_Initv+0x98>)
 8000aae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <_ZL11MX_ETH_Initv+0x8c>)
 8000ab2:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <_ZL11MX_ETH_Initv+0x9c>)
 8000ab4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <_ZL11MX_ETH_Initv+0x8c>)
 8000ab8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000abc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <_ZL11MX_ETH_Initv+0x8c>)
 8000ac0:	f000 fec0 	bl	8001844 <HAL_ETH_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8000ad4:	f000 fa40 	bl	8000f58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ad8:	2238      	movs	r2, #56	@ 0x38
 8000ada:	2100      	movs	r1, #0
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <_ZL11MX_ETH_Initv+0xa0>)
 8000ade:	f00a f90b 	bl	800acf8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <_ZL11MX_ETH_Initv+0xa0>)
 8000ae4:	2221      	movs	r2, #33	@ 0x21
 8000ae6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <_ZL11MX_ETH_Initv+0xa0>)
 8000aea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000aee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000af0:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_ZL11MX_ETH_Initv+0xa0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	24000190 	.word	0x24000190
 8000b00:	40028000 	.word	0x40028000
 8000b04:	2400080c 	.word	0x2400080c
 8000b08:	240000c4 	.word	0x240000c4
 8000b0c:	24000064 	.word	0x24000064
 8000b10:	24000158 	.word	0x24000158

08000b14 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
  {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	@ 0x38
 8000b18:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8000b46:	4b39      	ldr	r3, [pc, #228]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b48:	4a39      	ldr	r2, [pc, #228]	@ (8000c30 <_ZL12MX_TIM5_Initv+0x11c>)
 8000b4a:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 0;
 8000b4c:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 4294967295;
 8000b58:	4b34      	ldr	r3, [pc, #208]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b5e:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b32      	ldr	r3, [pc, #200]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b66:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b6c:	482f      	ldr	r0, [pc, #188]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b6e:	f004 fc83 	bl	8005478 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <_ZL12MX_TIM5_Initv+0x72>
    {
      Error_Handler();
 8000b82:	f000 f9e9 	bl	8000f58 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4826      	ldr	r0, [pc, #152]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000b94:	f005 f8cc 	bl	8005d30 <HAL_TIM_ConfigClockSource>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_ZL12MX_TIM5_Initv+0x98>
    {
      Error_Handler();
 8000ba8:	f000 f9d6 	bl	8000f58 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000bac:	481f      	ldr	r0, [pc, #124]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000bae:	f004 fd33 	bl	8005618 <HAL_TIM_PWM_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <_ZL12MX_TIM5_Initv+0xb2>
    {
      Error_Handler();
 8000bc2:	f000 f9c9 	bl	8000f58 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000bd6:	f005 fe0b 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_ZL12MX_TIM5_Initv+0xda>
    {
      Error_Handler();
 8000bea:	f000 f9b5 	bl	8000f58 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	2360      	movs	r3, #96	@ 0x60
 8000bf0:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000c06:	f004 ff7f 	bl	8005b08 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2301      	movne	r3, #1
 8000c12:	2300      	moveq	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <_ZL12MX_TIM5_Initv+0x10a>
    {
      Error_Handler();
 8000c1a:	f000 f99d 	bl	8000f58 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */
    HAL_TIM_MspPostInit(&htim5);
 8000c1e:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <_ZL12MX_TIM5_Initv+0x118>)
 8000c20:	f000 faae 	bl	8001180 <HAL_TIM_MspPostInit>

  }
 8000c24:	bf00      	nop
 8000c26:	3738      	adds	r7, #56	@ 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000240 	.word	0x24000240
 8000c30:	40000c00 	.word	0x40000c00

08000c34 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c38:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c7c:	481b      	ldr	r0, [pc, #108]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c7e:	f005 fe63 	bl	8006948 <HAL_UART_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf14      	ite	ne
 8000c88:	2301      	movne	r3, #1
 8000c8a:	2300      	moveq	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000c92:	f000 f961 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4814      	ldr	r0, [pc, #80]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c9a:	f006 fe66 	bl	800796a <HAL_UARTEx_SetTxFifoThreshold>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf14      	ite	ne
 8000ca4:	2301      	movne	r3, #1
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000cae:	f000 f953 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000cb6:	f006 fe96 	bl	80079e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bf14      	ite	ne
 8000cc0:	2301      	movne	r3, #1
 8000cc2:	2300      	moveq	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000cca:	f000 f945 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cce:	4807      	ldr	r0, [pc, #28]	@ (8000cec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000cd0:	f006 fe12 	bl	80078f8 <HAL_UARTEx_DisableFifoMode>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000ce4:	f000 f938 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2400028c 	.word	0x2400028c
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d00:	2209      	movs	r2, #9
 8000d02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d3a:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d3c:	f001 fbae 	bl	800249c <HAL_PCD_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000d50:	f000 f902 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	24000320 	.word	0x24000320
 8000d5c:	40080000 	.word	0x40080000

08000d60 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	@ 0x30
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b39      	ldr	r3, [pc, #228]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	4a37      	ldr	r2, [pc, #220]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d86:	4b35      	ldr	r3, [pc, #212]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d94:	4b31      	ldr	r3, [pc, #196]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	4a30      	ldr	r2, [pc, #192]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	4a28      	ldr	r2, [pc, #160]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	4a21      	ldr	r2, [pc, #132]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <_ZL12MX_GPIO_Initv+0xfc>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e30:	480b      	ldr	r0, [pc, #44]	@ (8000e60 <_ZL12MX_GPIO_Initv+0x100>)
 8000e32:	f001 faeb 	bl	800240c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <_ZL12MX_GPIO_Initv+0x100>)
 8000e50:	f001 f92c 	bl	80020ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	@ 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020400 	.word	0x58020400

08000e64 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f007 fa6f 	bl	8008350 <osDelay>
 8000e72:	e7fb      	b.n	8000e6c <_Z16StartDefaultTaskPv+0x8>

08000e74 <_Z13StartTestTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTestTask */
void StartTestTask(void *argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTestTask */
	ControllerPWM pwm1(&htim5, 1);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2201      	movs	r2, #1
 8000e82:	4925      	ldr	r1, [pc, #148]	@ (8000f18 <_Z13StartTestTaskPv+0xa4>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fc39 	bl	80006fc <_ZN13ControllerPWMC1EP17TIM_HandleTypeDeft>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4822      	ldr	r0, [pc, #136]	@ (8000f18 <_Z13StartTestTaskPv+0xa4>)
 8000e8e:	f004 fc25 	bl	80056dc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {

	   tim_freq = HAL_RCC_GetSysClockFreq();
 8000e92:	f002 faad 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a20      	ldr	r2, [pc, #128]	@ (8000f1c <_Z13StartTestTaskPv+0xa8>)
 8000e9a:	6013      	str	r3, [r2, #0]


	  pwm1.set_clock_frequency(1000);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc3d 	bl	8000724 <_ZN13ControllerPWM19set_clock_frequencyEm>
	  pwm1.set_signal_frequency(50);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2132      	movs	r1, #50	@ 0x32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc49 	bl	8000748 <_ZN13ControllerPWM20set_signal_frequencyEt>

	  pwm1.set_duty_cycle(50);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2132      	movs	r1, #50	@ 0x32
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc5d 	bl	800077c <_ZN13ControllerPWM14set_duty_cycleEt>
	  pwm1.start_pwm(TIM_CHANNEL_1);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc73 	bl	80007b4 <_ZN13ControllerPWM9start_pwmEm>

	  pres = pwm1.get_prescaler();
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fcb5 	bl	8000842 <_ZN13ControllerPWM13get_prescalerEv>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a11      	ldr	r2, [pc, #68]	@ (8000f20 <_Z13StartTestTaskPv+0xac>)
 8000edc:	6013      	str	r3, [r2, #0]
	  dutyC = pwm1.get_duty_cycle();
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc98 	bl	8000818 <_ZN13ControllerPWM14get_duty_cycleEv>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <_Z13StartTestTaskPv+0xb0>)
 8000eec:	6013      	str	r3, [r2, #0]
	  arr = htim5.Init.Period;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <_Z13StartTestTaskPv+0xa4>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <_Z13StartTestTaskPv+0xb4>)
 8000ef4:	6013      	str	r3, [r2, #0]
	  arr2 = htim5.Instance->ARR;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <_Z13StartTestTaskPv+0xa4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <_Z13StartTestTaskPv+0xb8>)
 8000efe:	6013      	str	r3, [r2, #0]
	  ccr = htim5.Instance->CCR1;
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <_Z13StartTestTaskPv+0xa4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <_Z13StartTestTaskPv+0xbc>)
 8000f08:	6013      	str	r3, [r2, #0]
	  osDelay(1000);
 8000f0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f0e:	f007 fa1f 	bl	8008350 <osDelay>
	   tim_freq = HAL_RCC_GetSysClockFreq();
 8000f12:	bf00      	nop
 8000f14:	e7bd      	b.n	8000e92 <_Z13StartTestTaskPv+0x1e>
 8000f16:	bf00      	nop
 8000f18:	24000240 	.word	0x24000240
 8000f1c:	24000144 	.word	0x24000144
 8000f20:	24000140 	.word	0x24000140
 8000f24:	24000148 	.word	0x24000148
 8000f28:	2400014c 	.word	0x2400014c
 8000f2c:	24000150 	.word	0x24000150
 8000f30:	24000154 	.word	0x24000154

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f46:	f000 fb39 	bl	80015bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40014000 	.word	0x40014000

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <Error_Handler+0x8>

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <HAL_MspInit+0x38>)
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f70:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_MspInit+0x38>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_MspInit+0x38>)
 8000f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f06f 0001 	mvn.w	r0, #1
 8000f90:	f000 fc30 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58024400 	.word	0x58024400

08000fa0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08e      	sub	sp, #56	@ 0x38
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a59      	ldr	r2, [pc, #356]	@ (8001124 <HAL_ETH_MspInit+0x184>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	f040 80ab 	bne.w	800111a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fc4:	4b58      	ldr	r3, [pc, #352]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8000fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fca:	4a57      	ldr	r2, [pc, #348]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fd0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fd4:	4b54      	ldr	r3, [pc, #336]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8000fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fde:	623b      	str	r3, [r7, #32]
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fe2:	4b51      	ldr	r3, [pc, #324]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8000fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8000ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001000:	4b49      	ldr	r3, [pc, #292]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001006:	4a48      	ldr	r2, [pc, #288]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001010:	4b45      	ldr	r3, [pc, #276]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b42      	ldr	r3, [pc, #264]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	4a40      	ldr	r2, [pc, #256]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102e:	4b3e      	ldr	r3, [pc, #248]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b3a      	ldr	r3, [pc, #232]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	4a39      	ldr	r2, [pc, #228]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	4a31      	ldr	r2, [pc, #196]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	4a2a      	ldr	r2, [pc, #168]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 8001080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001088:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <HAL_ETH_MspInit+0x188>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001096:	2332      	movs	r3, #50	@ 0x32
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a6:	230b      	movs	r3, #11
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	481e      	ldr	r0, [pc, #120]	@ (800112c <HAL_ETH_MspInit+0x18c>)
 80010b2:	f000 fffb 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010b6:	2386      	movs	r3, #134	@ 0x86
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c6:	230b      	movs	r3, #11
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4817      	ldr	r0, [pc, #92]	@ (8001130 <HAL_ETH_MspInit+0x190>)
 80010d2:	f000 ffeb 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e8:	230b      	movs	r3, #11
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4810      	ldr	r0, [pc, #64]	@ (8001134 <HAL_ETH_MspInit+0x194>)
 80010f4:	f000 ffda 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010f8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800110a:	230b      	movs	r3, #11
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	4808      	ldr	r0, [pc, #32]	@ (8001138 <HAL_ETH_MspInit+0x198>)
 8001116:	f000 ffc9 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3738      	adds	r7, #56	@ 0x38
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40028000 	.word	0x40028000
 8001128:	58024400 	.word	0x58024400
 800112c:	58020800 	.word	0x58020800
 8001130:	58020000 	.word	0x58020000
 8001134:	58020400 	.word	0x58020400
 8001138:	58021800 	.word	0x58021800

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <HAL_TIM_Base_MspInit+0x3c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10e      	bne.n	800116c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_TIM_Base_MspInit+0x40>)
 8001150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_TIM_Base_MspInit+0x40>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <HAL_TIM_Base_MspInit+0x40>)
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40000c00 	.word	0x40000c00
 800117c:	58024400 	.word	0x58024400

08001180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <HAL_TIM_MspPostInit+0x68>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d11e      	bne.n	80011e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_TIM_MspPostInit+0x6c>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <HAL_TIM_MspPostInit+0x6c>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_TIM_MspPostInit+0x6c>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_TIM_MspPostInit+0x70>)
 80011dc:	f000 ff66 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40000c00 	.word	0x40000c00
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020000 	.word	0x58020000

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ba      	sub	sp, #232	@ 0xe8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	22c0      	movs	r2, #192	@ 0xc0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fd6f 	bl	800acf8 <memset>
  if(huart->Instance==USART3)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a27      	ldr	r2, [pc, #156]	@ (80012bc <HAL_UART_MspInit+0xc8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d146      	bne.n	80012b2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001224:	f04f 0202 	mov.w	r2, #2
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4618      	mov	r0, r3
 800123c:	f002 faf0 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001246:	f7ff fe87 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_UART_MspInit+0xcc>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001250:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <HAL_UART_MspInit+0xcc>)
 8001252:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001256:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_UART_MspInit+0xcc>)
 800125c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_UART_MspInit+0xcc>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <HAL_UART_MspInit+0xcc>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_UART_MspInit+0xcc>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001286:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800128a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a0:	2307      	movs	r3, #7
 80012a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_UART_MspInit+0xd0>)
 80012ae:	f000 fefd 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	37e8      	adds	r7, #232	@ 0xe8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004800 	.word	0x40004800
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58020c00 	.word	0x58020c00

080012c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0ba      	sub	sp, #232	@ 0xe8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	22c0      	movs	r2, #192	@ 0xc0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f009 fd05 	bl	800acf8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a38      	ldr	r2, [pc, #224]	@ (80013d4 <HAL_PCD_MspInit+0x10c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d169      	bne.n	80013cc <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012f8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001308:	2312      	movs	r3, #18
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001310:	2303      	movs	r3, #3
 8001312:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001318:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800131c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800131e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001322:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001324:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fa75 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800133c:	f7ff fe0c 	bl	8000f58 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001340:	f001 fa36 	bl	80027b0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_PCD_MspInit+0x110>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	4a23      	ldr	r2, [pc, #140]	@ (80013d8 <HAL_PCD_MspInit+0x110>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001354:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_PCD_MspInit+0x110>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001362:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001366:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800137c:	230a      	movs	r3, #10
 800137e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001386:	4619      	mov	r1, r3
 8001388:	4814      	ldr	r0, [pc, #80]	@ (80013dc <HAL_PCD_MspInit+0x114>)
 800138a:	f000 fe8f 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800138e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <HAL_PCD_MspInit+0x114>)
 80013aa:	f000 fe7f 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_PCD_MspInit+0x110>)
 80013b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013b4:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_PCD_MspInit+0x110>)
 80013b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80013ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_PCD_MspInit+0x110>)
 80013c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	37e8      	adds	r7, #232	@ 0xe8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40080000 	.word	0x40080000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58020000 	.word	0x58020000

080013e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	@ 0x38
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM15 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d844      	bhi.n	8001478 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM15_IRQn, TickPriority ,0U);
 80013ee:	2200      	movs	r2, #0
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	2074      	movs	r0, #116	@ 0x74
 80013f4:	f000 f9fe 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM15 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80013f8:	2074      	movs	r0, #116	@ 0x74
 80013fa:	f000 fa15 	bl	8001828 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013fe:	4a24      	ldr	r2, [pc, #144]	@ (8001490 <HAL_InitTick+0xb0>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_InitTick+0xb4>)
 8001406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800140a:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <HAL_InitTick+0xb4>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001410:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_InitTick+0xb4>)
 8001416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800141a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f9b5 	bl	800379c <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001432:	f002 f99d 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8001436:	4603      	mov	r3, r0
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800143c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800143e:	4a16      	ldr	r2, [pc, #88]	@ (8001498 <HAL_InitTick+0xb8>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	3b01      	subs	r3, #1
 8001448:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_InitTick+0xbc>)
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <HAL_InitTick+0xc0>)
 800144e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0xbc>)
 8001452:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001456:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 8001458:	4a10      	ldr	r2, [pc, #64]	@ (800149c <HAL_InitTick+0xbc>)
 800145a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800145c:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <HAL_InitTick+0xbc>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <HAL_InitTick+0xbc>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim15) == HAL_OK)
 800146a:	480c      	ldr	r0, [pc, #48]	@ (800149c <HAL_InitTick+0xbc>)
 800146c:	f004 f804 	bl	8005478 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d107      	bne.n	8001486 <HAL_InitTick+0xa6>
 8001476:	e001      	b.n	800147c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e005      	b.n	8001488 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim15);
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <HAL_InitTick+0xbc>)
 800147e:	f004 f853 	bl	8005528 <HAL_TIM_Base_Start_IT>
 8001482:	4603      	mov	r3, r0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3738      	adds	r7, #56	@ 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	24000008 	.word	0x24000008
 8001494:	58024400 	.word	0x58024400
 8001498:	431bde83 	.word	0x431bde83
 800149c:	24000814 	.word	0x24000814
 80014a0:	40014000 	.word	0x40014000

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <TIM15_IRQHandler+0x10>)
 80014e2:	f004 fa09 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24000814 	.word	0x24000814

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001528 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f4:	f7ff f86c 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	@ (800153c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151e:	f009 fc49 	bl	800adb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff f99b 	bl	800085c <main>
  bx  lr
 8001526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800152c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001530:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001534:	0800afa0 	.word	0x0800afa0
  ldr r2, =_sbss
 8001538:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 800153c:	2400538c 	.word	0x2400538c

08001540 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC3_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154a:	2003      	movs	r0, #3
 800154c:	f000 f947 	bl	80017de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001550:	f001 ff4e 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_Init+0x68>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	4913      	ldr	r1, [pc, #76]	@ (80015b0 <HAL_Init+0x6c>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_Init+0x68>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <HAL_Init+0x6c>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_Init+0x70>)
 8001586:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001588:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_Init+0x74>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158e:	200f      	movs	r0, #15
 8001590:	f7ff ff26 	bl	80013e0 <HAL_InitTick>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e002      	b.n	80015a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159e:	f7ff fce1 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58024400 	.word	0x58024400
 80015b0:	0800af10 	.word	0x0800af10
 80015b4:	24000004 	.word	0x24000004
 80015b8:	24000000 	.word	0x24000000

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2400000c 	.word	0x2400000c
 80015e0:	24000860 	.word	0x24000860

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	24000860 	.word	0x24000860

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2400000c 	.word	0x2400000c

08001644 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <HAL_GetREVID+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0c1b      	lsrs	r3, r3, #16
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	5c001000 	.word	0x5c001000

0800165c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800166c:	4904      	ldr	r1, [pc, #16]	@ (8001680 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	58000400 	.word	0x58000400

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x40>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	05fa0000 	.word	0x05fa0000

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	@ (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	@ (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	@ (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff4c 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001802:	f7ff ff63 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001806:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	6978      	ldr	r0, [r7, #20]
 800180e:	f7ff ffb3 	bl	8001778 <NVIC_EncodePriority>
 8001812:	4602      	mov	r2, r0
 8001814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff82 	bl	8001724 <__NVIC_SetPriority>
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff56 	bl	80016e8 <__NVIC_EnableIRQ>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0e3      	b.n	8001a1e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800185c:	2b00      	cmp	r3, #0
 800185e:	d106      	bne.n	800186e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2223      	movs	r2, #35	@ 0x23
 8001864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fb99 	bl	8000fa0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a28 <HAL_ETH_Init+0x1e4>)
 8001870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001874:	4a6c      	ldr	r2, [pc, #432]	@ (8001a28 <HAL_ETH_Init+0x1e4>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800187e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a28 <HAL_ETH_Init+0x1e4>)
 8001880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7a1b      	ldrb	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fee1 	bl	800165c <HAL_SYSCFG_ETHInterfaceSelect>
 800189a:	e003      	b.n	80018a4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800189c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80018a0:	f7ff fedc 	bl	800165c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80018a4:	4b61      	ldr	r3, [pc, #388]	@ (8001a2c <HAL_ETH_Init+0x1e8>)
 80018a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c0:	f7ff fe90 	bl	80015e4 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018c6:	e011      	b.n	80018ec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018c8:	f7ff fe8c 	bl	80015e4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018d6:	d909      	bls.n	80018ec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2204      	movs	r2, #4
 80018dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	22e0      	movs	r2, #224	@ 0xe0
 80018e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e098      	b.n	8001a1e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1e4      	bne.n	80018c8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f89e 	bl	8001a40 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001904:	f001 feee 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8001908:	4603      	mov	r3, r0
 800190a:	4a49      	ldr	r2, [pc, #292]	@ (8001a30 <HAL_ETH_Init+0x1ec>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0c9a      	lsrs	r2, r3, #18
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3a01      	subs	r2, #1
 8001918:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fa81 	bl	8001e24 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800192a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800192e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800193a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800193e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	22e0      	movs	r2, #224	@ 0xe0
 800195a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e05d      	b.n	8001a1e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800196e:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <HAL_ETH_Init+0x1f0>)
 8001970:	4013      	ands	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6952      	ldr	r2, [r2, #20]
 8001976:	0051      	lsls	r1, r2, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	430b      	orrs	r3, r1
 800197e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001982:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fae9 	bl	8001f5e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fb2f 	bl	8001ff0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	3305      	adds	r3, #5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	021a      	lsls	r2, r3, #8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	3303      	adds	r3, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	061a      	lsls	r2, r3, #24
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	3302      	adds	r3, #2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	041b      	lsls	r3, r3, #16
 80019c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	3301      	adds	r3, #1
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019de:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019e0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_ETH_Init+0x1f4>)
 80019f2:	430b      	orrs	r3, r1
 80019f4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HAL_ETH_Init+0x1f8>)
 8001a06:	430b      	orrs	r3, r1
 8001a08:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2210      	movs	r2, #16
 8001a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	58000400 	.word	0x58000400
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	ffff8001 	.word	0xffff8001
 8001a38:	0c020060 	.word	0x0c020060
 8001a3c:	0c20c000 	.word	0x0c20c000

08001a40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a5a:	f001 fe43 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8001a5e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4a1a      	ldr	r2, [pc, #104]	@ (8001acc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d804      	bhi.n	8001a72 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e022      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4a16      	ldr	r2, [pc, #88]	@ (8001ad0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d204      	bcs.n	8001a84 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e019      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d915      	bls.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d804      	bhi.n	8001a9e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e00c      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d804      	bhi.n	8001ab0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e003      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	02160ebf 	.word	0x02160ebf
 8001ad0:	03938700 	.word	0x03938700
 8001ad4:	05f5e0ff 	.word	0x05f5e0ff
 8001ad8:	08f0d17f 	.word	0x08f0d17f
 8001adc:	0ee6b27f 	.word	0x0ee6b27f

08001ae0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001af2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	791b      	ldrb	r3, [r3, #4]
 8001af8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001afa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7b1b      	ldrb	r3, [r3, #12]
 8001b00:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7b5b      	ldrb	r3, [r3, #13]
 8001b08:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	7b9b      	ldrb	r3, [r3, #14]
 8001b10:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	7bdb      	ldrb	r3, [r3, #15]
 8001b18:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	7c12      	ldrb	r2, [r2, #16]
 8001b20:	2a00      	cmp	r2, #0
 8001b22:	d102      	bne.n	8001b2a <ETH_SetMACConfig+0x4a>
 8001b24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b28:	e000      	b.n	8001b2c <ETH_SetMACConfig+0x4c>
 8001b2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	7c52      	ldrb	r2, [r2, #17]
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d102      	bne.n	8001b3c <ETH_SetMACConfig+0x5c>
 8001b36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b3a:	e000      	b.n	8001b3e <ETH_SetMACConfig+0x5e>
 8001b3c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	7c9b      	ldrb	r3, [r3, #18]
 8001b44:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b46:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b4c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	7f1b      	ldrb	r3, [r3, #28]
 8001b58:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	7f5b      	ldrb	r3, [r3, #29]
 8001b60:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	7f92      	ldrb	r2, [r2, #30]
 8001b68:	2a00      	cmp	r2, #0
 8001b6a:	d102      	bne.n	8001b72 <ETH_SetMACConfig+0x92>
 8001b6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b70:	e000      	b.n	8001b74 <ETH_SetMACConfig+0x94>
 8001b72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	7fdb      	ldrb	r3, [r3, #31]
 8001b7a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d102      	bne.n	8001b8e <ETH_SetMACConfig+0xae>
 8001b88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b8c:	e000      	b.n	8001b90 <ETH_SetMACConfig+0xb0>
 8001b8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b90:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b9e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001ba0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b56      	ldr	r3, [pc, #344]	@ (8001d0c <ETH_SetMACConfig+0x22c>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bcc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bd4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001bde:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001be0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	d102      	bne.n	8001bf2 <ETH_SetMACConfig+0x112>
 8001bec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bf0:	e000      	b.n	8001bf4 <ETH_SetMACConfig+0x114>
 8001bf2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bf4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4b42      	ldr	r3, [pc, #264]	@ (8001d10 <ETH_SetMACConfig+0x230>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c18:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <ETH_SetMACConfig+0x234>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c3c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d101      	bne.n	8001c52 <ETH_SetMACConfig+0x172>
 8001c4e:	2280      	movs	r2, #128	@ 0x80
 8001c50:	e000      	b.n	8001c54 <ETH_SetMACConfig+0x174>
 8001c52:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c54:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c66:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001c7c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001c84:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c92:	f023 0103 	bic.w	r1, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001caa:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d101      	bne.n	8001cce <ETH_SetMACConfig+0x1ee>
 8001cca:	2240      	movs	r2, #64	@ 0x40
 8001ccc:	e000      	b.n	8001cd0 <ETH_SetMACConfig+0x1f0>
 8001cce:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001cd0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001cd8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001ce2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001cf0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	00048083 	.word	0x00048083
 8001d10:	c0f88000 	.word	0xc0f88000
 8001d14:	fffffef0 	.word	0xfffffef0

08001d18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b38      	ldr	r3, [pc, #224]	@ (8001e10 <ETH_SetDMAConfig+0xf8>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	6811      	ldr	r1, [r2, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d3e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	791b      	ldrb	r3, [r3, #4]
 8001d44:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d4a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	7b1b      	ldrb	r3, [r3, #12]
 8001d50:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <ETH_SetDMAConfig+0xfc>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d70:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	7b5b      	ldrb	r3, [r3, #13]
 8001d76:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d88:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d8c:	4b22      	ldr	r3, [pc, #136]	@ (8001e18 <ETH_SetDMAConfig+0x100>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d9c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7d1b      	ldrb	r3, [r3, #20]
 8001da8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001daa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	7f5b      	ldrb	r3, [r3, #29]
 8001db0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dbe:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <ETH_SetDMAConfig+0x104>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dd2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	7f1b      	ldrb	r3, [r3, #28]
 8001dda:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dec:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <ETH_SetDMAConfig+0x108>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e00:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	ffff87fd 	.word	0xffff87fd
 8001e14:	ffff2ffe 	.word	0xffff2ffe
 8001e18:	fffec000 	.word	0xfffec000
 8001e1c:	ffc0efef 	.word	0xffc0efef
 8001e20:	7fc0ffff 	.word	0x7fc0ffff

08001e24 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0a4      	sub	sp, #144	@ 0x90
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e32:	2300      	movs	r3, #0
 8001e34:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e64:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e7c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001e80:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ece:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ed4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ed8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001efe:	2300      	movs	r3, #0
 8001f00:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fde6 	bl	8001ae0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f14:	2301      	movs	r3, #1
 8001f16:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f2e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f44:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fee1 	bl	8001d18 <ETH_SetDMAConfig>
}
 8001f56:	bf00      	nop
 8001f58:	3790      	adds	r7, #144	@ 0x90
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e01d      	b.n	8001fa8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68d9      	ldr	r1, [r3, #12]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	3206      	adds	r2, #6
 8001f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d9de      	bls.n	8001f6c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e023      	b.n	8002046 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6919      	ldr	r1, [r3, #16]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	3212      	adds	r2, #18
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3301      	adds	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d9d8      	bls.n	8001ffe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002072:	461a      	mov	r2, r3
 8002074:	2303      	movs	r3, #3
 8002076:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002086:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800209a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ba:	4b89      	ldr	r3, [pc, #548]	@ (80022e0 <HAL_GPIO_Init+0x234>)
 80020bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020be:	e194      	b.n	80023ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8186 	beq.w	80023e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d005      	beq.n	80020f0 <HAL_GPIO_Init+0x44>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d130      	bne.n	8002152 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002126:	2201      	movs	r2, #1
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 0201 	and.w	r2, r3, #1
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d017      	beq.n	800218e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d123      	bne.n	80021e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80e0 	beq.w	80023e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002224:	4b2f      	ldr	r3, [pc, #188]	@ (80022e4 <HAL_GPIO_Init+0x238>)
 8002226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800222a:	4a2e      	ldr	r2, [pc, #184]	@ (80022e4 <HAL_GPIO_Init+0x238>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002234:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <HAL_GPIO_Init+0x238>)
 8002236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a29      	ldr	r2, [pc, #164]	@ (80022e8 <HAL_GPIO_Init+0x23c>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a20      	ldr	r2, [pc, #128]	@ (80022ec <HAL_GPIO_Init+0x240>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d052      	beq.n	8002314 <HAL_GPIO_Init+0x268>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1f      	ldr	r2, [pc, #124]	@ (80022f0 <HAL_GPIO_Init+0x244>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d031      	beq.n	80022da <HAL_GPIO_Init+0x22e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <HAL_GPIO_Init+0x248>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <HAL_GPIO_Init+0x22a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1d      	ldr	r2, [pc, #116]	@ (80022f8 <HAL_GPIO_Init+0x24c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x226>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1c      	ldr	r2, [pc, #112]	@ (80022fc <HAL_GPIO_Init+0x250>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x222>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a1b      	ldr	r2, [pc, #108]	@ (8002300 <HAL_GPIO_Init+0x254>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x21e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a1a      	ldr	r2, [pc, #104]	@ (8002304 <HAL_GPIO_Init+0x258>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x21a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_GPIO_Init+0x25c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x216>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a18      	ldr	r2, [pc, #96]	@ (800230c <HAL_GPIO_Init+0x260>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x212>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_GPIO_Init+0x264>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x20e>
 80022b6:	2309      	movs	r3, #9
 80022b8:	e02d      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022ba:	230a      	movs	r3, #10
 80022bc:	e02b      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022be:	2308      	movs	r3, #8
 80022c0:	e029      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e027      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022c6:	2306      	movs	r3, #6
 80022c8:	e025      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e023      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e021      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e01f      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e01d      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022da:	2301      	movs	r3, #1
 80022dc:	e01b      	b.n	8002316 <HAL_GPIO_Init+0x26a>
 80022de:	bf00      	nop
 80022e0:	58000080 	.word	0x58000080
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58000400 	.word	0x58000400
 80022ec:	58020000 	.word	0x58020000
 80022f0:	58020400 	.word	0x58020400
 80022f4:	58020800 	.word	0x58020800
 80022f8:	58020c00 	.word	0x58020c00
 80022fc:	58021000 	.word	0x58021000
 8002300:	58021400 	.word	0x58021400
 8002304:	58021800 	.word	0x58021800
 8002308:	58021c00 	.word	0x58021c00
 800230c:	58022000 	.word	0x58022000
 8002310:	58022400 	.word	0x58022400
 8002314:	2300      	movs	r3, #0
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002326:	4938      	ldr	r1, [pc, #224]	@ (8002408 <HAL_GPIO_Init+0x35c>)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800235a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	3301      	adds	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f47f ae63 	bne.w	80020c0 <HAL_GPIO_Init+0x14>
  }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3724      	adds	r7, #36	@ 0x24
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	58000400 	.word	0x58000400

0800240c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241c:	787b      	ldrb	r3, [r7, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002428:	e003      	b.n	8002432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	041a      	lsls	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002448:	4a08      	ldr	r2, [pc, #32]	@ (800246c <HAL_HSEM_FastTake+0x2c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3320      	adds	r3, #32
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <HAL_HSEM_FastTake+0x30>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	58026400 	.word	0x58026400
 8002470:	80000300 	.word	0x80000300

08002474 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800247e:	4906      	ldr	r1, [pc, #24]	@ (8002498 <HAL_HSEM_Release+0x24>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	58026400 	.word	0x58026400

0800249c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0fe      	b.n	80026ac <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe ff00 	bl	80012c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2203      	movs	r2, #3
 80024cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 fb85 	bl	8007be4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7c1a      	ldrb	r2, [r3, #16]
 80024e2:	f88d 2000 	strb.w	r2, [sp]
 80024e6:	3304      	adds	r3, #4
 80024e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ea:	f005 fb09 	bl	8007b00 <USB_CoreInit>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0d5      	b.n	80026ac <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fb7d 	bl	8007c06 <USB_SetCurrentMode>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0c6      	b.n	80026ac <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e04a      	b.n	80025ba <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3315      	adds	r3, #21
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3314      	adds	r3, #20
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	b298      	uxth	r0, r3
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	332e      	adds	r3, #46	@ 0x2e
 8002560:	4602      	mov	r2, r0
 8002562:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3318      	adds	r3, #24
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	331c      	adds	r3, #28
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3320      	adds	r3, #32
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3324      	adds	r3, #36	@ 0x24
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	791b      	ldrb	r3, [r3, #4]
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3af      	bcc.n	8002524 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e044      	b.n	8002654 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3301      	adds	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3b5      	bcc.n	80025ca <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7c1a      	ldrb	r2, [r3, #16]
 8002666:	f88d 2000 	strb.w	r2, [sp]
 800266a:	3304      	adds	r3, #4
 800266c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266e:	f005 fb17 	bl	8007ca0 <USB_DevInit>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e013      	b.n	80026ac <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7b1b      	ldrb	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f80a 	bl	80026b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f005 fcd2 	bl	800804e <USB_DevDisconnect>

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026e2:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	10000003 	.word	0x10000003

080026fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002704:	4b29      	ldr	r3, [pc, #164]	@ (80027ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	2b06      	cmp	r3, #6
 800270e:	d00a      	beq.n	8002726 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002710:	4b26      	ldr	r3, [pc, #152]	@ (80027ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e040      	b.n	80027a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e03e      	b.n	80027a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002726:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800272e:	491f      	ldr	r1, [pc, #124]	@ (80027ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002736:	f7fe ff55 	bl	80015e4 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800273c:	e009      	b.n	8002752 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800273e:	f7fe ff51 	bl	80015e4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800274c:	d901      	bls.n	8002752 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e028      	b.n	80027a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002752:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275e:	d1ee      	bne.n	800273e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b1e      	cmp	r3, #30
 8002764:	d008      	beq.n	8002778 <HAL_PWREx_ConfigSupply+0x7c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b2e      	cmp	r3, #46	@ 0x2e
 800276a:	d005      	beq.n	8002778 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b1d      	cmp	r3, #29
 8002770:	d002      	beq.n	8002778 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b2d      	cmp	r3, #45	@ 0x2d
 8002776:	d114      	bne.n	80027a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002778:	f7fe ff34 	bl	80015e4 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800277e:	e009      	b.n	8002794 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002780:	f7fe ff30 	bl	80015e4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800278e:	d901      	bls.n	8002794 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e007      	b.n	80027a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a0:	d1ee      	bne.n	8002780 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	58024800 	.word	0x58024800

080027b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	58024800 	.word	0x58024800

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	@ 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f000 bc48 	b.w	8003074 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8088 	beq.w	8002902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f2:	4b99      	ldr	r3, [pc, #612]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027fc:	4b96      	ldr	r3, [pc, #600]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002804:	2b10      	cmp	r3, #16
 8002806:	d007      	beq.n	8002818 <HAL_RCC_OscConfig+0x48>
 8002808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280a:	2b18      	cmp	r3, #24
 800280c:	d111      	bne.n	8002832 <HAL_RCC_OscConfig+0x62>
 800280e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	4b8f      	ldr	r3, [pc, #572]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d06d      	beq.n	8002900 <HAL_RCC_OscConfig+0x130>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d169      	bne.n	8002900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	f000 bc21 	b.w	8003074 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x7a>
 800283c:	4b86      	ldr	r3, [pc, #536]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a85      	ldr	r2, [pc, #532]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e02e      	b.n	80028a8 <HAL_RCC_OscConfig+0xd8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x9c>
 8002852:	4b81      	ldr	r3, [pc, #516]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a80      	ldr	r2, [pc, #512]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b7e      	ldr	r3, [pc, #504]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7d      	ldr	r2, [pc, #500]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xd8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0xc0>
 8002876:	4b78      	ldr	r3, [pc, #480]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a77      	ldr	r2, [pc, #476]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b75      	ldr	r3, [pc, #468]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a74      	ldr	r2, [pc, #464]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xd8>
 8002890:	4b71      	ldr	r3, [pc, #452]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a70      	ldr	r2, [pc, #448]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b6e      	ldr	r3, [pc, #440]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6d      	ldr	r2, [pc, #436]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fe98 	bl	80015e4 <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fe94 	bl	80015e4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	@ 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e3d4      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ca:	4b63      	ldr	r3, [pc, #396]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe8>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fe84 	bl	80015e4 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fe80 	bl	80015e4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	@ 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e3c0      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f2:	4b59      	ldr	r3, [pc, #356]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x110>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80ca 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002910:	4b51      	ldr	r3, [pc, #324]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002918:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800291a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_RCC_OscConfig+0x166>
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2b18      	cmp	r3, #24
 800292a:	d156      	bne.n	80029da <HAL_RCC_OscConfig+0x20a>
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d151      	bne.n	80029da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002936:	4b48      	ldr	r3, [pc, #288]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x17e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e392      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800294e:	4b42      	ldr	r3, [pc, #264]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0219 	bic.w	r2, r3, #25
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	493f      	ldr	r1, [pc, #252]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fe40 	bl	80015e4 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe fe3c 	bl	80015e4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e37c      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297a:	4b37      	ldr	r3, [pc, #220]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002986:	f7fe fe5d 	bl	8001644 <HAL_GetREVID>
 800298a:	4603      	mov	r3, r0
 800298c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002990:	4293      	cmp	r3, r2
 8002992:	d817      	bhi.n	80029c4 <HAL_RCC_OscConfig+0x1f4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b40      	cmp	r3, #64	@ 0x40
 800299a:	d108      	bne.n	80029ae <HAL_RCC_OscConfig+0x1de>
 800299c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ac:	e07a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	031b      	lsls	r3, r3, #12
 80029bc:	4926      	ldr	r1, [pc, #152]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c2:	e06f      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	4921      	ldr	r1, [pc, #132]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	e064      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d047      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0219 	bic.w	r2, r3, #25
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	491a      	ldr	r1, [pc, #104]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fdf6 	bl	80015e4 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fdf2 	bl	80015e4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e332      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	f7fe fe13 	bl	8001644 <HAL_GetREVID>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d819      	bhi.n	8002a5c <HAL_RCC_OscConfig+0x28c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b40      	cmp	r3, #64	@ 0x40
 8002a2e:	d108      	bne.n	8002a42 <HAL_RCC_OscConfig+0x272>
 8002a30:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a38:	4a07      	ldr	r2, [pc, #28]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3e:	6053      	str	r3, [r2, #4]
 8002a40:	e030      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	031b      	lsls	r3, r3, #12
 8002a50:	4901      	ldr	r1, [pc, #4]	@ (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e025      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	4997      	ldr	r1, [pc, #604]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	e018      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b95      	ldr	r3, [pc, #596]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a94      	ldr	r2, [pc, #592]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fdb1 	bl	80015e4 <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fdad 	bl	80015e4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e2ed      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a98:	4b8b      	ldr	r3, [pc, #556]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a9 	beq.w	8002c04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	4b85      	ldr	r3, [pc, #532]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002abc:	4b82      	ldr	r3, [pc, #520]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d007      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x308>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b18      	cmp	r3, #24
 8002acc:	d13a      	bne.n	8002b44 <HAL_RCC_OscConfig+0x374>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d135      	bne.n	8002b44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_OscConfig+0x320>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b80      	cmp	r3, #128	@ 0x80
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e2c1      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af0:	f7fe fda8 	bl	8001644 <HAL_GetREVID>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d817      	bhi.n	8002b2e <HAL_RCC_OscConfig+0x35e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d108      	bne.n	8002b18 <HAL_RCC_OscConfig+0x348>
 8002b06:	4b70      	ldr	r3, [pc, #448]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b16:	e075      	b.n	8002c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b18:	4b6b      	ldr	r3, [pc, #428]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	069b      	lsls	r3, r3, #26
 8002b26:	4968      	ldr	r1, [pc, #416]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b2c:	e06a      	b.n	8002c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b2e:	4b66      	ldr	r3, [pc, #408]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	4962      	ldr	r1, [pc, #392]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b42:	e05f      	b.n	8002c04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d042      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fd44 	bl	80015e4 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b60:	f7fe fd40 	bl	80015e4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e280      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b72:	4b55      	ldr	r3, [pc, #340]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b7e:	f7fe fd61 	bl	8001644 <HAL_GetREVID>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d817      	bhi.n	8002bbc <HAL_RCC_OscConfig+0x3ec>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d108      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3d6>
 8002b94:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ba2:	6053      	str	r3, [r2, #4]
 8002ba4:	e02e      	b.n	8002c04 <HAL_RCC_OscConfig+0x434>
 8002ba6:	4b48      	ldr	r3, [pc, #288]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	4944      	ldr	r1, [pc, #272]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
 8002bba:	e023      	b.n	8002c04 <HAL_RCC_OscConfig+0x434>
 8002bbc:	4b42      	ldr	r3, [pc, #264]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	493f      	ldr	r1, [pc, #252]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
 8002bd0:	e018      	b.n	8002c04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fd01 	bl	80015e4 <HAL_GetTick>
 8002be2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002be6:	f7fe fcfd 	bl	80015e4 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e23d      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bf8:	4b33      	ldr	r3, [pc, #204]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d036      	beq.n	8002c7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d019      	beq.n	8002c4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c18:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe fcde 	bl	80015e4 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fcda 	bl	80015e4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e21a      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x45c>
 8002c4a:	e018      	b.n	8002c7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c50:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe fcc4 	bl	80015e4 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fe fcc0 	bl	80015e4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e200      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d039      	beq.n	8002cfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fca1 	bl	80015e4 <HAL_GetTick>
 8002ca2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca6:	f7fe fc9d 	bl	80015e4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1dd      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x4d6>
 8002cc4:	e01b      	b.n	8002cfe <HAL_RCC_OscConfig+0x52e>
 8002cc6:	bf00      	nop
 8002cc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ccc:	4b9b      	ldr	r3, [pc, #620]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a9a      	ldr	r2, [pc, #616]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fc84 	bl	80015e4 <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce0:	f7fe fc80 	bl	80015e4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1c0      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf2:	4b92      	ldr	r3, [pc, #584]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8081 	beq.w	8002e0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f40 <HAL_RCC_OscConfig+0x770>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a8b      	ldr	r2, [pc, #556]	@ (8002f40 <HAL_RCC_OscConfig+0x770>)
 8002d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fc64 	bl	80015e4 <HAL_GetTick>
 8002d1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d20:	f7fe fc60 	bl	80015e4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	@ 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1a0      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d32:	4b83      	ldr	r3, [pc, #524]	@ (8002f40 <HAL_RCC_OscConfig+0x770>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d106      	bne.n	8002d54 <HAL_RCC_OscConfig+0x584>
 8002d46:	4b7d      	ldr	r3, [pc, #500]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d52:	e02d      	b.n	8002db0 <HAL_RCC_OscConfig+0x5e0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x5a6>
 8002d5c:	4b77      	ldr	r3, [pc, #476]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a76      	ldr	r2, [pc, #472]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	4b74      	ldr	r3, [pc, #464]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a73      	ldr	r2, [pc, #460]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d74:	e01c      	b.n	8002db0 <HAL_RCC_OscConfig+0x5e0>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c8>
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	4a6e      	ldr	r2, [pc, #440]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0x5e0>
 8002d98:	4b68      	ldr	r3, [pc, #416]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9c:	4a67      	ldr	r2, [pc, #412]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da4:	4b65      	ldr	r3, [pc, #404]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da8:	4a64      	ldr	r2, [pc, #400]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fc14 	bl	80015e4 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fc10 	bl	80015e4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e14e      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd6:	4b59      	ldr	r3, [pc, #356]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ee      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x5f0>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fbfe 	bl	80015e4 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe fbfa 	bl	80015e4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e138      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e02:	4b4e      	ldr	r3, [pc, #312]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1ee      	bne.n	8002dec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 812d 	beq.w	8003072 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e18:	4b48      	ldr	r3, [pc, #288]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e20:	2b18      	cmp	r3, #24
 8002e22:	f000 80bd 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	f040 809e 	bne.w	8002f6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a41      	ldr	r2, [pc, #260]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fbd2 	bl	80015e4 <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fbce 	bl	80015e4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e10e      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e56:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e62:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e66:	4b37      	ldr	r3, [pc, #220]	@ (8002f44 <HAL_RCC_OscConfig+0x774>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	430a      	orrs	r2, r1
 8002e76:	4931      	ldr	r1, [pc, #196]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	3b01      	subs	r3, #1
 8002e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002eac:	4923      	ldr	r1, [pc, #140]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec2:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <HAL_RCC_OscConfig+0x778>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eca:	00d2      	lsls	r2, r2, #3
 8002ecc:	491b      	ldr	r1, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	f023 020c 	bic.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	4917      	ldr	r1, [pc, #92]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ee4:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	f023 0202 	bic.w	r2, r3, #2
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef0:	4912      	ldr	r1, [pc, #72]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	4a10      	ldr	r2, [pc, #64]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f12:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	4a07      	ldr	r2, [pc, #28]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f26:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fb57 	bl	80015e4 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f38:	e011      	b.n	8002f5e <HAL_RCC_OscConfig+0x78e>
 8002f3a:	bf00      	nop
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	58024800 	.word	0x58024800
 8002f44:	fffffc0c 	.word	0xfffffc0c
 8002f48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fb4a 	bl	80015e4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e08a      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x77c>
 8002f6a:	e082      	b.n	8003072 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b43      	ldr	r3, [pc, #268]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a42      	ldr	r2, [pc, #264]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fb34 	bl	80015e4 <HAL_GetTick>
 8002f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fb30 	bl	80015e4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e070      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f92:	4b3a      	ldr	r3, [pc, #232]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x7b0>
 8002f9e:	e068      	b.n	8003072 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fa0:	4b36      	ldr	r3, [pc, #216]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fa6:	4b35      	ldr	r3, [pc, #212]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d031      	beq.n	8003018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0203 	and.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d12a      	bne.n	8003018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d122      	bne.n	8003018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d11a      	bne.n	8003018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	0a5b      	lsrs	r3, r3, #9
 8002fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d111      	bne.n	8003018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d108      	bne.n	8003018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0e1b      	lsrs	r3, r3, #24
 800300a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003012:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e02b      	b.n	8003074 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800301c:	4b17      	ldr	r3, [pc, #92]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 800301e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003020:	08db      	lsrs	r3, r3, #3
 8003022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003026:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	429a      	cmp	r2, r3
 8003030:	d01f      	beq.n	8003072 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003032:	4b12      	ldr	r3, [pc, #72]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	4a11      	ldr	r2, [pc, #68]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800303e:	f7fe fad1 	bl	80015e4 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003044:	bf00      	nop
 8003046:	f7fe facd 	bl	80015e4 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	4293      	cmp	r3, r2
 8003050:	d0f9      	beq.n	8003046 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8003054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_RCC_OscConfig+0x8b0>)
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800305e:	00d2      	lsls	r2, r2, #3
 8003060:	4906      	ldr	r1, [pc, #24]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8003062:	4313      	orrs	r3, r2
 8003064:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003066:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	4a04      	ldr	r2, [pc, #16]	@ (800307c <HAL_RCC_OscConfig+0x8ac>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3730      	adds	r7, #48	@ 0x30
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	58024400 	.word	0x58024400
 8003080:	ffff0007 	.word	0xffff0007

08003084 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e19c      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b8a      	ldr	r3, [pc, #552]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b87      	ldr	r3, [pc, #540]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	4985      	ldr	r1, [pc, #532]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b83      	ldr	r3, [pc, #524]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e184      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	4b7b      	ldr	r3, [pc, #492]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d908      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e4:	4b78      	ldr	r3, [pc, #480]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	4975      	ldr	r1, [pc, #468]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	4b70      	ldr	r3, [pc, #448]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800310e:	429a      	cmp	r2, r3
 8003110:	d908      	bls.n	8003124 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003112:	4b6d      	ldr	r3, [pc, #436]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	496a      	ldr	r1, [pc, #424]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003120:	4313      	orrs	r3, r2
 8003122:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	4b64      	ldr	r3, [pc, #400]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800313c:	429a      	cmp	r2, r3
 800313e:	d908      	bls.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003140:	4b61      	ldr	r3, [pc, #388]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	495e      	ldr	r1, [pc, #376]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 800314e:	4313      	orrs	r3, r2
 8003150:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d010      	beq.n	8003180 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800316a:	429a      	cmp	r2, r3
 800316c:	d908      	bls.n	8003180 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800316e:	4b56      	ldr	r3, [pc, #344]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4953      	ldr	r1, [pc, #332]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 800317c:	4313      	orrs	r3, r2
 800317e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	4b4d      	ldr	r3, [pc, #308]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	429a      	cmp	r2, r3
 800319a:	d908      	bls.n	80031ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b4a      	ldr	r3, [pc, #296]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f023 020f 	bic.w	r2, r3, #15
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4947      	ldr	r1, [pc, #284]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d055      	beq.n	8003266 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031ba:	4b43      	ldr	r3, [pc, #268]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4940      	ldr	r1, [pc, #256]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d4:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d121      	bne.n	8003224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0f6      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ec:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d115      	bne.n	8003224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0ea      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d107      	bne.n	8003214 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003204:	4b30      	ldr	r3, [pc, #192]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0de      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003214:	4b2c      	ldr	r3, [pc, #176]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d6      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003224:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f023 0207 	bic.w	r2, r3, #7
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4925      	ldr	r1, [pc, #148]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003232:	4313      	orrs	r3, r2
 8003234:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003236:	f7fe f9d5 	bl	80015e4 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323c:	e00a      	b.n	8003254 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323e:	f7fe f9d1 	bl	80015e4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0be      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003254:	4b1c      	ldr	r3, [pc, #112]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	429a      	cmp	r2, r3
 8003264:	d1eb      	bne.n	800323e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	429a      	cmp	r2, r3
 8003280:	d208      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003282:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f023 020f 	bic.w	r2, r3, #15
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	490e      	ldr	r1, [pc, #56]	@ (80032c8 <HAL_RCC_ClockConfig+0x244>)
 8003290:	4313      	orrs	r3, r2
 8003292:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d214      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b08      	ldr	r3, [pc, #32]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 020f 	bic.w	r2, r3, #15
 80032aa:	4906      	ldr	r1, [pc, #24]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <HAL_RCC_ClockConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e086      	b.n	80033d2 <HAL_RCC_ClockConfig+0x34e>
 80032c4:	52002000 	.word	0x52002000
 80032c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	4b3f      	ldr	r3, [pc, #252]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d208      	bcs.n	80032fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032e8:	4b3c      	ldr	r3, [pc, #240]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	4939      	ldr	r1, [pc, #228]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d010      	beq.n	8003328 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	4b34      	ldr	r3, [pc, #208]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003312:	429a      	cmp	r2, r3
 8003314:	d208      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003316:	4b31      	ldr	r3, [pc, #196]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	492e      	ldr	r1, [pc, #184]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 8003324:	4313      	orrs	r3, r2
 8003326:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	4b28      	ldr	r3, [pc, #160]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003340:	429a      	cmp	r2, r3
 8003342:	d208      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003344:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	4922      	ldr	r1, [pc, #136]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 8003352:	4313      	orrs	r3, r2
 8003354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d010      	beq.n	8003384 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800336e:	429a      	cmp	r2, r3
 8003370:	d208      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003372:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4917      	ldr	r1, [pc, #92]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 8003380:	4313      	orrs	r3, r2
 8003382:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003384:	f000 f834 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	4912      	ldr	r1, [pc, #72]	@ (80033e0 <HAL_RCC_ClockConfig+0x35c>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <HAL_RCC_ClockConfig+0x358>)
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	4a0d      	ldr	r2, [pc, #52]	@ (80033e0 <HAL_RCC_ClockConfig+0x35c>)
 80033ac:	5cd3      	ldrb	r3, [r2, r3]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <HAL_RCC_ClockConfig+0x360>)
 80033ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033bc:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_RCC_ClockConfig+0x364>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_RCC_ClockConfig+0x368>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe f80a 	bl	80013e0 <HAL_InitTick>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	58024400 	.word	0x58024400
 80033e0:	0800af10 	.word	0x0800af10
 80033e4:	24000004 	.word	0x24000004
 80033e8:	24000000 	.word	0x24000000
 80033ec:	24000008 	.word	0x24000008

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	@ 0x24
 80033f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f6:	4bb3      	ldr	r3, [pc, #716]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033fe:	2b18      	cmp	r3, #24
 8003400:	f200 8155 	bhi.w	80036ae <HAL_RCC_GetSysClockFreq+0x2be>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003471 	.word	0x08003471
 8003410:	080036af 	.word	0x080036af
 8003414:	080036af 	.word	0x080036af
 8003418:	080036af 	.word	0x080036af
 800341c:	080036af 	.word	0x080036af
 8003420:	080036af 	.word	0x080036af
 8003424:	080036af 	.word	0x080036af
 8003428:	080036af 	.word	0x080036af
 800342c:	08003497 	.word	0x08003497
 8003430:	080036af 	.word	0x080036af
 8003434:	080036af 	.word	0x080036af
 8003438:	080036af 	.word	0x080036af
 800343c:	080036af 	.word	0x080036af
 8003440:	080036af 	.word	0x080036af
 8003444:	080036af 	.word	0x080036af
 8003448:	080036af 	.word	0x080036af
 800344c:	0800349d 	.word	0x0800349d
 8003450:	080036af 	.word	0x080036af
 8003454:	080036af 	.word	0x080036af
 8003458:	080036af 	.word	0x080036af
 800345c:	080036af 	.word	0x080036af
 8003460:	080036af 	.word	0x080036af
 8003464:	080036af 	.word	0x080036af
 8003468:	080036af 	.word	0x080036af
 800346c:	080034a3 	.word	0x080034a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003470:	4b94      	ldr	r3, [pc, #592]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800347c:	4b91      	ldr	r3, [pc, #580]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	08db      	lsrs	r3, r3, #3
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	4a90      	ldr	r2, [pc, #576]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800348e:	e111      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003490:	4b8d      	ldr	r3, [pc, #564]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003492:	61bb      	str	r3, [r7, #24]
      break;
 8003494:	e10e      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003496:	4b8d      	ldr	r3, [pc, #564]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003498:	61bb      	str	r3, [r7, #24]
      break;
 800349a:	e10b      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800349c:	4b8c      	ldr	r3, [pc, #560]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800349e:	61bb      	str	r3, [r7, #24]
      break;
 80034a0:	e108      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034a2:	4b88      	ldr	r3, [pc, #544]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034ac:	4b85      	ldr	r3, [pc, #532]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034b8:	4b82      	ldr	r3, [pc, #520]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034c2:	4b80      	ldr	r3, [pc, #512]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c6:	08db      	lsrs	r3, r3, #3
 80034c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80e1 	beq.w	80036a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	f000 8083 	beq.w	80035f4 <HAL_RCC_GetSysClockFreq+0x204>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	f200 80a1 	bhi.w	8003638 <HAL_RCC_GetSysClockFreq+0x248>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x114>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d056      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003502:	e099      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003504:	4b6f      	ldr	r3, [pc, #444]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02d      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003510:	4b6c      	ldr	r3, [pc, #432]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	08db      	lsrs	r3, r3, #3
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	4a6b      	ldr	r2, [pc, #428]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b62      	ldr	r3, [pc, #392]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a02 	vldr	s12, [r7, #8]
 800354e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800356a:	e087      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800357a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357e:	4b51      	ldr	r3, [pc, #324]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003592:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ae:	e065      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80035be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c2:	4b40      	ldr	r3, [pc, #256]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035f2:	e043      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003606:	4b2f      	ldr	r3, [pc, #188]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003616:	ed97 6a02 	vldr	s12, [r7, #8]
 800361a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800362a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003632:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003636:	e021      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364a:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365a:	ed97 6a02 	vldr	s12, [r7, #8]
 800365e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800366e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800367a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800367c:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003686:	3301      	adds	r3, #1
 8003688:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003694:	edd7 6a07 	vldr	s13, [r7, #28]
 8003698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a0:	ee17 3a90 	vmov	r3, s15
 80036a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036a6:	e005      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
      break;
 80036ac:	e002      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036ae:	4b07      	ldr	r3, [pc, #28]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036b0:	61bb      	str	r3, [r7, #24]
      break;
 80036b2:	bf00      	nop
  }

  return sysclockfreq;
 80036b4:	69bb      	ldr	r3, [r7, #24]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	@ 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
 80036c8:	03d09000 	.word	0x03d09000
 80036cc:	003d0900 	.word	0x003d0900
 80036d0:	007a1200 	.word	0x007a1200
 80036d4:	46000000 	.word	0x46000000
 80036d8:	4c742400 	.word	0x4c742400
 80036dc:	4a742400 	.word	0x4a742400
 80036e0:	4af42400 	.word	0x4af42400

080036e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ea:	f7ff fe81 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <HAL_RCC_GetHCLKFreq+0x50>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	490f      	ldr	r1, [pc, #60]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x54>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003708:	4b0a      	ldr	r3, [pc, #40]	@ (8003734 <HAL_RCC_GetHCLKFreq+0x50>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	4a09      	ldr	r2, [pc, #36]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x54>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a07      	ldr	r2, [pc, #28]	@ (800373c <HAL_RCC_GetHCLKFreq+0x58>)
 8003720:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003722:	4a07      	ldr	r2, [pc, #28]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003728:	4b04      	ldr	r3, [pc, #16]	@ (800373c <HAL_RCC_GetHCLKFreq+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	58024400 	.word	0x58024400
 8003738:	0800af10 	.word	0x0800af10
 800373c:	24000004 	.word	0x24000004
 8003740:	24000000 	.word	0x24000000

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003748:	f7ff ffcc 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4904      	ldr	r1, [pc, #16]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x28>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	58024400 	.word	0x58024400
 800376c:	0800af10 	.word	0x0800af10

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003774:	f7ff ffb6 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4904      	ldr	r1, [pc, #16]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	58024400 	.word	0x58024400
 8003798:	0800af10 	.word	0x0800af10

0800379c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	223f      	movs	r2, #63	@ 0x3f
 80037aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_RCC_GetClockConfig+0x7c>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0207 	and.w	r2, r3, #7
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80037b8:	4b17      	ldr	r3, [pc, #92]	@ (8003818 <HAL_RCC_GetClockConfig+0x7c>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80037c4:	4b14      	ldr	r3, [pc, #80]	@ (8003818 <HAL_RCC_GetClockConfig+0x7c>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 020f 	and.w	r2, r3, #15
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_GetClockConfig+0x7c>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80037dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <HAL_RCC_GetClockConfig+0x7c>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_GetClockConfig+0x7c>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80037f4:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_RCC_GetClockConfig+0x7c>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003800:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_RCC_GetClockConfig+0x80>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	601a      	str	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	58024400 	.word	0x58024400
 800381c:	52002000 	.word	0x52002000

08003820 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003824:	b0ca      	sub	sp, #296	@ 0x128
 8003826:	af00      	add	r7, sp, #0
 8003828:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800382c:	2300      	movs	r3, #0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003832:	2300      	movs	r3, #0
 8003834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003844:	2500      	movs	r5, #0
 8003846:	ea54 0305 	orrs.w	r3, r4, r5
 800384a:	d049      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003856:	d02f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800385c:	d828      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800385e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003862:	d01a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003868:	d822      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003872:	d007      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003874:	e01c      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003876:	4bb8      	ldr	r3, [pc, #736]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	4ab7      	ldr	r2, [pc, #732]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003882:	e01a      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003888:	3308      	adds	r3, #8
 800388a:	2102      	movs	r1, #2
 800388c:	4618      	mov	r0, r3
 800388e:	f001 fc8f 	bl	80051b0 <RCCEx_PLL2_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003898:	e00f      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	3328      	adds	r3, #40	@ 0x28
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fd36 	bl	8005314 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038c2:	4ba5      	ldr	r3, [pc, #660]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d0:	4aa1      	ldr	r2, [pc, #644]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80038ec:	f04f 0900 	mov.w	r9, #0
 80038f0:	ea58 0309 	orrs.w	r3, r8, r9
 80038f4:	d047      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d82a      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003900:	a201      	add	r2, pc, #4	@ (adr r2, 8003908 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800391d 	.word	0x0800391d
 800390c:	0800392b 	.word	0x0800392b
 8003910:	08003941 	.word	0x08003941
 8003914:	0800395f 	.word	0x0800395f
 8003918:	0800395f 	.word	0x0800395f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b8e      	ldr	r3, [pc, #568]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	4a8d      	ldr	r2, [pc, #564]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003928:	e01a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fc3c 	bl	80051b0 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800393e:	e00f      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	3328      	adds	r3, #40	@ 0x28
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fce3 	bl	8005314 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003954:	e004      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003968:	4b7b      	ldr	r3, [pc, #492]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	f023 0107 	bic.w	r1, r3, #7
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	4a78      	ldr	r2, [pc, #480]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003978:	430b      	orrs	r3, r1
 800397a:	6513      	str	r3, [r2, #80]	@ 0x50
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003992:	f04f 0b00 	mov.w	fp, #0
 8003996:	ea5a 030b 	orrs.w	r3, sl, fp
 800399a:	d04c      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a6:	d030      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ac:	d829      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80039b0:	d02d      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039b4:	d825      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039b6:	2b80      	cmp	r3, #128	@ 0x80
 80039b8:	d018      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d821      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80039c2:	2b40      	cmp	r3, #64	@ 0x40
 80039c4:	d007      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80039c6:	e01c      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b63      	ldr	r3, [pc, #396]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4a62      	ldr	r2, [pc, #392]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039d4:	e01c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	3308      	adds	r3, #8
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fbe6 	bl	80051b0 <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	3328      	adds	r3, #40	@ 0x28
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fc8d 	bl	8005314 <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a18:	4b4f      	ldr	r3, [pc, #316]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	4a4c      	ldr	r2, [pc, #304]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003a50:	460b      	mov	r3, r1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d053      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a62:	d035      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a68:	d82e      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a6e:	d031      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a74:	d828      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a7a:	d01a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a80:	d822      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a8a:	d007      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a8c:	e01c      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8e:	4b32      	ldr	r3, [pc, #200]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	4a31      	ldr	r2, [pc, #196]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fb83 	bl	80051b0 <RCCEx_PLL2_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e011      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	3328      	adds	r3, #40	@ 0x28
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fc2a 	bl	8005314 <RCCEx_PLL3_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ac6:	e006      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ade:	4b1e      	ldr	r3, [pc, #120]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003aee:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d056      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b2a:	d038      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b30:	d831      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b36:	d034      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b3c:	d82b      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b42:	d01d      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b48:	d825      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b54:	e01f      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	4aa1      	ldr	r2, [pc, #644]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	3308      	adds	r3, #8
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fb1c 	bl	80051b0 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e011      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	3328      	adds	r3, #40	@ 0x28
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fbc3 	bl	8005314 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bac:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bbc:	4a8a      	ldr	r2, [pc, #552]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc2:	e003      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003be2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d03a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	2b30      	cmp	r3, #48	@ 0x30
 8003bf4:	d01f      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003bf6:	2b30      	cmp	r3, #48	@ 0x30
 8003bf8:	d819      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d00c      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d815      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d019      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d111      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0a:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	4a76      	ldr	r2, [pc, #472]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c16:	e011      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 fac5 	bl	80051b0 <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c44:	4b68      	ldr	r3, [pc, #416]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	4a65      	ldr	r2, [pc, #404]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d051      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8c:	d035      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c92:	d82e      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c98:	d031      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c9e:	d828      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca4:	d01a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003caa:	d822      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cb6:	e01c      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e01c      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fa6e 	bl	80051b0 <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cda:	e011      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce0:	3328      	adds	r3, #40	@ 0x28
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fb15 	bl	8005314 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf8:	e002      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d08:	4b37      	ldr	r3, [pc, #220]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d16:	4a34      	ldr	r2, [pc, #208]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d056      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d50:	d033      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d56:	d82c      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d5c:	d02f      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d62:	d826      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d68:	d02b      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d6e:	d820      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d74:	d012      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d7a:	d81a      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d022      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d84:	d115      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fa0e 	bl	80051b0 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d9a:	e015      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	3328      	adds	r3, #40	@ 0x28
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fab5 	bl	8005314 <RCCEx_PLL3_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dde:	4a02      	ldr	r2, [pc, #8]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003de4:	e006      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003de6:	bf00      	nop
 8003de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d055      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e20:	d033      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e26:	d82c      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2c:	d02f      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e32:	d826      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e38:	d02b      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e3e:	d820      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e44:	d012      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e4a:	d81a      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d022      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e54:	d115      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f9a6 	bl	80051b0 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e015      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	3328      	adds	r3, #40	@ 0x28
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 fa4d 	bl	8005314 <RCCEx_PLL3_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e80:	e00a      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e004      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e002      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ea0:	4ba3      	ldr	r3, [pc, #652]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb6:	e003      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eda:	460b      	mov	r3, r1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	d037      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eea:	d00e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef0:	d816      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003efa:	d111      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efc:	4b8c      	ldr	r3, [pc, #560]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	4a8b      	ldr	r2, [pc, #556]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f08:	e00f      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3308      	adds	r3, #8
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f94c 	bl	80051b0 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f1e:	e004      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f32:	4b7f      	ldr	r3, [pc, #508]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a7b      	ldr	r2, [pc, #492]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d039      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d81c      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fbd 	.word	0x08003fbd
 8003f84:	08003f91 	.word	0x08003f91
 8003f88:	08003f9f 	.word	0x08003f9f
 8003f8c:	08003fbd 	.word	0x08003fbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f90:	4b67      	ldr	r3, [pc, #412]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	4a66      	ldr	r2, [pc, #408]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 f902 	bl	80051b0 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fb2:	e004      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fba:	e000      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	f023 0103 	bic.w	r1, r3, #3
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd4:	4a56      	ldr	r2, [pc, #344]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ffa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	f000 809f 	beq.w	8004144 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004006:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004012:	f7fd fae7 	bl	80015e4 <HAL_GetTick>
 8004016:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401a:	e00b      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fd fae2 	bl	80015e4 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b64      	cmp	r3, #100	@ 0x64
 800402a:	d903      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004032:	e005      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004034:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ed      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004044:	2b00      	cmp	r3, #0
 8004046:	d179      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004048:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004054:	4053      	eors	r3, r2
 8004056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406a:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	4a30      	ldr	r2, [pc, #192]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004074:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004076:	4b2e      	ldr	r3, [pc, #184]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	4a2d      	ldr	r2, [pc, #180]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004080:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004082:	4a2b      	ldr	r2, [pc, #172]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004088:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004096:	d118      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd faa4 	bl	80015e4 <HAL_GetTick>
 800409c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040a0:	e00d      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fd fa9f 	bl	80015e4 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040ac:	1ad2      	subs	r2, r2, r3
 80040ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d903      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80040bc:	e005      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040be:	4b1c      	ldr	r3, [pc, #112]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0eb      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d129      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e2:	d10e      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040f4:	091a      	lsrs	r2, r3, #4
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6113      	str	r3, [r2, #16]
 8004100:	e005      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4a0a      	ldr	r2, [pc, #40]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004108:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800410c:	6113      	str	r3, [r2, #16]
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004110:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004120:	430b      	orrs	r3, r1
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
 8004124:	e00e      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800412e:	e009      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004130:	58024400 	.word	0x58024400
 8004134:	58024800 	.word	0x58024800
 8004138:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f002 0301 	and.w	r3, r2, #1
 8004150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800415a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	f000 8089 	beq.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416c:	2b28      	cmp	r3, #40	@ 0x28
 800416e:	d86b      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004170:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004251 	.word	0x08004251
 800417c:	08004249 	.word	0x08004249
 8004180:	08004249 	.word	0x08004249
 8004184:	08004249 	.word	0x08004249
 8004188:	08004249 	.word	0x08004249
 800418c:	08004249 	.word	0x08004249
 8004190:	08004249 	.word	0x08004249
 8004194:	08004249 	.word	0x08004249
 8004198:	0800421d 	.word	0x0800421d
 800419c:	08004249 	.word	0x08004249
 80041a0:	08004249 	.word	0x08004249
 80041a4:	08004249 	.word	0x08004249
 80041a8:	08004249 	.word	0x08004249
 80041ac:	08004249 	.word	0x08004249
 80041b0:	08004249 	.word	0x08004249
 80041b4:	08004249 	.word	0x08004249
 80041b8:	08004233 	.word	0x08004233
 80041bc:	08004249 	.word	0x08004249
 80041c0:	08004249 	.word	0x08004249
 80041c4:	08004249 	.word	0x08004249
 80041c8:	08004249 	.word	0x08004249
 80041cc:	08004249 	.word	0x08004249
 80041d0:	08004249 	.word	0x08004249
 80041d4:	08004249 	.word	0x08004249
 80041d8:	08004251 	.word	0x08004251
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004249 	.word	0x08004249
 80041e4:	08004249 	.word	0x08004249
 80041e8:	08004249 	.word	0x08004249
 80041ec:	08004249 	.word	0x08004249
 80041f0:	08004249 	.word	0x08004249
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004249 	.word	0x08004249
 8004204:	08004249 	.word	0x08004249
 8004208:	08004249 	.word	0x08004249
 800420c:	08004249 	.word	0x08004249
 8004210:	08004249 	.word	0x08004249
 8004214:	08004249 	.word	0x08004249
 8004218:	08004251 	.word	0x08004251
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	3308      	adds	r3, #8
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 ffc3 	bl	80051b0 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	3328      	adds	r3, #40	@ 0x28
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f001 f86a 	bl	8005314 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800425a:	4bbf      	ldr	r3, [pc, #764]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004268:	4abb      	ldr	r2, [pc, #748]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800426a:	430b      	orrs	r3, r1
 800426c:	6553      	str	r3, [r2, #84]	@ 0x54
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 0302 	and.w	r3, r2, #2
 8004284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800428e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d041      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d824      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80042a2:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042f5 	.word	0x080042f5
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042d7 	.word	0x080042d7
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	080042f5 	.word	0x080042f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c4:	3308      	adds	r3, #8
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 ff71 	bl	80051b0 <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042d4:	e00f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	3328      	adds	r3, #40	@ 0x28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 f818 	bl	8005314 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042fe:	4b96      	ldr	r3, [pc, #600]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004302:	f023 0107 	bic.w	r1, r3, #7
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800430c:	4a92      	ldr	r2, [pc, #584]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800430e:	430b      	orrs	r3, r1
 8004310:	6553      	str	r3, [r2, #84]	@ 0x54
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f002 0304 	and.w	r3, r2, #4
 8004328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004332:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d044      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004344:	2b05      	cmp	r3, #5
 8004346:	d825      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004348:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	0800439d 	.word	0x0800439d
 8004354:	08004369 	.word	0x08004369
 8004358:	0800437f 	.word	0x0800437f
 800435c:	0800439d 	.word	0x0800439d
 8004360:	0800439d 	.word	0x0800439d
 8004364:	0800439d 	.word	0x0800439d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	3308      	adds	r3, #8
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ff1d 	bl	80051b0 <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	3328      	adds	r3, #40	@ 0x28
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 ffc4 	bl	8005314 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800439c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	f023 0107 	bic.w	r1, r3, #7
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b6:	4a68      	ldr	r2, [pc, #416]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f002 0320 	and.w	r3, r2, #32
 80043d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d055      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043f2:	d033      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80043f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043f8:	d82c      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d02f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d826      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800440a:	d02b      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800440c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004410:	d820      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004416:	d012      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800441c:	d81a      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d022      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004426:	d115      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	3308      	adds	r3, #8
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f000 febd 	bl	80051b0 <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800443c:	e015      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	3328      	adds	r3, #40	@ 0x28
 8004444:	2102      	movs	r1, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 ff64 	bl	8005314 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004452:	e00a      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800445a:	e006      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800445c:	bf00      	nop
 800445e:	e004      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004460:	bf00      	nop
 8004462:	e002      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004464:	bf00      	nop
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004472:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	4a35      	ldr	r2, [pc, #212]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6553      	str	r3, [r2, #84]	@ 0x54
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800448e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800449e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044a2:	2300      	movs	r3, #0
 80044a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80044a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d058      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044be:	d033      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80044c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044c4:	d82c      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ca:	d02f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d0:	d826      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044d6:	d02b      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80044d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044dc:	d820      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e2:	d012      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e8:	d81a      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d022      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f2:	d115      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f8:	3308      	adds	r3, #8
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fe57 	bl	80051b0 <RCCEx_PLL2_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004508:	e015      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3328      	adds	r3, #40	@ 0x28
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fefe 	bl	8005314 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800451e:	e00a      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004526:	e006      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004528:	bf00      	nop
 800452a:	e004      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800452c:	bf00      	nop
 800452e:	e002      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004530:	bf00      	nop
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10e      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800454e:	4a02      	ldr	r2, [pc, #8]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004550:	430b      	orrs	r3, r1
 8004552:	6593      	str	r3, [r2, #88]	@ 0x58
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004556:	bf00      	nop
 8004558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004574:	2300      	movs	r3, #0
 8004576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800457a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800457e:	460b      	mov	r3, r1
 8004580:	4313      	orrs	r3, r2
 8004582:	d055      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800458c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004590:	d033      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004592:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004596:	d82c      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459c:	d02f      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800459e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a2:	d826      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045a8:	d02b      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80045aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045ae:	d820      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d012      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80045b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ba:	d81a      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d022      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c4:	d115      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	3308      	adds	r3, #8
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fdee 	bl	80051b0 <RCCEx_PLL2_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045da:	e015      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	3328      	adds	r3, #40	@ 0x28
 80045e2:	2102      	movs	r1, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fe95 	bl	8005314 <RCCEx_PLL3_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045f0:	e00a      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004610:	4ba1      	ldr	r3, [pc, #644]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004620:	4a9d      	ldr	r2, [pc, #628]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6593      	str	r3, [r2, #88]	@ 0x58
 8004626:	e003      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f002 0308 	and.w	r3, r2, #8
 800463c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004646:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d01e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	3328      	adds	r3, #40	@ 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fe54 	bl	8005314 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004678:	4b87      	ldr	r3, [pc, #540]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004688:	4a83      	ldr	r2, [pc, #524]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468a:	430b      	orrs	r3, r1
 800468c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f002 0310 	and.w	r3, r2, #16
 800469a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d01e      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	3328      	adds	r3, #40	@ 0x28
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fe25 	bl	8005314 <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046d6:	4b70      	ldr	r3, [pc, #448]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80046f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004702:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	d03e      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004718:	d022      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800471a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800471e:	d81b      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004728:	d00b      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800472a:	e015      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	3308      	adds	r3, #8
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fd3b 	bl	80051b0 <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004740:	e00f      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	3328      	adds	r3, #40	@ 0x28
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fde2 	bl	8005314 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004756:	e004      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800476a:	4b4b      	ldr	r3, [pc, #300]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800477a:	4a47      	ldr	r2, [pc, #284]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800477c:	430b      	orrs	r3, r1
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004780:	e003      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004798:	2300      	movs	r3, #0
 800479a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800479c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d03b      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047b2:	d01f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80047b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047b8:	d818      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80047ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047be:	d003      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80047c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c4:	d007      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80047c6:	e011      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c8:	4b33      	ldr	r3, [pc, #204]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	4a32      	ldr	r2, [pc, #200]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80047d4:	e00f      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	3328      	adds	r3, #40	@ 0x28
 80047dc:	2101      	movs	r1, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fd98 	bl	8005314 <RCCEx_PLL3_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80047ea:	e004      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80047f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047fe:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480e:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004810:	430b      	orrs	r3, r1
 8004812:	6553      	str	r3, [r2, #84]	@ 0x54
 8004814:	e003      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800482a:	673b      	str	r3, [r7, #112]	@ 0x70
 800482c:	2300      	movs	r3, #0
 800482e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004830:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004834:	460b      	mov	r3, r1
 8004836:	4313      	orrs	r3, r2
 8004838:	d034      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004848:	d007      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800484a:	e011      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	4a11      	ldr	r2, [pc, #68]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004858:	e00e      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3308      	adds	r3, #8
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fca4 	bl	80051b0 <RCCEx_PLL2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800486e:	e003      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004884:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800488e:	4a02      	ldr	r2, [pc, #8]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004890:	430b      	orrs	r3, r1
 8004892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004894:	e006      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004896:	bf00      	nop
 8004898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b2:	2300      	movs	r3, #0
 80048b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d00c      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c4:	3328      	adds	r3, #40	@ 0x28
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fd23 	bl	8005314 <RCCEx_PLL3_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80048e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e8:	2300      	movs	r3, #0
 80048ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80048f0:	460b      	mov	r3, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	d038      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004902:	d018      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004908:	d811      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800490a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800490e:	d014      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004914:	d80b      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d011      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800491a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491e:	d106      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004920:	4bc3      	ldr	r3, [pc, #780]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	4ac2      	ldr	r2, [pc, #776]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800492c:	e008      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004934:	e004      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004936:	bf00      	nop
 8004938:	e002      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800493e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004948:	4bb9      	ldr	r3, [pc, #740]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004958:	4ab5      	ldr	r2, [pc, #724]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800495a:	430b      	orrs	r3, r1
 800495c:	6553      	str	r3, [r2, #84]	@ 0x54
 800495e:	e003      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004976:	2300      	movs	r3, #0
 8004978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800497a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004984:	4baa      	ldr	r3, [pc, #680]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004988:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004992:	4aa7      	ldr	r2, [pc, #668]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004994:	430b      	orrs	r3, r1
 8004996:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a6:	2300      	movs	r3, #0
 80049a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049ae:	460b      	mov	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049b4:	4b9e      	ldr	r3, [pc, #632]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80049c4:	4a9a      	ldr	r2, [pc, #616]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c6:	430b      	orrs	r3, r1
 80049c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d8:	2300      	movs	r3, #0
 80049da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049e6:	4b92      	ldr	r3, [pc, #584]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f4:	4a8e      	ldr	r2, [pc, #568]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a08:	2300      	movs	r3, #0
 8004a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a16:	4b86      	ldr	r3, [pc, #536]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	4a85      	ldr	r2, [pc, #532]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a20:	6113      	str	r3, [r2, #16]
 8004a22:	4b83      	ldr	r3, [pc, #524]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a24:	6919      	ldr	r1, [r3, #16]
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a2e:	4a80      	ldr	r2, [pc, #512]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a42:	2300      	movs	r3, #0
 8004a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a50:	4b77      	ldr	r3, [pc, #476]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	4a74      	ldr	r2, [pc, #464]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a60:	430b      	orrs	r3, r1
 8004a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a80:	4b6b      	ldr	r3, [pc, #428]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a90:	4a67      	ldr	r2, [pc, #412]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d011      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fb78 	bl	80051b0 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6239      	str	r1, [r7, #32]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	3308      	adds	r3, #8
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fb58 	bl	80051b0 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	61b9      	str	r1, [r7, #24]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d011      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	3308      	adds	r3, #8
 8004b38:	2102      	movs	r1, #2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fb38 	bl	80051b0 <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6139      	str	r1, [r7, #16]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	3328      	adds	r3, #40	@ 0x28
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fbca 	bl	8005314 <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d011      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3328      	adds	r3, #40	@ 0x28
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fbaa 	bl	8005314 <RCCEx_PLL3_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	2100      	movs	r1, #0
 8004be0:	6039      	str	r1, [r7, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d011      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf6:	3328      	adds	r3, #40	@ 0x28
 8004bf8:	2102      	movs	r1, #2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fb8a 	bl	8005314 <RCCEx_PLL3_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004c16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c30:	58024400 	.word	0x58024400

08004c34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c38:	f7fe fd54 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4904      	ldr	r1, [pc, #16]	@ (8004c5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	0800af10 	.word	0x0800af10

08004c60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	@ 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c68:	4ba1      	ldr	r3, [pc, #644]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c72:	4b9f      	ldr	r3, [pc, #636]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	0b1b      	lsrs	r3, r3, #12
 8004c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c8a:	4b99      	ldr	r3, [pc, #612]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8111 	beq.w	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	f000 8083 	beq.w	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	f200 80a1 	bhi.w	8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d056      	beq.n	8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004cca:	e099      	b.n	8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ccc:	4b88      	ldr	r3, [pc, #544]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02d      	beq.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cd8:	4b85      	ldr	r3, [pc, #532]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	08db      	lsrs	r3, r3, #3
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	4a84      	ldr	r2, [pc, #528]	@ (8004ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	ee07 3a90 	vmov	s15, r3
 8004cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b7b      	ldr	r3, [pc, #492]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d32:	e087      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004efc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d76:	e065      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8a:	4b59      	ldr	r3, [pc, #356]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dba:	e043      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dce:	4b48      	ldr	r3, [pc, #288]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfe:	e021      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	4b37      	ldr	r3, [pc, #220]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004e44:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	0a5b      	lsrs	r3, r3, #9
 8004e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6a:	ee17 2a90 	vmov	r2, s15
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e72:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e98:	ee17 2a90 	vmov	r2, s15
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ea0:	4b13      	ldr	r3, [pc, #76]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	0e1b      	lsrs	r3, r3, #24
 8004ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec6:	ee17 2a90 	vmov	r2, s15
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ece:	e008      	b.n	8004ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
}
 8004ee2:	bf00      	nop
 8004ee4:	3724      	adds	r7, #36	@ 0x24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	03d09000 	.word	0x03d09000
 8004ef8:	46000000 	.word	0x46000000
 8004efc:	4c742400 	.word	0x4c742400
 8004f00:	4a742400 	.word	0x4a742400
 8004f04:	4af42400 	.word	0x4af42400

08004f08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	@ 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f10:	4ba1      	ldr	r3, [pc, #644]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004f1a:	4b9f      	ldr	r3, [pc, #636]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	0d1b      	lsrs	r3, r3, #20
 8004f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f26:	4b9c      	ldr	r3, [pc, #624]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f32:	4b99      	ldr	r3, [pc, #612]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8111 	beq.w	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f000 8083 	beq.w	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	f200 80a1 	bhi.w	80050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d056      	beq.n	8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f72:	e099      	b.n	80050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f74:	4b88      	ldr	r3, [pc, #544]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02d      	beq.n	8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f80:	4b85      	ldr	r3, [pc, #532]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	4a84      	ldr	r2, [pc, #528]	@ (800519c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b7b      	ldr	r3, [pc, #492]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fda:	e087      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80051a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b6a      	ldr	r3, [pc, #424]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501e:	e065      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80051a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b59      	ldr	r3, [pc, #356]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a03 	vldr	s12, [r7, #12]
 8005046:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005062:	e043      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005076:	4b48      	ldr	r3, [pc, #288]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005086:	ed97 6a03 	vldr	s12, [r7, #12]
 800508a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050a6:	e021      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80051a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ba:	4b37      	ldr	r3, [pc, #220]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80050ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	0a5b      	lsrs	r3, r3, #9
 80050f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005106:	edd7 6a07 	vldr	s13, [r7, #28]
 800510a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005112:	ee17 2a90 	vmov	r2, s15
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800511a:	4b1f      	ldr	r3, [pc, #124]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005134:	edd7 6a07 	vldr	s13, [r7, #28]
 8005138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005140:	ee17 2a90 	vmov	r2, s15
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005148:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	0e1b      	lsrs	r3, r3, #24
 800514e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800515e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005162:	edd7 6a07 	vldr	s13, [r7, #28]
 8005166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516e:	ee17 2a90 	vmov	r2, s15
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005176:	e008      	b.n	800518a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
}
 800518a:	bf00      	nop
 800518c:	3724      	adds	r7, #36	@ 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	03d09000 	.word	0x03d09000
 80051a0:	46000000 	.word	0x46000000
 80051a4:	4c742400 	.word	0x4c742400
 80051a8:	4a742400 	.word	0x4a742400
 80051ac:	4af42400 	.word	0x4af42400

080051b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051be:	4b53      	ldr	r3, [pc, #332]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d101      	bne.n	80051ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e099      	b.n	8005302 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80051ce:	4b4f      	ldr	r3, [pc, #316]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4e      	ldr	r2, [pc, #312]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051da:	f7fc fa03 	bl	80015e4 <HAL_GetTick>
 80051de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051e0:	e008      	b.n	80051f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051e2:	f7fc f9ff 	bl	80015e4 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e086      	b.n	8005302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051f4:	4b45      	ldr	r3, [pc, #276]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005200:	4b42      	ldr	r3, [pc, #264]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	493f      	ldr	r1, [pc, #252]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	628b      	str	r3, [r1, #40]	@ 0x28
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	3b01      	subs	r3, #1
 800521a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	3b01      	subs	r3, #1
 8005224:	025b      	lsls	r3, r3, #9
 8005226:	b29b      	uxth	r3, r3
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	3b01      	subs	r3, #1
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	3b01      	subs	r3, #1
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005244:	4931      	ldr	r1, [pc, #196]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800524a:	4b30      	ldr	r3, [pc, #192]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	492d      	ldr	r1, [pc, #180]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800525c:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	f023 0220 	bic.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	4928      	ldr	r1, [pc, #160]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800526e:	4b27      	ldr	r3, [pc, #156]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	4a26      	ldr	r2, [pc, #152]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005274:	f023 0310 	bic.w	r3, r3, #16
 8005278:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800527a:	4b24      	ldr	r3, [pc, #144]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800527c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800527e:	4b24      	ldr	r3, [pc, #144]	@ (8005310 <RCCEx_PLL2_Config+0x160>)
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	69d2      	ldr	r2, [r2, #28]
 8005286:	00d2      	lsls	r2, r2, #3
 8005288:	4920      	ldr	r1, [pc, #128]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800528a:	4313      	orrs	r3, r2
 800528c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800528e:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	4a1e      	ldr	r2, [pc, #120]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005294:	f043 0310 	orr.w	r3, r3, #16
 8005298:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80052a0:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a4:	4a19      	ldr	r2, [pc, #100]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052ac:	e00f      	b.n	80052ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80052b4:	4b15      	ldr	r3, [pc, #84]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	4a14      	ldr	r2, [pc, #80]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052c0:	e005      	b.n	80052ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80052c2:	4b12      	ldr	r3, [pc, #72]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c6:	4a11      	ldr	r2, [pc, #68]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80052ce:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a0e      	ldr	r2, [pc, #56]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052da:	f7fc f983 	bl	80015e4 <HAL_GetTick>
 80052de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052e2:	f7fc f97f 	bl	80015e4 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e006      	b.n	8005302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	ffff0007 	.word	0xffff0007

08005314 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005322:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d101      	bne.n	8005332 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e099      	b.n	8005466 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005332:	4b4f      	ldr	r3, [pc, #316]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4e      	ldr	r2, [pc, #312]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800533c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533e:	f7fc f951 	bl	80015e4 <HAL_GetTick>
 8005342:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005344:	e008      	b.n	8005358 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005346:	f7fc f94d 	bl	80015e4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e086      	b.n	8005466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005358:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	493f      	ldr	r1, [pc, #252]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	628b      	str	r3, [r1, #40]	@ 0x28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	3b01      	subs	r3, #1
 800537e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	3b01      	subs	r3, #1
 8005388:	025b      	lsls	r3, r3, #9
 800538a:	b29b      	uxth	r3, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053a8:	4931      	ldr	r1, [pc, #196]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80053ae:	4b30      	ldr	r3, [pc, #192]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	492d      	ldr	r1, [pc, #180]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80053c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	4928      	ldr	r1, [pc, #160]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80053d2:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053e2:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <RCCEx_PLL3_Config+0x160>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	69d2      	ldr	r2, [r2, #28]
 80053ea:	00d2      	lsls	r2, r2, #3
 80053ec:	4920      	ldr	r1, [pc, #128]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005404:	4b1a      	ldr	r3, [pc, #104]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800540a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800540e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005410:	e00f      	b.n	8005432 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d106      	bne.n	8005426 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005418:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800541e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005424:	e005      	b.n	8005432 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005426:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	4a11      	ldr	r2, [pc, #68]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800542c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005432:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0e      	ldr	r2, [pc, #56]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800543c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543e:	f7fc f8d1 	bl	80015e4 <HAL_GetTick>
 8005442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005444:	e008      	b.n	8005458 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005446:	f7fc f8cd 	bl	80015e4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e006      	b.n	8005466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	ffff0007 	.word	0xffff0007

08005478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e049      	b.n	800551e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fb fe4c 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f000 fd5a 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	d001      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e054      	b.n	80055ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a26      	ldr	r2, [pc, #152]	@ (80055f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d022      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x80>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556a:	d01d      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x80>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d018      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x80>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a21      	ldr	r2, [pc, #132]	@ (8005600 <HAL_TIM_Base_Start_IT+0xd8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x80>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1f      	ldr	r2, [pc, #124]	@ (8005604 <HAL_TIM_Base_Start_IT+0xdc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x80>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1e      	ldr	r2, [pc, #120]	@ (8005608 <HAL_TIM_Base_Start_IT+0xe0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x80>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1c      	ldr	r2, [pc, #112]	@ (800560c <HAL_TIM_Base_Start_IT+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x80>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005610 <HAL_TIM_Base_Start_IT+0xe8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d115      	bne.n	80055d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <HAL_TIM_Base_Start_IT+0xec>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b06      	cmp	r3, #6
 80055b8:	d015      	beq.n	80055e6 <HAL_TIM_Base_Start_IT+0xbe>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c0:	d011      	beq.n	80055e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d2:	e008      	b.n	80055e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e000      	b.n	80055e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40001800 	.word	0x40001800
 8005610:	40014000 	.word	0x40014000
 8005614:	00010007 	.word	0x00010007

08005618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e049      	b.n	80056be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f841 	bl	80056c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f000 fc8a 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_TIM_PWM_Start+0x24>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e03c      	b.n	800577a <HAL_TIM_PWM_Start+0x9e>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b04      	cmp	r3, #4
 8005704:	d109      	bne.n	800571a <HAL_TIM_PWM_Start+0x3e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	bf14      	ite	ne
 8005712:	2301      	movne	r3, #1
 8005714:	2300      	moveq	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	e02f      	b.n	800577a <HAL_TIM_PWM_Start+0x9e>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d109      	bne.n	8005734 <HAL_TIM_PWM_Start+0x58>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	bf14      	ite	ne
 800572c:	2301      	movne	r3, #1
 800572e:	2300      	moveq	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e022      	b.n	800577a <HAL_TIM_PWM_Start+0x9e>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d109      	bne.n	800574e <HAL_TIM_PWM_Start+0x72>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e015      	b.n	800577a <HAL_TIM_PWM_Start+0x9e>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b10      	cmp	r3, #16
 8005752:	d109      	bne.n	8005768 <HAL_TIM_PWM_Start+0x8c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e008      	b.n	800577a <HAL_TIM_PWM_Start+0x9e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0a1      	b.n	80058c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start+0xb6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005790:	e023      	b.n	80057da <HAL_TIM_PWM_Start+0xfe>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xc6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057a0:	e01b      	b.n	80057da <HAL_TIM_PWM_Start+0xfe>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xd6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057b0:	e013      	b.n	80057da <HAL_TIM_PWM_Start+0xfe>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0xe6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057c0:	e00b      	b.n	80057da <HAL_TIM_PWM_Start+0xfe>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xf6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d0:	e003      	b.n	80057da <HAL_TIM_PWM_Start+0xfe>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2201      	movs	r2, #1
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 ffde 	bl	80067a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a38      	ldr	r2, [pc, #224]	@ (80058d0 <HAL_TIM_PWM_Start+0x1f4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <HAL_TIM_PWM_Start+0x13e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a37      	ldr	r2, [pc, #220]	@ (80058d4 <HAL_TIM_PWM_Start+0x1f8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00e      	beq.n	800581a <HAL_TIM_PWM_Start+0x13e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a35      	ldr	r2, [pc, #212]	@ (80058d8 <HAL_TIM_PWM_Start+0x1fc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d009      	beq.n	800581a <HAL_TIM_PWM_Start+0x13e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a34      	ldr	r2, [pc, #208]	@ (80058dc <HAL_TIM_PWM_Start+0x200>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_TIM_PWM_Start+0x13e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a32      	ldr	r2, [pc, #200]	@ (80058e0 <HAL_TIM_PWM_Start+0x204>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <HAL_TIM_PWM_Start+0x142>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_TIM_PWM_Start+0x144>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005832:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a25      	ldr	r2, [pc, #148]	@ (80058d0 <HAL_TIM_PWM_Start+0x1f4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d022      	beq.n	8005884 <HAL_TIM_PWM_Start+0x1a8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d01d      	beq.n	8005884 <HAL_TIM_PWM_Start+0x1a8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a25      	ldr	r2, [pc, #148]	@ (80058e4 <HAL_TIM_PWM_Start+0x208>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d018      	beq.n	8005884 <HAL_TIM_PWM_Start+0x1a8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a24      	ldr	r2, [pc, #144]	@ (80058e8 <HAL_TIM_PWM_Start+0x20c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <HAL_TIM_PWM_Start+0x1a8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a22      	ldr	r2, [pc, #136]	@ (80058ec <HAL_TIM_PWM_Start+0x210>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_TIM_PWM_Start+0x1a8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1a      	ldr	r2, [pc, #104]	@ (80058d4 <HAL_TIM_PWM_Start+0x1f8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_TIM_PWM_Start+0x1a8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <HAL_TIM_PWM_Start+0x214>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_PWM_Start+0x1a8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a16      	ldr	r2, [pc, #88]	@ (80058d8 <HAL_TIM_PWM_Start+0x1fc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d115      	bne.n	80058b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	4b1a      	ldr	r3, [pc, #104]	@ (80058f4 <HAL_TIM_PWM_Start+0x218>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d015      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x1e6>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589c:	d011      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ae:	e008      	b.n	80058c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40001800 	.word	0x40001800
 80058f4:	00010007 	.word	0x00010007

080058f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0202 	mvn.w	r2, #2
 800592c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 faf6 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fae8 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 faf9 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0204 	mvn.w	r2, #4
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fad0 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fac2 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fad3 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d020      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01b      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0208 	mvn.w	r2, #8
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 faaa 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa9c 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 faad 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d020      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa84 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa76 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fa87 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0201 	mvn.w	r2, #1
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb fa68 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 ff47 	bl	8006920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 ff3f 	bl	8006934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fa41 	bl	8005f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f06f 0220 	mvn.w	r2, #32
 8005af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 ff07 	bl	800690c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0ff      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b14      	cmp	r3, #20
 8005b32:	f200 80f0 	bhi.w	8005d16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b36:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005d17 	.word	0x08005d17
 8005b44:	08005d17 	.word	0x08005d17
 8005b48:	08005d17 	.word	0x08005d17
 8005b4c:	08005bd1 	.word	0x08005bd1
 8005b50:	08005d17 	.word	0x08005d17
 8005b54:	08005d17 	.word	0x08005d17
 8005b58:	08005d17 	.word	0x08005d17
 8005b5c:	08005c13 	.word	0x08005c13
 8005b60:	08005d17 	.word	0x08005d17
 8005b64:	08005d17 	.word	0x08005d17
 8005b68:	08005d17 	.word	0x08005d17
 8005b6c:	08005c53 	.word	0x08005c53
 8005b70:	08005d17 	.word	0x08005d17
 8005b74:	08005d17 	.word	0x08005d17
 8005b78:	08005d17 	.word	0x08005d17
 8005b7c:	08005c95 	.word	0x08005c95
 8005b80:	08005d17 	.word	0x08005d17
 8005b84:	08005d17 	.word	0x08005d17
 8005b88:	08005d17 	.word	0x08005d17
 8005b8c:	08005cd5 	.word	0x08005cd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fa90 	bl	80060bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0208 	orr.w	r2, r2, #8
 8005baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0204 	bic.w	r2, r2, #4
 8005bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6999      	ldr	r1, [r3, #24]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	619a      	str	r2, [r3, #24]
      break;
 8005bce:	e0a5      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb00 	bl	80061dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6999      	ldr	r1, [r3, #24]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	619a      	str	r2, [r3, #24]
      break;
 8005c10:	e084      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fb69 	bl	80062f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0208 	orr.w	r2, r2, #8
 8005c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0204 	bic.w	r2, r2, #4
 8005c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69d9      	ldr	r1, [r3, #28]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	61da      	str	r2, [r3, #28]
      break;
 8005c50:	e064      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fbd1 	bl	8006400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69d9      	ldr	r1, [r3, #28]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	021a      	lsls	r2, r3, #8
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	61da      	str	r2, [r3, #28]
      break;
 8005c92:	e043      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fc1a 	bl	80064d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0208 	orr.w	r2, r2, #8
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cd2:	e023      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fc5e 	bl	800659c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	021a      	lsls	r2, r3, #8
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d14:	e002      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop

08005d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_ConfigClockSource+0x1c>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e0dc      	b.n	8005f06 <HAL_TIM_ConfigClockSource+0x1d6>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	4b6a      	ldr	r3, [pc, #424]	@ (8005f10 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a64      	ldr	r2, [pc, #400]	@ (8005f14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	f000 80a9 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005d88:	4a62      	ldr	r2, [pc, #392]	@ (8005f14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f200 80ae 	bhi.w	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005d90:	4a61      	ldr	r2, [pc, #388]	@ (8005f18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	f000 80a1 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005d98:	4a5f      	ldr	r2, [pc, #380]	@ (8005f18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	f200 80a6 	bhi.w	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005da0:	4a5e      	ldr	r2, [pc, #376]	@ (8005f1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f000 8099 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005da8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f200 809e 	bhi.w	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005db0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005db4:	f000 8091 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005db8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005dbc:	f200 8096 	bhi.w	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005dc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dc4:	f000 8089 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dcc:	f200 808e 	bhi.w	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd4:	d03e      	beq.n	8005e54 <HAL_TIM_ConfigClockSource+0x124>
 8005dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dda:	f200 8087 	bhi.w	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005de2:	f000 8086 	beq.w	8005ef2 <HAL_TIM_ConfigClockSource+0x1c2>
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dea:	d87f      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005dec:	2b70      	cmp	r3, #112	@ 0x70
 8005dee:	d01a      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0xf6>
 8005df0:	2b70      	cmp	r3, #112	@ 0x70
 8005df2:	d87b      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005df4:	2b60      	cmp	r3, #96	@ 0x60
 8005df6:	d050      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x16a>
 8005df8:	2b60      	cmp	r3, #96	@ 0x60
 8005dfa:	d877      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005dfc:	2b50      	cmp	r3, #80	@ 0x50
 8005dfe:	d03c      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x14a>
 8005e00:	2b50      	cmp	r3, #80	@ 0x50
 8005e02:	d873      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d058      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x18a>
 8005e08:	2b40      	cmp	r3, #64	@ 0x40
 8005e0a:	d86f      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005e0c:	2b30      	cmp	r3, #48	@ 0x30
 8005e0e:	d064      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005e10:	2b30      	cmp	r3, #48	@ 0x30
 8005e12:	d86b      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d060      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d867      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05c      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d05a      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x1aa>
 8005e24:	e062      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e36:	f000 fc95 	bl	8006764 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	609a      	str	r2, [r3, #8]
      break;
 8005e52:	e04f      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e64:	f000 fc7e 	bl	8006764 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e76:	609a      	str	r2, [r3, #8]
      break;
 8005e78:	e03c      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	461a      	mov	r2, r3
 8005e88:	f000 fbee 	bl	8006668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2150      	movs	r1, #80	@ 0x50
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fc48 	bl	8006728 <TIM_ITRx_SetConfig>
      break;
 8005e98:	e02c      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f000 fc0d 	bl	80066c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2160      	movs	r1, #96	@ 0x60
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fc38 	bl	8006728 <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e01c      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f000 fbce 	bl	8006668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2140      	movs	r1, #64	@ 0x40
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fc28 	bl	8006728 <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e00c      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f000 fc1f 	bl	8006728 <TIM_ITRx_SetConfig>
      break;
 8005eea:	e003      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef0:	e000      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	ffceff88 	.word	0xffceff88
 8005f14:	00100040 	.word	0x00100040
 8005f18:	00100030 	.word	0x00100030
 8005f1c:	00100020 	.word	0x00100020

08005f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a46      	ldr	r2, [pc, #280]	@ (800609c <TIM_Base_SetConfig+0x12c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a43      	ldr	r2, [pc, #268]	@ (80060a0 <TIM_Base_SetConfig+0x130>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a42      	ldr	r2, [pc, #264]	@ (80060a4 <TIM_Base_SetConfig+0x134>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a41      	ldr	r2, [pc, #260]	@ (80060a8 <TIM_Base_SetConfig+0x138>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a40      	ldr	r2, [pc, #256]	@ (80060ac <TIM_Base_SetConfig+0x13c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a35      	ldr	r2, [pc, #212]	@ (800609c <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01f      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a32      	ldr	r2, [pc, #200]	@ (80060a0 <TIM_Base_SetConfig+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a31      	ldr	r2, [pc, #196]	@ (80060a4 <TIM_Base_SetConfig+0x134>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	@ (80060a8 <TIM_Base_SetConfig+0x138>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2f      	ldr	r2, [pc, #188]	@ (80060ac <TIM_Base_SetConfig+0x13c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80060b0 <TIM_Base_SetConfig+0x140>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80060b4 <TIM_Base_SetConfig+0x144>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <TIM_Base_SetConfig+0x148>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a16      	ldr	r2, [pc, #88]	@ (800609c <TIM_Base_SetConfig+0x12c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00f      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a18      	ldr	r2, [pc, #96]	@ (80060ac <TIM_Base_SetConfig+0x13c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00b      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a17      	ldr	r2, [pc, #92]	@ (80060b0 <TIM_Base_SetConfig+0x140>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d007      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a16      	ldr	r2, [pc, #88]	@ (80060b4 <TIM_Base_SetConfig+0x144>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a15      	ldr	r2, [pc, #84]	@ (80060b8 <TIM_Base_SetConfig+0x148>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d103      	bne.n	8006070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]
  }
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f023 0201 	bic.w	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4b37      	ldr	r3, [pc, #220]	@ (80061c4 <TIM_OC1_SetConfig+0x108>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 0302 	bic.w	r3, r3, #2
 8006104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a2d      	ldr	r2, [pc, #180]	@ (80061c8 <TIM_OC1_SetConfig+0x10c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00f      	beq.n	8006138 <TIM_OC1_SetConfig+0x7c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a2c      	ldr	r2, [pc, #176]	@ (80061cc <TIM_OC1_SetConfig+0x110>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00b      	beq.n	8006138 <TIM_OC1_SetConfig+0x7c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <TIM_OC1_SetConfig+0x114>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <TIM_OC1_SetConfig+0x7c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <TIM_OC1_SetConfig+0x118>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_OC1_SetConfig+0x7c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a29      	ldr	r2, [pc, #164]	@ (80061d8 <TIM_OC1_SetConfig+0x11c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d10c      	bne.n	8006152 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f023 0308 	bic.w	r3, r3, #8
 800613e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 0304 	bic.w	r3, r3, #4
 8006150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a1c      	ldr	r2, [pc, #112]	@ (80061c8 <TIM_OC1_SetConfig+0x10c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <TIM_OC1_SetConfig+0xbe>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a1b      	ldr	r2, [pc, #108]	@ (80061cc <TIM_OC1_SetConfig+0x110>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_OC1_SetConfig+0xbe>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1a      	ldr	r2, [pc, #104]	@ (80061d0 <TIM_OC1_SetConfig+0x114>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_OC1_SetConfig+0xbe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a19      	ldr	r2, [pc, #100]	@ (80061d4 <TIM_OC1_SetConfig+0x118>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_OC1_SetConfig+0xbe>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a18      	ldr	r2, [pc, #96]	@ (80061d8 <TIM_OC1_SetConfig+0x11c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d111      	bne.n	800619e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	621a      	str	r2, [r3, #32]
}
 80061b8:	bf00      	nop
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	fffeff8f 	.word	0xfffeff8f
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40010400 	.word	0x40010400
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40014400 	.word	0x40014400
 80061d8:	40014800 	.word	0x40014800

080061dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f023 0210 	bic.w	r2, r3, #16
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4b34      	ldr	r3, [pc, #208]	@ (80062d8 <TIM_OC2_SetConfig+0xfc>)
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a29      	ldr	r2, [pc, #164]	@ (80062dc <TIM_OC2_SetConfig+0x100>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC2_SetConfig+0x68>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a28      	ldr	r2, [pc, #160]	@ (80062e0 <TIM_OC2_SetConfig+0x104>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10d      	bne.n	8006260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a1e      	ldr	r2, [pc, #120]	@ (80062dc <TIM_OC2_SetConfig+0x100>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00f      	beq.n	8006288 <TIM_OC2_SetConfig+0xac>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <TIM_OC2_SetConfig+0x104>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00b      	beq.n	8006288 <TIM_OC2_SetConfig+0xac>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <TIM_OC2_SetConfig+0x108>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d007      	beq.n	8006288 <TIM_OC2_SetConfig+0xac>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <TIM_OC2_SetConfig+0x10c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_OC2_SetConfig+0xac>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1a      	ldr	r2, [pc, #104]	@ (80062ec <TIM_OC2_SetConfig+0x110>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d113      	bne.n	80062b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800628e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	feff8fff 	.word	0xfeff8fff
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40010400 	.word	0x40010400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800

080062f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4b33      	ldr	r3, [pc, #204]	@ (80063e8 <TIM_OC3_SetConfig+0xf8>)
 800631c:	4013      	ands	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a28      	ldr	r2, [pc, #160]	@ (80063ec <TIM_OC3_SetConfig+0xfc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_OC3_SetConfig+0x66>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a27      	ldr	r2, [pc, #156]	@ (80063f0 <TIM_OC3_SetConfig+0x100>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10d      	bne.n	8006372 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800635c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a1d      	ldr	r2, [pc, #116]	@ (80063ec <TIM_OC3_SetConfig+0xfc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_OC3_SetConfig+0xaa>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1c      	ldr	r2, [pc, #112]	@ (80063f0 <TIM_OC3_SetConfig+0x100>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_OC3_SetConfig+0xaa>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1b      	ldr	r2, [pc, #108]	@ (80063f4 <TIM_OC3_SetConfig+0x104>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_OC3_SetConfig+0xaa>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a1a      	ldr	r2, [pc, #104]	@ (80063f8 <TIM_OC3_SetConfig+0x108>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_OC3_SetConfig+0xaa>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <TIM_OC3_SetConfig+0x10c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d113      	bne.n	80063c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	fffeff8f 	.word	0xfffeff8f
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800

08006400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4b24      	ldr	r3, [pc, #144]	@ (80064bc <TIM_OC4_SetConfig+0xbc>)
 800642c:	4013      	ands	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800644a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	031b      	lsls	r3, r3, #12
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <TIM_OC4_SetConfig+0xc0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_OC4_SetConfig+0x80>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <TIM_OC4_SetConfig+0xc4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_OC4_SetConfig+0x80>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <TIM_OC4_SetConfig+0xc8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_OC4_SetConfig+0x80>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a16      	ldr	r2, [pc, #88]	@ (80064cc <TIM_OC4_SetConfig+0xcc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC4_SetConfig+0x80>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a15      	ldr	r2, [pc, #84]	@ (80064d0 <TIM_OC4_SetConfig+0xd0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d109      	bne.n	8006494 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	019b      	lsls	r3, r3, #6
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	feff8fff 	.word	0xfeff8fff
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40010400 	.word	0x40010400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800

080064d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4b21      	ldr	r3, [pc, #132]	@ (8006584 <TIM_OC5_SetConfig+0xb0>)
 8006500:	4013      	ands	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006514:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <TIM_OC5_SetConfig+0xb4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00f      	beq.n	800654a <TIM_OC5_SetConfig+0x76>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a17      	ldr	r2, [pc, #92]	@ (800658c <TIM_OC5_SetConfig+0xb8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00b      	beq.n	800654a <TIM_OC5_SetConfig+0x76>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a16      	ldr	r2, [pc, #88]	@ (8006590 <TIM_OC5_SetConfig+0xbc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d007      	beq.n	800654a <TIM_OC5_SetConfig+0x76>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a15      	ldr	r2, [pc, #84]	@ (8006594 <TIM_OC5_SetConfig+0xc0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d003      	beq.n	800654a <TIM_OC5_SetConfig+0x76>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a14      	ldr	r2, [pc, #80]	@ (8006598 <TIM_OC5_SetConfig+0xc4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d109      	bne.n	800655e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	621a      	str	r2, [r3, #32]
}
 8006578:	bf00      	nop
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	fffeff8f 	.word	0xfffeff8f
 8006588:	40010000 	.word	0x40010000
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800

0800659c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4b22      	ldr	r3, [pc, #136]	@ (8006650 <TIM_OC6_SetConfig+0xb4>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	051b      	lsls	r3, r3, #20
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a19      	ldr	r2, [pc, #100]	@ (8006654 <TIM_OC6_SetConfig+0xb8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00f      	beq.n	8006614 <TIM_OC6_SetConfig+0x78>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a18      	ldr	r2, [pc, #96]	@ (8006658 <TIM_OC6_SetConfig+0xbc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00b      	beq.n	8006614 <TIM_OC6_SetConfig+0x78>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a17      	ldr	r2, [pc, #92]	@ (800665c <TIM_OC6_SetConfig+0xc0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d007      	beq.n	8006614 <TIM_OC6_SetConfig+0x78>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a16      	ldr	r2, [pc, #88]	@ (8006660 <TIM_OC6_SetConfig+0xc4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC6_SetConfig+0x78>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a15      	ldr	r2, [pc, #84]	@ (8006664 <TIM_OC6_SetConfig+0xc8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d109      	bne.n	8006628 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	029b      	lsls	r3, r3, #10
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	feff8fff 	.word	0xfeff8fff
 8006654:	40010000 	.word	0x40010000
 8006658:	40010400 	.word	0x40010400
 800665c:	40014000 	.word	0x40014000
 8006660:	40014400 	.word	0x40014400
 8006664:	40014800 	.word	0x40014800

08006668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f023 0201 	bic.w	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f023 030a 	bic.w	r3, r3, #10
 80066a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b087      	sub	sp, #28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f023 0210 	bic.w	r2, r3, #16
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	031b      	lsls	r3, r3, #12
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006702:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <TIM_ITRx_SetConfig+0x38>)
 800673c:	4013      	ands	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	f043 0307 	orr.w	r3, r3, #7
 800674a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	609a      	str	r2, [r3, #8]
}
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	ffcfff8f 	.word	0xffcfff8f

08006764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800677e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	021a      	lsls	r2, r3, #8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	431a      	orrs	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4313      	orrs	r3, r2
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	609a      	str	r2, [r3, #8]
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2201      	movs	r2, #1
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1a      	ldr	r2, [r3, #32]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	401a      	ands	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e06d      	b.n	80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a30      	ldr	r2, [pc, #192]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d004      	beq.n	800683c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a2f      	ldr	r2, [pc, #188]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006854:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a20      	ldr	r2, [pc, #128]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d022      	beq.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687a:	d01d      	beq.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1d      	ldr	r2, [pc, #116]	@ (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d018      	beq.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1c      	ldr	r2, [pc, #112]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1a      	ldr	r2, [pc, #104]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00e      	beq.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d009      	beq.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a16      	ldr	r2, [pc, #88]	@ (8006904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d004      	beq.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a15      	ldr	r2, [pc, #84]	@ (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d10c      	bne.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40001800 	.word	0x40001800
 8006908:	40014000 	.word	0x40014000

0800690c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e042      	b.n	80069e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fa fc41 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2224      	movs	r2, #36	@ 0x24
 8006976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0201 	bic.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fd90 	bl	80074b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f825 	bl	80069e8 <UART_SetConfig>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e01b      	b.n	80069e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fe0f 	bl	80075fc <UART_CheckIdleState>
 80069de:	4603      	mov	r3, r0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069ec:	b092      	sub	sp, #72	@ 0x48
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4bbe      	ldr	r3, [pc, #760]	@ (8006d10 <UART_SetConfig+0x328>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a20:	430b      	orrs	r3, r1
 8006a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4ab3      	ldr	r2, [pc, #716]	@ (8006d14 <UART_SetConfig+0x32c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a50:	4313      	orrs	r3, r2
 8006a52:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	4baf      	ldr	r3, [pc, #700]	@ (8006d18 <UART_SetConfig+0x330>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	f023 010f 	bic.w	r1, r3, #15
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4aa6      	ldr	r2, [pc, #664]	@ (8006d1c <UART_SetConfig+0x334>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d177      	bne.n	8006b78 <UART_SetConfig+0x190>
 8006a88:	4ba5      	ldr	r3, [pc, #660]	@ (8006d20 <UART_SetConfig+0x338>)
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a90:	2b28      	cmp	r3, #40	@ 0x28
 8006a92:	d86d      	bhi.n	8006b70 <UART_SetConfig+0x188>
 8006a94:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <UART_SetConfig+0xb4>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006b41 	.word	0x08006b41
 8006aa0:	08006b71 	.word	0x08006b71
 8006aa4:	08006b71 	.word	0x08006b71
 8006aa8:	08006b71 	.word	0x08006b71
 8006aac:	08006b71 	.word	0x08006b71
 8006ab0:	08006b71 	.word	0x08006b71
 8006ab4:	08006b71 	.word	0x08006b71
 8006ab8:	08006b71 	.word	0x08006b71
 8006abc:	08006b49 	.word	0x08006b49
 8006ac0:	08006b71 	.word	0x08006b71
 8006ac4:	08006b71 	.word	0x08006b71
 8006ac8:	08006b71 	.word	0x08006b71
 8006acc:	08006b71 	.word	0x08006b71
 8006ad0:	08006b71 	.word	0x08006b71
 8006ad4:	08006b71 	.word	0x08006b71
 8006ad8:	08006b71 	.word	0x08006b71
 8006adc:	08006b51 	.word	0x08006b51
 8006ae0:	08006b71 	.word	0x08006b71
 8006ae4:	08006b71 	.word	0x08006b71
 8006ae8:	08006b71 	.word	0x08006b71
 8006aec:	08006b71 	.word	0x08006b71
 8006af0:	08006b71 	.word	0x08006b71
 8006af4:	08006b71 	.word	0x08006b71
 8006af8:	08006b71 	.word	0x08006b71
 8006afc:	08006b59 	.word	0x08006b59
 8006b00:	08006b71 	.word	0x08006b71
 8006b04:	08006b71 	.word	0x08006b71
 8006b08:	08006b71 	.word	0x08006b71
 8006b0c:	08006b71 	.word	0x08006b71
 8006b10:	08006b71 	.word	0x08006b71
 8006b14:	08006b71 	.word	0x08006b71
 8006b18:	08006b71 	.word	0x08006b71
 8006b1c:	08006b61 	.word	0x08006b61
 8006b20:	08006b71 	.word	0x08006b71
 8006b24:	08006b71 	.word	0x08006b71
 8006b28:	08006b71 	.word	0x08006b71
 8006b2c:	08006b71 	.word	0x08006b71
 8006b30:	08006b71 	.word	0x08006b71
 8006b34:	08006b71 	.word	0x08006b71
 8006b38:	08006b71 	.word	0x08006b71
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b46:	e222      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4e:	e21e      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b56:	e21a      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5e:	e216      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006b60:	2320      	movs	r3, #32
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b66:	e212      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006b68:	2340      	movs	r3, #64	@ 0x40
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6e:	e20e      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006b70:	2380      	movs	r3, #128	@ 0x80
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b76:	e20a      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a69      	ldr	r2, [pc, #420]	@ (8006d24 <UART_SetConfig+0x33c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d130      	bne.n	8006be4 <UART_SetConfig+0x1fc>
 8006b82:	4b67      	ldr	r3, [pc, #412]	@ (8006d20 <UART_SetConfig+0x338>)
 8006b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b05      	cmp	r3, #5
 8006b8c:	d826      	bhi.n	8006bdc <UART_SetConfig+0x1f4>
 8006b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <UART_SetConfig+0x1ac>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006bad 	.word	0x08006bad
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	08006bbd 	.word	0x08006bbd
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb2:	e1ec      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bba:	e1e8      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	e1e4      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bca:	e1e0      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006bcc:	2320      	movs	r3, #32
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e1dc      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006bd4:	2340      	movs	r3, #64	@ 0x40
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e1d8      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006bdc:	2380      	movs	r3, #128	@ 0x80
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e1d4      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a4f      	ldr	r2, [pc, #316]	@ (8006d28 <UART_SetConfig+0x340>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d130      	bne.n	8006c50 <UART_SetConfig+0x268>
 8006bee:	4b4c      	ldr	r3, [pc, #304]	@ (8006d20 <UART_SetConfig+0x338>)
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	d826      	bhi.n	8006c48 <UART_SetConfig+0x260>
 8006bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006c00 <UART_SetConfig+0x218>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c19 	.word	0x08006c19
 8006c04:	08006c21 	.word	0x08006c21
 8006c08:	08006c29 	.word	0x08006c29
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c41 	.word	0x08006c41
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1e:	e1b6      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c20:	2304      	movs	r3, #4
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c26:	e1b2      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c28:	2308      	movs	r3, #8
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e1ae      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c30:	2310      	movs	r3, #16
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e1aa      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c38:	2320      	movs	r3, #32
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e1a6      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c40:	2340      	movs	r3, #64	@ 0x40
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e1a2      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c48:	2380      	movs	r3, #128	@ 0x80
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e19e      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a35      	ldr	r2, [pc, #212]	@ (8006d2c <UART_SetConfig+0x344>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d130      	bne.n	8006cbc <UART_SetConfig+0x2d4>
 8006c5a:	4b31      	ldr	r3, [pc, #196]	@ (8006d20 <UART_SetConfig+0x338>)
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	2b05      	cmp	r3, #5
 8006c64:	d826      	bhi.n	8006cb4 <UART_SetConfig+0x2cc>
 8006c66:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <UART_SetConfig+0x284>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006c85 	.word	0x08006c85
 8006c70:	08006c8d 	.word	0x08006c8d
 8006c74:	08006c95 	.word	0x08006c95
 8006c78:	08006c9d 	.word	0x08006c9d
 8006c7c:	08006ca5 	.word	0x08006ca5
 8006c80:	08006cad 	.word	0x08006cad
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e180      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e17c      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c94:	2308      	movs	r3, #8
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e178      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e174      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e170      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006cac:	2340      	movs	r3, #64	@ 0x40
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e16c      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006cb4:	2380      	movs	r3, #128	@ 0x80
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e168      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d30 <UART_SetConfig+0x348>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d142      	bne.n	8006d4c <UART_SetConfig+0x364>
 8006cc6:	4b16      	ldr	r3, [pc, #88]	@ (8006d20 <UART_SetConfig+0x338>)
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	2b05      	cmp	r3, #5
 8006cd0:	d838      	bhi.n	8006d44 <UART_SetConfig+0x35c>
 8006cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd8 <UART_SetConfig+0x2f0>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006cf1 	.word	0x08006cf1
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	08006d01 	.word	0x08006d01
 8006ce4:	08006d09 	.word	0x08006d09
 8006ce8:	08006d35 	.word	0x08006d35
 8006cec:	08006d3d 	.word	0x08006d3d
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e14a      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e146      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006d00:	2308      	movs	r3, #8
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e142      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e13e      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006d10:	cfff69f3 	.word	0xcfff69f3
 8006d14:	58000c00 	.word	0x58000c00
 8006d18:	11fff4ff 	.word	0x11fff4ff
 8006d1c:	40011000 	.word	0x40011000
 8006d20:	58024400 	.word	0x58024400
 8006d24:	40004400 	.word	0x40004400
 8006d28:	40004800 	.word	0x40004800
 8006d2c:	40004c00 	.word	0x40004c00
 8006d30:	40005000 	.word	0x40005000
 8006d34:	2320      	movs	r3, #32
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	e128      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006d3c:	2340      	movs	r3, #64	@ 0x40
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d42:	e124      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006d44:	2380      	movs	r3, #128	@ 0x80
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e120      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4acb      	ldr	r2, [pc, #812]	@ (8007080 <UART_SetConfig+0x698>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d176      	bne.n	8006e44 <UART_SetConfig+0x45c>
 8006d56:	4bcb      	ldr	r3, [pc, #812]	@ (8007084 <UART_SetConfig+0x69c>)
 8006d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d5e:	2b28      	cmp	r3, #40	@ 0x28
 8006d60:	d86c      	bhi.n	8006e3c <UART_SetConfig+0x454>
 8006d62:	a201      	add	r2, pc, #4	@ (adr r2, 8006d68 <UART_SetConfig+0x380>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006e0d 	.word	0x08006e0d
 8006d6c:	08006e3d 	.word	0x08006e3d
 8006d70:	08006e3d 	.word	0x08006e3d
 8006d74:	08006e3d 	.word	0x08006e3d
 8006d78:	08006e3d 	.word	0x08006e3d
 8006d7c:	08006e3d 	.word	0x08006e3d
 8006d80:	08006e3d 	.word	0x08006e3d
 8006d84:	08006e3d 	.word	0x08006e3d
 8006d88:	08006e15 	.word	0x08006e15
 8006d8c:	08006e3d 	.word	0x08006e3d
 8006d90:	08006e3d 	.word	0x08006e3d
 8006d94:	08006e3d 	.word	0x08006e3d
 8006d98:	08006e3d 	.word	0x08006e3d
 8006d9c:	08006e3d 	.word	0x08006e3d
 8006da0:	08006e3d 	.word	0x08006e3d
 8006da4:	08006e3d 	.word	0x08006e3d
 8006da8:	08006e1d 	.word	0x08006e1d
 8006dac:	08006e3d 	.word	0x08006e3d
 8006db0:	08006e3d 	.word	0x08006e3d
 8006db4:	08006e3d 	.word	0x08006e3d
 8006db8:	08006e3d 	.word	0x08006e3d
 8006dbc:	08006e3d 	.word	0x08006e3d
 8006dc0:	08006e3d 	.word	0x08006e3d
 8006dc4:	08006e3d 	.word	0x08006e3d
 8006dc8:	08006e25 	.word	0x08006e25
 8006dcc:	08006e3d 	.word	0x08006e3d
 8006dd0:	08006e3d 	.word	0x08006e3d
 8006dd4:	08006e3d 	.word	0x08006e3d
 8006dd8:	08006e3d 	.word	0x08006e3d
 8006ddc:	08006e3d 	.word	0x08006e3d
 8006de0:	08006e3d 	.word	0x08006e3d
 8006de4:	08006e3d 	.word	0x08006e3d
 8006de8:	08006e2d 	.word	0x08006e2d
 8006dec:	08006e3d 	.word	0x08006e3d
 8006df0:	08006e3d 	.word	0x08006e3d
 8006df4:	08006e3d 	.word	0x08006e3d
 8006df8:	08006e3d 	.word	0x08006e3d
 8006dfc:	08006e3d 	.word	0x08006e3d
 8006e00:	08006e3d 	.word	0x08006e3d
 8006e04:	08006e3d 	.word	0x08006e3d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e12:	e0bc      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e14:	2304      	movs	r3, #4
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1a:	e0b8      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e22:	e0b4      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e0b0      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e0ac      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e34:	2340      	movs	r3, #64	@ 0x40
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e0a8      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e3c:	2380      	movs	r3, #128	@ 0x80
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e42:	e0a4      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a8f      	ldr	r2, [pc, #572]	@ (8007088 <UART_SetConfig+0x6a0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d130      	bne.n	8006eb0 <UART_SetConfig+0x4c8>
 8006e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8007084 <UART_SetConfig+0x69c>)
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d826      	bhi.n	8006ea8 <UART_SetConfig+0x4c0>
 8006e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <UART_SetConfig+0x478>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e79 	.word	0x08006e79
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e89 	.word	0x08006e89
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7e:	e086      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e86:	e082      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8e:	e07e      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e96:	e07a      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006e98:	2320      	movs	r3, #32
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e076      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006ea0:	2340      	movs	r3, #64	@ 0x40
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e072      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006ea8:	2380      	movs	r3, #128	@ 0x80
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e06e      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a75      	ldr	r2, [pc, #468]	@ (800708c <UART_SetConfig+0x6a4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d130      	bne.n	8006f1c <UART_SetConfig+0x534>
 8006eba:	4b72      	ldr	r3, [pc, #456]	@ (8007084 <UART_SetConfig+0x69c>)
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d826      	bhi.n	8006f14 <UART_SetConfig+0x52c>
 8006ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <UART_SetConfig+0x4e4>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006ee5 	.word	0x08006ee5
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	08006ef5 	.word	0x08006ef5
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eea:	e050      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef2:	e04c      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efa:	e048      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f02:	e044      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f04:	2320      	movs	r3, #32
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e040      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f0c:	2340      	movs	r3, #64	@ 0x40
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e03c      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f14:	2380      	movs	r3, #128	@ 0x80
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1a:	e038      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a5b      	ldr	r2, [pc, #364]	@ (8007090 <UART_SetConfig+0x6a8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d130      	bne.n	8006f88 <UART_SetConfig+0x5a0>
 8006f26:	4b57      	ldr	r3, [pc, #348]	@ (8007084 <UART_SetConfig+0x69c>)
 8006f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	2b05      	cmp	r3, #5
 8006f30:	d826      	bhi.n	8006f80 <UART_SetConfig+0x598>
 8006f32:	a201      	add	r2, pc, #4	@ (adr r2, 8006f38 <UART_SetConfig+0x550>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f51 	.word	0x08006f51
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	08006f61 	.word	0x08006f61
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	2302      	movs	r3, #2
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f56:	e01a      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5e:	e016      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f66:	e012      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e00e      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f70:	2320      	movs	r3, #32
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e00a      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f78:	2340      	movs	r3, #64	@ 0x40
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7e:	e006      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f80:	2380      	movs	r3, #128	@ 0x80
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f86:	e002      	b.n	8006f8e <UART_SetConfig+0x5a6>
 8006f88:	2380      	movs	r3, #128	@ 0x80
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a3f      	ldr	r2, [pc, #252]	@ (8007090 <UART_SetConfig+0x6a8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	f040 80f8 	bne.w	800718a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	dc46      	bgt.n	8007030 <UART_SetConfig+0x648>
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	f2c0 8082 	blt.w	80070ac <UART_SetConfig+0x6c4>
 8006fa8:	3b02      	subs	r3, #2
 8006faa:	2b1e      	cmp	r3, #30
 8006fac:	d87e      	bhi.n	80070ac <UART_SetConfig+0x6c4>
 8006fae:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb4 <UART_SetConfig+0x5cc>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08007037 	.word	0x08007037
 8006fb8:	080070ad 	.word	0x080070ad
 8006fbc:	0800703f 	.word	0x0800703f
 8006fc0:	080070ad 	.word	0x080070ad
 8006fc4:	080070ad 	.word	0x080070ad
 8006fc8:	080070ad 	.word	0x080070ad
 8006fcc:	0800704f 	.word	0x0800704f
 8006fd0:	080070ad 	.word	0x080070ad
 8006fd4:	080070ad 	.word	0x080070ad
 8006fd8:	080070ad 	.word	0x080070ad
 8006fdc:	080070ad 	.word	0x080070ad
 8006fe0:	080070ad 	.word	0x080070ad
 8006fe4:	080070ad 	.word	0x080070ad
 8006fe8:	080070ad 	.word	0x080070ad
 8006fec:	0800705f 	.word	0x0800705f
 8006ff0:	080070ad 	.word	0x080070ad
 8006ff4:	080070ad 	.word	0x080070ad
 8006ff8:	080070ad 	.word	0x080070ad
 8006ffc:	080070ad 	.word	0x080070ad
 8007000:	080070ad 	.word	0x080070ad
 8007004:	080070ad 	.word	0x080070ad
 8007008:	080070ad 	.word	0x080070ad
 800700c:	080070ad 	.word	0x080070ad
 8007010:	080070ad 	.word	0x080070ad
 8007014:	080070ad 	.word	0x080070ad
 8007018:	080070ad 	.word	0x080070ad
 800701c:	080070ad 	.word	0x080070ad
 8007020:	080070ad 	.word	0x080070ad
 8007024:	080070ad 	.word	0x080070ad
 8007028:	080070ad 	.word	0x080070ad
 800702c:	0800709f 	.word	0x0800709f
 8007030:	2b40      	cmp	r3, #64	@ 0x40
 8007032:	d037      	beq.n	80070a4 <UART_SetConfig+0x6bc>
 8007034:	e03a      	b.n	80070ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007036:	f7fd fdfd 	bl	8004c34 <HAL_RCCEx_GetD3PCLK1Freq>
 800703a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800703c:	e03c      	b.n	80070b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800703e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd fe0c 	bl	8004c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800704c:	e034      	b.n	80070b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800704e:	f107 0318 	add.w	r3, r7, #24
 8007052:	4618      	mov	r0, r3
 8007054:	f7fd ff58 	bl	8004f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705c:	e02c      	b.n	80070b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800705e:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <UART_SetConfig+0x69c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800706a:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <UART_SetConfig+0x69c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	08db      	lsrs	r3, r3, #3
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	4a07      	ldr	r2, [pc, #28]	@ (8007094 <UART_SetConfig+0x6ac>)
 8007076:	fa22 f303 	lsr.w	r3, r2, r3
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800707c:	e01c      	b.n	80070b8 <UART_SetConfig+0x6d0>
 800707e:	bf00      	nop
 8007080:	40011400 	.word	0x40011400
 8007084:	58024400 	.word	0x58024400
 8007088:	40007800 	.word	0x40007800
 800708c:	40007c00 	.word	0x40007c00
 8007090:	58000c00 	.word	0x58000c00
 8007094:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007098:	4b9d      	ldr	r3, [pc, #628]	@ (8007310 <UART_SetConfig+0x928>)
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800709c:	e00c      	b.n	80070b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800709e:	4b9d      	ldr	r3, [pc, #628]	@ (8007314 <UART_SetConfig+0x92c>)
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a2:	e009      	b.n	80070b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070aa:	e005      	b.n	80070b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 81de 	beq.w	800747c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c4:	4a94      	ldr	r2, [pc, #592]	@ (8007318 <UART_SetConfig+0x930>)
 80070c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ca:	461a      	mov	r2, r3
 80070cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d305      	bcc.n	80070f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d903      	bls.n	80070f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070f6:	e1c1      	b.n	800747c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fa:	2200      	movs	r2, #0
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	60fa      	str	r2, [r7, #12]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	4a84      	ldr	r2, [pc, #528]	@ (8007318 <UART_SetConfig+0x930>)
 8007106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800710a:	b29b      	uxth	r3, r3
 800710c:	2200      	movs	r2, #0
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007116:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800711a:	f7f9 f8e1 	bl	80002e0 <__aeabi_uldivmod>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	020b      	lsls	r3, r1, #8
 8007130:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007134:	0202      	lsls	r2, r0, #8
 8007136:	6979      	ldr	r1, [r7, #20]
 8007138:	6849      	ldr	r1, [r1, #4]
 800713a:	0849      	lsrs	r1, r1, #1
 800713c:	2000      	movs	r0, #0
 800713e:	460c      	mov	r4, r1
 8007140:	4605      	mov	r5, r0
 8007142:	eb12 0804 	adds.w	r8, r2, r4
 8007146:	eb43 0905 	adc.w	r9, r3, r5
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	469a      	mov	sl, r3
 8007152:	4693      	mov	fp, r2
 8007154:	4652      	mov	r2, sl
 8007156:	465b      	mov	r3, fp
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 f8c0 	bl	80002e0 <__aeabi_uldivmod>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4613      	mov	r3, r2
 8007166:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716e:	d308      	bcc.n	8007182 <UART_SetConfig+0x79a>
 8007170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007176:	d204      	bcs.n	8007182 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800717e:	60da      	str	r2, [r3, #12]
 8007180:	e17c      	b.n	800747c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007188:	e178      	b.n	800747c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007192:	f040 80c5 	bne.w	8007320 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007196:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800719a:	2b20      	cmp	r3, #32
 800719c:	dc48      	bgt.n	8007230 <UART_SetConfig+0x848>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	db7b      	blt.n	800729a <UART_SetConfig+0x8b2>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d879      	bhi.n	800729a <UART_SetConfig+0x8b2>
 80071a6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ac <UART_SetConfig+0x7c4>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	08007237 	.word	0x08007237
 80071b0:	0800723f 	.word	0x0800723f
 80071b4:	0800729b 	.word	0x0800729b
 80071b8:	0800729b 	.word	0x0800729b
 80071bc:	08007247 	.word	0x08007247
 80071c0:	0800729b 	.word	0x0800729b
 80071c4:	0800729b 	.word	0x0800729b
 80071c8:	0800729b 	.word	0x0800729b
 80071cc:	08007257 	.word	0x08007257
 80071d0:	0800729b 	.word	0x0800729b
 80071d4:	0800729b 	.word	0x0800729b
 80071d8:	0800729b 	.word	0x0800729b
 80071dc:	0800729b 	.word	0x0800729b
 80071e0:	0800729b 	.word	0x0800729b
 80071e4:	0800729b 	.word	0x0800729b
 80071e8:	0800729b 	.word	0x0800729b
 80071ec:	08007267 	.word	0x08007267
 80071f0:	0800729b 	.word	0x0800729b
 80071f4:	0800729b 	.word	0x0800729b
 80071f8:	0800729b 	.word	0x0800729b
 80071fc:	0800729b 	.word	0x0800729b
 8007200:	0800729b 	.word	0x0800729b
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800729b 	.word	0x0800729b
 800720c:	0800729b 	.word	0x0800729b
 8007210:	0800729b 	.word	0x0800729b
 8007214:	0800729b 	.word	0x0800729b
 8007218:	0800729b 	.word	0x0800729b
 800721c:	0800729b 	.word	0x0800729b
 8007220:	0800729b 	.word	0x0800729b
 8007224:	0800729b 	.word	0x0800729b
 8007228:	0800729b 	.word	0x0800729b
 800722c:	0800728d 	.word	0x0800728d
 8007230:	2b40      	cmp	r3, #64	@ 0x40
 8007232:	d02e      	beq.n	8007292 <UART_SetConfig+0x8aa>
 8007234:	e031      	b.n	800729a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007236:	f7fc fa85 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 800723a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800723c:	e033      	b.n	80072a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800723e:	f7fc fa97 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8007242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007244:	e02f      	b.n	80072a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800724a:	4618      	mov	r0, r3
 800724c:	f7fd fd08 	bl	8004c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007254:	e027      	b.n	80072a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007256:	f107 0318 	add.w	r3, r7, #24
 800725a:	4618      	mov	r0, r3
 800725c:	f7fd fe54 	bl	8004f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007264:	e01f      	b.n	80072a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007266:	4b2d      	ldr	r3, [pc, #180]	@ (800731c <UART_SetConfig+0x934>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007272:	4b2a      	ldr	r3, [pc, #168]	@ (800731c <UART_SetConfig+0x934>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	08db      	lsrs	r3, r3, #3
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	4a24      	ldr	r2, [pc, #144]	@ (8007310 <UART_SetConfig+0x928>)
 800727e:	fa22 f303 	lsr.w	r3, r2, r3
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007284:	e00f      	b.n	80072a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007286:	4b22      	ldr	r3, [pc, #136]	@ (8007310 <UART_SetConfig+0x928>)
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800728a:	e00c      	b.n	80072a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800728c:	4b21      	ldr	r3, [pc, #132]	@ (8007314 <UART_SetConfig+0x92c>)
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007290:	e009      	b.n	80072a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007298:	e005      	b.n	80072a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80072a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80e7 	beq.w	800747c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b2:	4a19      	ldr	r2, [pc, #100]	@ (8007318 <UART_SetConfig+0x930>)
 80072b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b8:	461a      	mov	r2, r3
 80072ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c0:	005a      	lsls	r2, r3, #1
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	441a      	add	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d916      	bls.n	8007308 <UART_SetConfig+0x920>
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e0:	d212      	bcs.n	8007308 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f023 030f 	bic.w	r3, r3, #15
 80072ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072fa:	4313      	orrs	r3, r2
 80072fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007304:	60da      	str	r2, [r3, #12]
 8007306:	e0b9      	b.n	800747c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800730e:	e0b5      	b.n	800747c <UART_SetConfig+0xa94>
 8007310:	03d09000 	.word	0x03d09000
 8007314:	003d0900 	.word	0x003d0900
 8007318:	0800af68 	.word	0x0800af68
 800731c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007320:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007324:	2b20      	cmp	r3, #32
 8007326:	dc49      	bgt.n	80073bc <UART_SetConfig+0x9d4>
 8007328:	2b00      	cmp	r3, #0
 800732a:	db7c      	blt.n	8007426 <UART_SetConfig+0xa3e>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d87a      	bhi.n	8007426 <UART_SetConfig+0xa3e>
 8007330:	a201      	add	r2, pc, #4	@ (adr r2, 8007338 <UART_SetConfig+0x950>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	080073c3 	.word	0x080073c3
 800733c:	080073cb 	.word	0x080073cb
 8007340:	08007427 	.word	0x08007427
 8007344:	08007427 	.word	0x08007427
 8007348:	080073d3 	.word	0x080073d3
 800734c:	08007427 	.word	0x08007427
 8007350:	08007427 	.word	0x08007427
 8007354:	08007427 	.word	0x08007427
 8007358:	080073e3 	.word	0x080073e3
 800735c:	08007427 	.word	0x08007427
 8007360:	08007427 	.word	0x08007427
 8007364:	08007427 	.word	0x08007427
 8007368:	08007427 	.word	0x08007427
 800736c:	08007427 	.word	0x08007427
 8007370:	08007427 	.word	0x08007427
 8007374:	08007427 	.word	0x08007427
 8007378:	080073f3 	.word	0x080073f3
 800737c:	08007427 	.word	0x08007427
 8007380:	08007427 	.word	0x08007427
 8007384:	08007427 	.word	0x08007427
 8007388:	08007427 	.word	0x08007427
 800738c:	08007427 	.word	0x08007427
 8007390:	08007427 	.word	0x08007427
 8007394:	08007427 	.word	0x08007427
 8007398:	08007427 	.word	0x08007427
 800739c:	08007427 	.word	0x08007427
 80073a0:	08007427 	.word	0x08007427
 80073a4:	08007427 	.word	0x08007427
 80073a8:	08007427 	.word	0x08007427
 80073ac:	08007427 	.word	0x08007427
 80073b0:	08007427 	.word	0x08007427
 80073b4:	08007427 	.word	0x08007427
 80073b8:	08007419 	.word	0x08007419
 80073bc:	2b40      	cmp	r3, #64	@ 0x40
 80073be:	d02e      	beq.n	800741e <UART_SetConfig+0xa36>
 80073c0:	e031      	b.n	8007426 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c2:	f7fc f9bf 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80073c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073c8:	e033      	b.n	8007432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ca:	f7fc f9d1 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 80073ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073d0:	e02f      	b.n	8007432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fd fc42 	bl	8004c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e0:	e027      	b.n	8007432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073e2:	f107 0318 	add.w	r3, r7, #24
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fd fd8e 	bl	8004f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f0:	e01f      	b.n	8007432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f2:	4b2d      	ldr	r3, [pc, #180]	@ (80074a8 <UART_SetConfig+0xac0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073fe:	4b2a      	ldr	r3, [pc, #168]	@ (80074a8 <UART_SetConfig+0xac0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	08db      	lsrs	r3, r3, #3
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	4a28      	ldr	r2, [pc, #160]	@ (80074ac <UART_SetConfig+0xac4>)
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007410:	e00f      	b.n	8007432 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007412:	4b26      	ldr	r3, [pc, #152]	@ (80074ac <UART_SetConfig+0xac4>)
 8007414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007416:	e00c      	b.n	8007432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007418:	4b25      	ldr	r3, [pc, #148]	@ (80074b0 <UART_SetConfig+0xac8>)
 800741a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800741c:	e009      	b.n	8007432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007424:	e005      	b.n	8007432 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007430:	bf00      	nop
    }

    if (pclk != 0U)
 8007432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d021      	beq.n	800747c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	4a1d      	ldr	r2, [pc, #116]	@ (80074b4 <UART_SetConfig+0xacc>)
 800743e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007442:	461a      	mov	r2, r3
 8007444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007446:	fbb3 f2f2 	udiv	r2, r3, r2
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	441a      	add	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	fbb2 f3f3 	udiv	r3, r2, r3
 800745a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	2b0f      	cmp	r3, #15
 8007460:	d909      	bls.n	8007476 <UART_SetConfig+0xa8e>
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007468:	d205      	bcs.n	8007476 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	b29a      	uxth	r2, r3
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e002      	b.n	800747c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2201      	movs	r2, #1
 8007480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2201      	movs	r2, #1
 8007488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2200      	movs	r2, #0
 8007490:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007498:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800749c:	4618      	mov	r0, r3
 800749e:	3748      	adds	r7, #72	@ 0x48
 80074a0:	46bd      	mov	sp, r7
 80074a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a6:	bf00      	nop
 80074a8:	58024400 	.word	0x58024400
 80074ac:	03d09000 	.word	0x03d09000
 80074b0:	003d0900 	.word	0x003d0900
 80074b4:	0800af68 	.word	0x0800af68

080074b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01a      	beq.n	80075ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075b6:	d10a      	bne.n	80075ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b098      	sub	sp, #96	@ 0x60
 8007600:	af02      	add	r7, sp, #8
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800760c:	f7f9 ffea 	bl	80015e4 <HAL_GetTick>
 8007610:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b08      	cmp	r3, #8
 800761e:	d12f      	bne.n	8007680 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007620:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007628:	2200      	movs	r2, #0
 800762a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f88e 	bl	8007750 <UART_WaitOnFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d022      	beq.n	8007680 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800764e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007658:	647b      	str	r3, [r7, #68]	@ 0x44
 800765a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800765e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e063      	b.n	8007748 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b04      	cmp	r3, #4
 800768c:	d149      	bne.n	8007722 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007696:	2200      	movs	r2, #0
 8007698:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f857 	bl	8007750 <UART_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d03c      	beq.n	8007722 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	623b      	str	r3, [r7, #32]
   return(result);
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e6      	bne.n	80076a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f023 0301 	bic.w	r3, r3, #1
 80076f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3308      	adds	r3, #8
 80076f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076fa:	61fa      	str	r2, [r7, #28]
 80076fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	69b9      	ldr	r1, [r7, #24]
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	617b      	str	r3, [r7, #20]
   return(result);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e012      	b.n	8007748 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3758      	adds	r7, #88	@ 0x58
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007760:	e04f      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007768:	d04b      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776a:	f7f9 ff3b 	bl	80015e4 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <UART_WaitOnFlagUntilTimeout+0x30>
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e04e      	b.n	8007822 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	d037      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b80      	cmp	r3, #128	@ 0x80
 8007796:	d034      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b40      	cmp	r3, #64	@ 0x40
 800779c:	d031      	beq.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d110      	bne.n	80077ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f839 	bl	800782c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2208      	movs	r2, #8
 80077be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e029      	b.n	8007822 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077dc:	d111      	bne.n	8007802 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f81f 	bl	800782c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e00f      	b.n	8007822 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4013      	ands	r3, r2
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	429a      	cmp	r2, r3
 8007810:	bf0c      	ite	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	2300      	movne	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	429a      	cmp	r2, r3
 800781e:	d0a0      	beq.n	8007762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b095      	sub	sp, #84	@ 0x54
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007852:	643b      	str	r3, [r7, #64]	@ 0x40
 8007854:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007858:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	61fb      	str	r3, [r7, #28]
   return(result);
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	4b1e      	ldr	r3, [pc, #120]	@ (80078f4 <UART_EndRxTransfer+0xc8>)
 800787a:	4013      	ands	r3, r2
 800787c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800788c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d118      	bne.n	80078d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f023 0310 	bic.w	r3, r3, #16
 80078b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6979      	ldr	r1, [r7, #20]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	613b      	str	r3, [r7, #16]
   return(result);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078e8:	bf00      	nop
 80078ea:	3754      	adds	r7, #84	@ 0x54
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	effffffe 	.word	0xeffffffe

080078f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_UARTEx_DisableFifoMode+0x16>
 800790a:	2302      	movs	r3, #2
 800790c:	e027      	b.n	800795e <HAL_UARTEx_DisableFifoMode+0x66>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2224      	movs	r2, #36	@ 0x24
 800791a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0201 	bic.w	r2, r2, #1
 8007934:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800793c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800797a:	2b01      	cmp	r3, #1
 800797c:	d101      	bne.n	8007982 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800797e:	2302      	movs	r3, #2
 8007980:	e02d      	b.n	80079de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2224      	movs	r2, #36	@ 0x24
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0201 	bic.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f850 	bl	8007a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e02d      	b.n	8007a5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2224      	movs	r2, #36	@ 0x24
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0201 	bic.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f812 	bl	8007a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d108      	bne.n	8007a86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a84:	e031      	b.n	8007aea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a86:	2310      	movs	r3, #16
 8007a88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a8a:	2310      	movs	r3, #16
 8007a8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	0e5b      	lsrs	r3, r3, #25
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	0f5b      	lsrs	r3, r3, #29
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	7b3a      	ldrb	r2, [r7, #12]
 8007ab2:	4911      	ldr	r1, [pc, #68]	@ (8007af8 <UARTEx_SetNbDataToProcess+0x94>)
 8007ab4:	5c8a      	ldrb	r2, [r1, r2]
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aba:	7b3a      	ldrb	r2, [r7, #12]
 8007abc:	490f      	ldr	r1, [pc, #60]	@ (8007afc <UARTEx_SetNbDataToProcess+0x98>)
 8007abe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	7b7a      	ldrb	r2, [r7, #13]
 8007ad0:	4909      	ldr	r1, [pc, #36]	@ (8007af8 <UARTEx_SetNbDataToProcess+0x94>)
 8007ad2:	5c8a      	ldrb	r2, [r1, r2]
 8007ad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ad8:	7b7a      	ldrb	r2, [r7, #13]
 8007ada:	4908      	ldr	r1, [pc, #32]	@ (8007afc <UARTEx_SetNbDataToProcess+0x98>)
 8007adc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	0800af80 	.word	0x0800af80
 8007afc:	0800af88 	.word	0x0800af88

08007b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b00:	b084      	sub	sp, #16
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	f107 001c 	add.w	r0, r7, #28
 8007b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d121      	bne.n	8007b5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007bdc <USB_CoreInit+0xdc>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d105      	bne.n	8007b52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 faaa 	bl	80080ac <USB_CoreReset>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
 8007b5c:	e01b      	b.n	8007b96 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa9e 	bl	80080ac <USB_CoreReset>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b88:	e005      	b.n	8007b96 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b96:	7fbb      	ldrb	r3, [r7, #30]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d116      	bne.n	8007bca <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007baa:	4b0d      	ldr	r3, [pc, #52]	@ (8007be0 <USB_CoreInit+0xe0>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f043 0206 	orr.w	r2, r3, #6
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f043 0220 	orr.w	r2, r3, #32
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bd6:	b004      	add	sp, #16
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	ffbdffbf 	.word	0xffbdffbf
 8007be0:	03ee0000 	.word	0x03ee0000

08007be4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f023 0201 	bic.w	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d115      	bne.n	8007c54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c34:	200a      	movs	r0, #10
 8007c36:	f7f9 fce1 	bl	80015fc <HAL_Delay>
      ms += 10U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	330a      	adds	r3, #10
 8007c3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fa25 	bl	8008090 <USB_GetMode>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d01e      	beq.n	8007c8a <USB_SetCurrentMode+0x84>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007c50:	d9f0      	bls.n	8007c34 <USB_SetCurrentMode+0x2e>
 8007c52:	e01a      	b.n	8007c8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d115      	bne.n	8007c86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c66:	200a      	movs	r0, #10
 8007c68:	f7f9 fcc8 	bl	80015fc <HAL_Delay>
      ms += 10U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	330a      	adds	r3, #10
 8007c70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa0c 	bl	8008090 <USB_GetMode>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <USB_SetCurrentMode+0x84>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2bc7      	cmp	r3, #199	@ 0xc7
 8007c82:	d9f0      	bls.n	8007c66 <USB_SetCurrentMode+0x60>
 8007c84:	e001      	b.n	8007c8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e005      	b.n	8007c96 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2bc8      	cmp	r3, #200	@ 0xc8
 8007c8e:	d101      	bne.n	8007c94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	e009      	b.n	8007cd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	3340      	adds	r3, #64	@ 0x40
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	613b      	str	r3, [r7, #16]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b0e      	cmp	r3, #14
 8007cd8:	d9f2      	bls.n	8007cc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007cda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d11c      	bne.n	8007d1c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf0:	f043 0302 	orr.w	r3, r3, #2
 8007cf4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e005      	b.n	8007d28 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2300      	movs	r3, #0
 8007d32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d10d      	bne.n	8007d58 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d104      	bne.n	8007d4e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d44:	2100      	movs	r1, #0
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f968 	bl	800801c <USB_SetDevSpeed>
 8007d4c:	e008      	b.n	8007d60 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d4e:	2101      	movs	r1, #1
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f963 	bl	800801c <USB_SetDevSpeed>
 8007d56:	e003      	b.n	8007d60 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d58:	2103      	movs	r1, #3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f95e 	bl	800801c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d60:	2110      	movs	r1, #16
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f8fa 	bl	8007f5c <USB_FlushTxFifo>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f924 	bl	8007fc0 <USB_FlushRxFifo>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d94:	461a      	mov	r2, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da0:	461a      	mov	r2, r3
 8007da2:	2300      	movs	r3, #0
 8007da4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	e043      	b.n	8007e34 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dc2:	d118      	bne.n	8007df6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	e013      	b.n	8007e08 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dec:	461a      	mov	r2, r3
 8007dee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	e008      	b.n	8007e08 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e02:	461a      	mov	r2, r3
 8007e04:	2300      	movs	r3, #0
 8007e06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e14:	461a      	mov	r2, r3
 8007e16:	2300      	movs	r3, #0
 8007e18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e26:	461a      	mov	r2, r3
 8007e28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3301      	adds	r3, #1
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007e38:	461a      	mov	r2, r3
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d3b5      	bcc.n	8007dac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	e043      	b.n	8007ece <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e5c:	d118      	bne.n	8007e90 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e70:	461a      	mov	r2, r3
 8007e72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	e013      	b.n	8007ea2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e86:	461a      	mov	r2, r3
 8007e88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e008      	b.n	8007ea2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d3b5      	bcc.n	8007e46 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007efa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007efc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d105      	bne.n	8007f10 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	f043 0210 	orr.w	r2, r3, #16
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	4b0f      	ldr	r3, [pc, #60]	@ (8007f54 <USB_DevInit+0x2b4>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f043 0208 	orr.w	r2, r3, #8
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d105      	bne.n	8007f44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	699a      	ldr	r2, [r3, #24]
 8007f3c:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <USB_DevInit+0x2b8>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f50:	b004      	add	sp, #16
 8007f52:	4770      	bx	lr
 8007f54:	803c3800 	.word	0x803c3800
 8007f58:	40000004 	.word	0x40000004

08007f5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f76:	d901      	bls.n	8007f7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e01b      	b.n	8007fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	daf2      	bge.n	8007f6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	019b      	lsls	r3, r3, #6
 8007f8c:	f043 0220 	orr.w	r2, r3, #32
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fa0:	d901      	bls.n	8007fa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e006      	b.n	8007fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d0f0      	beq.n	8007f94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fd8:	d901      	bls.n	8007fde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e018      	b.n	8008010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	daf2      	bge.n	8007fcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2210      	movs	r2, #16
 8007fee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ffc:	d901      	bls.n	8008002 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e006      	b.n	8008010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f003 0310 	and.w	r3, r3, #16
 800800a:	2b10      	cmp	r3, #16
 800800c:	d0f0      	beq.n	8007ff0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800803c:	4313      	orrs	r3, r2
 800803e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008068:	f023 0303 	bic.w	r3, r3, #3
 800806c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800807c:	f043 0302 	orr.w	r3, r3, #2
 8008080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f003 0301 	and.w	r3, r3, #1
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080c4:	d901      	bls.n	80080ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e01b      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	daf2      	bge.n	80080b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080ee:	d901      	bls.n	80080f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d0f0      	beq.n	80080e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <__NVIC_SetPriority>:
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800811c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008120:	2b00      	cmp	r3, #0
 8008122:	db0a      	blt.n	800813a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	b2da      	uxtb	r2, r3
 8008128:	490c      	ldr	r1, [pc, #48]	@ (800815c <__NVIC_SetPriority+0x4c>)
 800812a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800812e:	0112      	lsls	r2, r2, #4
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	440b      	add	r3, r1
 8008134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008138:	e00a      	b.n	8008150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	b2da      	uxtb	r2, r3
 800813e:	4908      	ldr	r1, [pc, #32]	@ (8008160 <__NVIC_SetPriority+0x50>)
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	3b04      	subs	r3, #4
 8008148:	0112      	lsls	r2, r2, #4
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	440b      	add	r3, r1
 800814e:	761a      	strb	r2, [r3, #24]
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	e000e100 	.word	0xe000e100
 8008160:	e000ed00 	.word	0xe000ed00

08008164 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <SysTick_Handler+0x1c>)
 800816a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800816c:	f002 f988 	bl	800a480 <xTaskGetSchedulerState>
 8008170:	4603      	mov	r3, r0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d001      	beq.n	800817a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008176:	f000 fd9f 	bl	8008cb8 <xPortSysTickHandler>
  }
}
 800817a:	bf00      	nop
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	e000e010 	.word	0xe000e010

08008184 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008188:	2100      	movs	r1, #0
 800818a:	f06f 0004 	mvn.w	r0, #4
 800818e:	f7ff ffbf 	bl	8008110 <__NVIC_SetPriority>
#endif
}
 8008192:	bf00      	nop
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800819e:	f3ef 8305 	mrs	r3, IPSR
 80081a2:	603b      	str	r3, [r7, #0]
  return(result);
 80081a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081aa:	f06f 0305 	mvn.w	r3, #5
 80081ae:	607b      	str	r3, [r7, #4]
 80081b0:	e00c      	b.n	80081cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081b2:	4b0a      	ldr	r3, [pc, #40]	@ (80081dc <osKernelInitialize+0x44>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081ba:	4b08      	ldr	r3, [pc, #32]	@ (80081dc <osKernelInitialize+0x44>)
 80081bc:	2201      	movs	r2, #1
 80081be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	607b      	str	r3, [r7, #4]
 80081c4:	e002      	b.n	80081cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081cc:	687b      	ldr	r3, [r7, #4]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	24000864 	.word	0x24000864

080081e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e6:	f3ef 8305 	mrs	r3, IPSR
 80081ea:	603b      	str	r3, [r7, #0]
  return(result);
 80081ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80081f2:	f06f 0305 	mvn.w	r3, #5
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	e010      	b.n	800821c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80081fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008228 <osKernelStart+0x48>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d109      	bne.n	8008216 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008202:	f7ff ffbf 	bl	8008184 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008206:	4b08      	ldr	r3, [pc, #32]	@ (8008228 <osKernelStart+0x48>)
 8008208:	2202      	movs	r2, #2
 800820a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800820c:	f001 fcd4 	bl	8009bb8 <vTaskStartScheduler>
      stat = osOK;
 8008210:	2300      	movs	r3, #0
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	e002      	b.n	800821c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800821a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800821c:	687b      	ldr	r3, [r7, #4]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	24000864 	.word	0x24000864

0800822c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b08e      	sub	sp, #56	@ 0x38
 8008230:	af04      	add	r7, sp, #16
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800823c:	f3ef 8305 	mrs	r3, IPSR
 8008240:	617b      	str	r3, [r7, #20]
  return(result);
 8008242:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008244:	2b00      	cmp	r3, #0
 8008246:	d17e      	bne.n	8008346 <osThreadNew+0x11a>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d07b      	beq.n	8008346 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800824e:	2380      	movs	r3, #128	@ 0x80
 8008250:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008252:	2318      	movs	r3, #24
 8008254:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800825e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d045      	beq.n	80082f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <osThreadNew+0x48>
        name = attr->name;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d008      	beq.n	800829a <osThreadNew+0x6e>
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	2b38      	cmp	r3, #56	@ 0x38
 800828c:	d805      	bhi.n	800829a <osThreadNew+0x6e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <osThreadNew+0x72>
        return (NULL);
 800829a:	2300      	movs	r3, #0
 800829c:	e054      	b.n	8008348 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	089b      	lsrs	r3, r3, #2
 80082ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00e      	beq.n	80082d4 <osThreadNew+0xa8>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	2ba7      	cmp	r3, #167	@ 0xa7
 80082bc:	d90a      	bls.n	80082d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d006      	beq.n	80082d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <osThreadNew+0xa8>
        mem = 1;
 80082ce:	2301      	movs	r3, #1
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	e010      	b.n	80082f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10c      	bne.n	80082f6 <osThreadNew+0xca>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d108      	bne.n	80082f6 <osThreadNew+0xca>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d104      	bne.n	80082f6 <osThreadNew+0xca>
          mem = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	e001      	b.n	80082f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d110      	bne.n	800831e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	6a3a      	ldr	r2, [r7, #32]
 8008310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f001 fa5c 	bl	80097d0 <xTaskCreateStatic>
 8008318:	4603      	mov	r3, r0
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	e013      	b.n	8008346 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d110      	bne.n	8008346 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	b29a      	uxth	r2, r3
 8008328:	f107 0310 	add.w	r3, r7, #16
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f001 faaa 	bl	8009890 <xTaskCreate>
 800833c:	4603      	mov	r3, r0
 800833e:	2b01      	cmp	r3, #1
 8008340:	d001      	beq.n	8008346 <osThreadNew+0x11a>
            hTask = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008346:	693b      	ldr	r3, [r7, #16]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3728      	adds	r7, #40	@ 0x28
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008358:	f3ef 8305 	mrs	r3, IPSR
 800835c:	60bb      	str	r3, [r7, #8]
  return(result);
 800835e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <osDelay+0x1c>
    stat = osErrorISR;
 8008364:	f06f 0305 	mvn.w	r3, #5
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	e007      	b.n	800837c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fbe8 	bl	8009b4c <vTaskDelay>
    }
  }

  return (stat);
 800837c:	68fb      	ldr	r3, [r7, #12]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a07      	ldr	r2, [pc, #28]	@ (80083b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4a06      	ldr	r2, [pc, #24]	@ (80083b8 <vApplicationGetIdleTaskMemory+0x30>)
 800839e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2280      	movs	r2, #128	@ 0x80
 80083a4:	601a      	str	r2, [r3, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	24000868 	.word	0x24000868
 80083b8:	24000910 	.word	0x24000910

080083bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a07      	ldr	r2, [pc, #28]	@ (80083e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80083cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a06      	ldr	r2, [pc, #24]	@ (80083ec <vApplicationGetTimerTaskMemory+0x30>)
 80083d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083da:	601a      	str	r2, [r3, #0]
}
 80083dc:	bf00      	nop
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	24000b10 	.word	0x24000b10
 80083ec:	24000bb8 	.word	0x24000bb8

080083f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08a      	sub	sp, #40	@ 0x28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083fc:	f001 fc4c 	bl	8009c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008400:	4b5c      	ldr	r3, [pc, #368]	@ (8008574 <pvPortMalloc+0x184>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008408:	f000 f924 	bl	8008654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800840c:	4b5a      	ldr	r3, [pc, #360]	@ (8008578 <pvPortMalloc+0x188>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	f040 8095 	bne.w	8008544 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01e      	beq.n	800845e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008420:	2208      	movs	r2, #8
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b00      	cmp	r3, #0
 8008430:	d015      	beq.n	800845e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f023 0307 	bic.w	r3, r3, #7
 8008438:	3308      	adds	r3, #8
 800843a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d06f      	beq.n	8008544 <pvPortMalloc+0x154>
 8008464:	4b45      	ldr	r3, [pc, #276]	@ (800857c <pvPortMalloc+0x18c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	429a      	cmp	r2, r3
 800846c:	d86a      	bhi.n	8008544 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800846e:	4b44      	ldr	r3, [pc, #272]	@ (8008580 <pvPortMalloc+0x190>)
 8008470:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008472:	4b43      	ldr	r3, [pc, #268]	@ (8008580 <pvPortMalloc+0x190>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008478:	e004      	b.n	8008484 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	429a      	cmp	r2, r3
 800848c:	d903      	bls.n	8008496 <pvPortMalloc+0xa6>
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f1      	bne.n	800847a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008496:	4b37      	ldr	r3, [pc, #220]	@ (8008574 <pvPortMalloc+0x184>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800849c:	429a      	cmp	r2, r3
 800849e:	d051      	beq.n	8008544 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2208      	movs	r2, #8
 80084a6:	4413      	add	r3, r2
 80084a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	1ad2      	subs	r2, r2, r3
 80084ba:	2308      	movs	r3, #8
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	429a      	cmp	r2, r3
 80084c0:	d920      	bls.n	8008504 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4413      	add	r3, r2
 80084c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <pvPortMalloc+0xfc>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	613b      	str	r3, [r7, #16]
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	e7fd      	b.n	80084e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	1ad2      	subs	r2, r2, r3
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084fe:	69b8      	ldr	r0, [r7, #24]
 8008500:	f000 f90a 	bl	8008718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008504:	4b1d      	ldr	r3, [pc, #116]	@ (800857c <pvPortMalloc+0x18c>)
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	4a1b      	ldr	r2, [pc, #108]	@ (800857c <pvPortMalloc+0x18c>)
 8008510:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008512:	4b1a      	ldr	r3, [pc, #104]	@ (800857c <pvPortMalloc+0x18c>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4b1b      	ldr	r3, [pc, #108]	@ (8008584 <pvPortMalloc+0x194>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d203      	bcs.n	8008526 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800851e:	4b17      	ldr	r3, [pc, #92]	@ (800857c <pvPortMalloc+0x18c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a18      	ldr	r2, [pc, #96]	@ (8008584 <pvPortMalloc+0x194>)
 8008524:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <pvPortMalloc+0x188>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	431a      	orrs	r2, r3
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800853a:	4b13      	ldr	r3, [pc, #76]	@ (8008588 <pvPortMalloc+0x198>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3301      	adds	r3, #1
 8008540:	4a11      	ldr	r2, [pc, #68]	@ (8008588 <pvPortMalloc+0x198>)
 8008542:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008544:	f001 fbb6 	bl	8009cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f003 0307 	and.w	r3, r3, #7
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00b      	beq.n	800856a <pvPortMalloc+0x17a>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60fb      	str	r3, [r7, #12]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <pvPortMalloc+0x176>
	return pvReturn;
 800856a:	69fb      	ldr	r3, [r7, #28]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3728      	adds	r7, #40	@ 0x28
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	24004bc0 	.word	0x24004bc0
 8008578:	24004bd4 	.word	0x24004bd4
 800857c:	24004bc4 	.word	0x24004bc4
 8008580:	24004bb8 	.word	0x24004bb8
 8008584:	24004bc8 	.word	0x24004bc8
 8008588:	24004bcc 	.word	0x24004bcc

0800858c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d04f      	beq.n	800863e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800859e:	2308      	movs	r3, #8
 80085a0:	425b      	negs	r3, r3
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	4413      	add	r3, r2
 80085a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4b25      	ldr	r3, [pc, #148]	@ (8008648 <vPortFree+0xbc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10b      	bne.n	80085d2 <vPortFree+0x46>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	60fb      	str	r3, [r7, #12]
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00b      	beq.n	80085f2 <vPortFree+0x66>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	60bb      	str	r3, [r7, #8]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	4b14      	ldr	r3, [pc, #80]	@ (8008648 <vPortFree+0xbc>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01e      	beq.n	800863e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d11a      	bne.n	800863e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	4b0e      	ldr	r3, [pc, #56]	@ (8008648 <vPortFree+0xbc>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	43db      	mvns	r3, r3
 8008612:	401a      	ands	r2, r3
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008618:	f001 fb3e 	bl	8009c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <vPortFree+0xc0>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4413      	add	r3, r2
 8008626:	4a09      	ldr	r2, [pc, #36]	@ (800864c <vPortFree+0xc0>)
 8008628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800862a:	6938      	ldr	r0, [r7, #16]
 800862c:	f000 f874 	bl	8008718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008630:	4b07      	ldr	r3, [pc, #28]	@ (8008650 <vPortFree+0xc4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	4a06      	ldr	r2, [pc, #24]	@ (8008650 <vPortFree+0xc4>)
 8008638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800863a:	f001 fb3b 	bl	8009cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800863e:	bf00      	nop
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	24004bd4 	.word	0x24004bd4
 800864c:	24004bc4 	.word	0x24004bc4
 8008650:	24004bd0 	.word	0x24004bd0

08008654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800865a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800865e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008660:	4b27      	ldr	r3, [pc, #156]	@ (8008700 <prvHeapInit+0xac>)
 8008662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00c      	beq.n	8008688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3307      	adds	r3, #7
 8008672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0307 	bic.w	r3, r3, #7
 800867a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	4a1f      	ldr	r2, [pc, #124]	@ (8008700 <prvHeapInit+0xac>)
 8008684:	4413      	add	r3, r2
 8008686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800868c:	4a1d      	ldr	r2, [pc, #116]	@ (8008704 <prvHeapInit+0xb0>)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008692:	4b1c      	ldr	r3, [pc, #112]	@ (8008704 <prvHeapInit+0xb0>)
 8008694:	2200      	movs	r2, #0
 8008696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086a0:	2208      	movs	r2, #8
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0307 	bic.w	r3, r3, #7
 80086ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4a15      	ldr	r2, [pc, #84]	@ (8008708 <prvHeapInit+0xb4>)
 80086b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086b6:	4b14      	ldr	r3, [pc, #80]	@ (8008708 <prvHeapInit+0xb4>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2200      	movs	r2, #0
 80086bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086be:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <prvHeapInit+0xb4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	1ad2      	subs	r2, r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008708 <prvHeapInit+0xb4>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4a0a      	ldr	r2, [pc, #40]	@ (800870c <prvHeapInit+0xb8>)
 80086e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	4a09      	ldr	r2, [pc, #36]	@ (8008710 <prvHeapInit+0xbc>)
 80086ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086ec:	4b09      	ldr	r3, [pc, #36]	@ (8008714 <prvHeapInit+0xc0>)
 80086ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086f2:	601a      	str	r2, [r3, #0]
}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	24000fb8 	.word	0x24000fb8
 8008704:	24004bb8 	.word	0x24004bb8
 8008708:	24004bc0 	.word	0x24004bc0
 800870c:	24004bc8 	.word	0x24004bc8
 8008710:	24004bc4 	.word	0x24004bc4
 8008714:	24004bd4 	.word	0x24004bd4

08008718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008720:	4b28      	ldr	r3, [pc, #160]	@ (80087c4 <prvInsertBlockIntoFreeList+0xac>)
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	e002      	b.n	800872c <prvInsertBlockIntoFreeList+0x14>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d8f7      	bhi.n	8008726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4413      	add	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	d108      	bne.n	800875a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	441a      	add	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	441a      	add	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d118      	bne.n	80087a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4b15      	ldr	r3, [pc, #84]	@ (80087c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d00d      	beq.n	8008796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	441a      	add	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	e008      	b.n	80087a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008796:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e003      	b.n	80087a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d002      	beq.n	80087b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b6:	bf00      	nop
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	24004bb8 	.word	0x24004bb8
 80087c8:	24004bc0 	.word	0x24004bc0

080087cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f103 0208 	add.w	r2, r3, #8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f103 0208 	add.w	r2, r3, #8
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 0208 	add.w	r2, r3, #8
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008826:	b480      	push	{r7}
 8008828:	b085      	sub	sp, #20
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
}
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800886e:	b480      	push	{r7}
 8008870:	b085      	sub	sp, #20
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008884:	d103      	bne.n	800888e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e00c      	b.n	80088a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3308      	adds	r3, #8
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e002      	b.n	800889c <vListInsert+0x2e>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d2f6      	bcs.n	8008896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
}
 80088d4:	bf00      	nop
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6892      	ldr	r2, [r2, #8]
 80088f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6852      	ldr	r2, [r2, #4]
 8008900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d103      	bne.n	8008914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689a      	ldr	r2, [r3, #8]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	1e5a      	subs	r2, r3, #1
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3b04      	subs	r3, #4
 8008944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800894c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3b04      	subs	r3, #4
 8008952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f023 0201 	bic.w	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008964:	4a0c      	ldr	r2, [pc, #48]	@ (8008998 <pxPortInitialiseStack+0x64>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b14      	subs	r3, #20
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b04      	subs	r3, #4
 800897a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f06f 0202 	mvn.w	r2, #2
 8008982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	3b20      	subs	r3, #32
 8008988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	0800899d 	.word	0x0800899d

0800899c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089a6:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <prvTaskExitError+0x58>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089ae:	d00b      	beq.n	80089c8 <prvTaskExitError+0x2c>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <prvTaskExitError+0x28>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	60bb      	str	r3, [r7, #8]
}
 80089da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089dc:	bf00      	nop
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0fc      	beq.n	80089de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	24000010 	.word	0x24000010
	...

08008a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a00:	4b07      	ldr	r3, [pc, #28]	@ (8008a20 <pxCurrentTCBConst2>)
 8008a02:	6819      	ldr	r1, [r3, #0]
 8008a04:	6808      	ldr	r0, [r1, #0]
 8008a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	f380 8809 	msr	PSP, r0
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8811 	msr	BASEPRI, r0
 8008a1a:	4770      	bx	lr
 8008a1c:	f3af 8000 	nop.w

08008a20 <pxCurrentTCBConst2>:
 8008a20:	24004c20 	.word	0x24004c20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop

08008a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a28:	4808      	ldr	r0, [pc, #32]	@ (8008a4c <prvPortStartFirstTask+0x24>)
 8008a2a:	6800      	ldr	r0, [r0, #0]
 8008a2c:	6800      	ldr	r0, [r0, #0]
 8008a2e:	f380 8808 	msr	MSP, r0
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8814 	msr	CONTROL, r0
 8008a3a:	b662      	cpsie	i
 8008a3c:	b661      	cpsie	f
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	df00      	svc	0
 8008a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a4a:	bf00      	nop
 8008a4c:	e000ed08 	.word	0xe000ed08

08008a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a56:	4b47      	ldr	r3, [pc, #284]	@ (8008b74 <xPortStartScheduler+0x124>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a47      	ldr	r2, [pc, #284]	@ (8008b78 <xPortStartScheduler+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10b      	bne.n	8008a78 <xPortStartScheduler+0x28>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a78:	4b3e      	ldr	r3, [pc, #248]	@ (8008b74 <xPortStartScheduler+0x124>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b7c <xPortStartScheduler+0x12c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d10b      	bne.n	8008a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60fb      	str	r3, [r7, #12]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a9a:	4b39      	ldr	r3, [pc, #228]	@ (8008b80 <xPortStartScheduler+0x130>)
 8008a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	22ff      	movs	r2, #255	@ 0xff
 8008aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	4b31      	ldr	r3, [pc, #196]	@ (8008b84 <xPortStartScheduler+0x134>)
 8008ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ac2:	4b31      	ldr	r3, [pc, #196]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ac8:	e009      	b.n	8008ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008aca:	4b2f      	ldr	r3, [pc, #188]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae6:	2b80      	cmp	r3, #128	@ 0x80
 8008ae8:	d0ef      	beq.n	8008aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aea:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1c3 0307 	rsb	r3, r3, #7
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d00b      	beq.n	8008b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60bb      	str	r3, [r7, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	4a1c      	ldr	r2, [pc, #112]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b18:	4b1b      	ldr	r3, [pc, #108]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b20:	4a19      	ldr	r2, [pc, #100]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b2c:	4b17      	ldr	r3, [pc, #92]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b38:	4b14      	ldr	r3, [pc, #80]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a13      	ldr	r2, [pc, #76]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b44:	f000 f8da 	bl	8008cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b48:	4b11      	ldr	r3, [pc, #68]	@ (8008b90 <xPortStartScheduler+0x140>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b4e:	f000 f8f9 	bl	8008d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b52:	4b10      	ldr	r3, [pc, #64]	@ (8008b94 <xPortStartScheduler+0x144>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a0f      	ldr	r2, [pc, #60]	@ (8008b94 <xPortStartScheduler+0x144>)
 8008b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b5e:	f7ff ff63 	bl	8008a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b62:	f001 fa0f 	bl	8009f84 <vTaskSwitchContext>
	prvTaskExitError();
 8008b66:	f7ff ff19 	bl	800899c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed00 	.word	0xe000ed00
 8008b78:	410fc271 	.word	0x410fc271
 8008b7c:	410fc270 	.word	0x410fc270
 8008b80:	e000e400 	.word	0xe000e400
 8008b84:	24004bd8 	.word	0x24004bd8
 8008b88:	24004bdc 	.word	0x24004bdc
 8008b8c:	e000ed20 	.word	0xe000ed20
 8008b90:	24000010 	.word	0x24000010
 8008b94:	e000ef34 	.word	0xe000ef34

08008b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	607b      	str	r3, [r7, #4]
}
 8008bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d110      	bne.n	8008be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <vPortEnterCritical+0x60>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	603b      	str	r3, [r7, #0]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <vPortEnterCritical+0x4a>
	}
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	24000010 	.word	0x24000010
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c02:	4b12      	ldr	r3, [pc, #72]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <vPortExitCritical+0x26>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	607b      	str	r3, [r7, #4]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c22:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	4a08      	ldr	r2, [pc, #32]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c2c:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <vPortExitCritical+0x44>
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	24000010 	.word	0x24000010

08008c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c50:	f3ef 8009 	mrs	r0, PSP
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	4b15      	ldr	r3, [pc, #84]	@ (8008cb0 <pxCurrentTCBConst>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	f01e 0f10 	tst.w	lr, #16
 8008c60:	bf08      	it	eq
 8008c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	6010      	str	r0, [r2, #0]
 8008c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c74:	f380 8811 	msr	BASEPRI, r0
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f001 f980 	bl	8009f84 <vTaskSwitchContext>
 8008c84:	f04f 0000 	mov.w	r0, #0
 8008c88:	f380 8811 	msr	BASEPRI, r0
 8008c8c:	bc09      	pop	{r0, r3}
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6808      	ldr	r0, [r1, #0]
 8008c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c96:	f01e 0f10 	tst.w	lr, #16
 8008c9a:	bf08      	it	eq
 8008c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ca0:	f380 8809 	msr	PSP, r0
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst>:
 8008cb0:	24004c20 	.word	0x24004c20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cd2:	f001 f89d 	bl	8009e10 <xTaskIncrementTick>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cdc:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <xPortSysTickHandler+0x40>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f383 8811 	msr	BASEPRI, r3
}
 8008cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d00:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <vPortSetupTimerInterrupt+0x38>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <vPortSetupTimerInterrupt+0x3c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0a      	ldr	r2, [pc, #40]	@ (8008d3c <vPortSetupTimerInterrupt+0x40>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	4a09      	ldr	r2, [pc, #36]	@ (8008d40 <vPortSetupTimerInterrupt+0x44>)
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d1e:	4b04      	ldr	r3, [pc, #16]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d20:	2207      	movs	r2, #7
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	e000e010 	.word	0xe000e010
 8008d34:	e000e018 	.word	0xe000e018
 8008d38:	24000000 	.word	0x24000000
 8008d3c:	10624dd3 	.word	0x10624dd3
 8008d40:	e000e014 	.word	0xe000e014

08008d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d54 <vPortEnableVFP+0x10>
 8008d48:	6801      	ldr	r1, [r0, #0]
 8008d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d4e:	6001      	str	r1, [r0, #0]
 8008d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d52:	bf00      	nop
 8008d54:	e000ed88 	.word	0xe000ed88

08008d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d5e:	f3ef 8305 	mrs	r3, IPSR
 8008d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b0f      	cmp	r3, #15
 8008d68:	d915      	bls.n	8008d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d6a:	4a18      	ldr	r2, [pc, #96]	@ (8008dcc <vPortValidateInterruptPriority+0x74>)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d74:	4b16      	ldr	r3, [pc, #88]	@ (8008dd0 <vPortValidateInterruptPriority+0x78>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	7afa      	ldrb	r2, [r7, #11]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d20b      	bcs.n	8008d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	607b      	str	r3, [r7, #4]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d96:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <vPortValidateInterruptPriority+0x7c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008dd8 <vPortValidateInterruptPriority+0x80>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d90b      	bls.n	8008dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	603b      	str	r3, [r7, #0]
}
 8008db8:	bf00      	nop
 8008dba:	bf00      	nop
 8008dbc:	e7fd      	b.n	8008dba <vPortValidateInterruptPriority+0x62>
	}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	e000e3f0 	.word	0xe000e3f0
 8008dd0:	24004bd8 	.word	0x24004bd8
 8008dd4:	e000ed0c 	.word	0xe000ed0c
 8008dd8:	24004bdc 	.word	0x24004bdc

08008ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <xQueueGenericReset+0x2c>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60bb      	str	r3, [r7, #8]
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e08:	f7ff fec6 	bl	8008b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e14:	68f9      	ldr	r1, [r7, #12]
 8008e16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	441a      	add	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e3e:	fb01 f303 	mul.w	r3, r1, r3
 8008e42:	441a      	add	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	22ff      	movs	r2, #255	@ 0xff
 8008e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	22ff      	movs	r2, #255	@ 0xff
 8008e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d114      	bne.n	8008e88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d01a      	beq.n	8008e9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3310      	adds	r3, #16
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 f942 	bl	800a0f4 <xTaskRemoveFromEventList>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d012      	beq.n	8008e9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e76:	4b0d      	ldr	r3, [pc, #52]	@ (8008eac <xQueueGenericReset+0xd0>)
 8008e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	e009      	b.n	8008e9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3310      	adds	r3, #16
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fc9d 	bl	80087cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3324      	adds	r3, #36	@ 0x24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fc98 	bl	80087cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e9c:	f7ff feae 	bl	8008bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ea0:	2301      	movs	r3, #1
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08e      	sub	sp, #56	@ 0x38
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10b      	bne.n	8008edc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	e7fd      	b.n	8008ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10b      	bne.n	8008efa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	e7fd      	b.n	8008ef6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <xQueueGenericCreateStatic+0x56>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <xQueueGenericCreateStatic+0x5a>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <xQueueGenericCreateStatic+0x5c>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10b      	bne.n	8008f28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	623b      	str	r3, [r7, #32]
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	e7fd      	b.n	8008f24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <xQueueGenericCreateStatic+0x84>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <xQueueGenericCreateStatic+0x88>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <xQueueGenericCreateStatic+0x8a>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10b      	bne.n	8008f56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	61fb      	str	r3, [r7, #28]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f56:	2350      	movs	r3, #80	@ 0x50
 8008f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b50      	cmp	r3, #80	@ 0x50
 8008f5e:	d00b      	beq.n	8008f78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	61bb      	str	r3, [r7, #24]
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00d      	beq.n	8008fa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	4613      	mov	r3, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 f805 	bl	8008faa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3730      	adds	r7, #48	@ 0x30
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d103      	bne.n	8008fc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	e002      	b.n	8008fcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fd8:	2101      	movs	r1, #1
 8008fda:	69b8      	ldr	r0, [r7, #24]
 8008fdc:	f7ff fefe 	bl	8008ddc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	78fa      	ldrb	r2, [r7, #3]
 8008fe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	@ 0x38
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ffe:	2300      	movs	r3, #0
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <xQueueGenericSend+0x34>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	e7fd      	b.n	8009020 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d103      	bne.n	8009032 <xQueueGenericSend+0x42>
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <xQueueGenericSend+0x46>
 8009032:	2301      	movs	r3, #1
 8009034:	e000      	b.n	8009038 <xQueueGenericSend+0x48>
 8009036:	2300      	movs	r3, #0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10b      	bne.n	8009054 <xQueueGenericSend+0x64>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	e7fd      	b.n	8009050 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d103      	bne.n	8009062 <xQueueGenericSend+0x72>
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800905e:	2b01      	cmp	r3, #1
 8009060:	d101      	bne.n	8009066 <xQueueGenericSend+0x76>
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <xQueueGenericSend+0x78>
 8009066:	2300      	movs	r3, #0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10b      	bne.n	8009084 <xQueueGenericSend+0x94>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	623b      	str	r3, [r7, #32]
}
 800907e:	bf00      	nop
 8009080:	bf00      	nop
 8009082:	e7fd      	b.n	8009080 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009084:	f001 f9fc 	bl	800a480 <xTaskGetSchedulerState>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <xQueueGenericSend+0xa4>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <xQueueGenericSend+0xa8>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <xQueueGenericSend+0xaa>
 8009098:	2300      	movs	r3, #0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	61fb      	str	r3, [r7, #28]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090b6:	f7ff fd6f 	bl	8008b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d302      	bcc.n	80090cc <xQueueGenericSend+0xdc>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d129      	bne.n	8009120 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090d2:	f000 fa0f 	bl	80094f4 <prvCopyDataToQueue>
 80090d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d010      	beq.n	8009102 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	3324      	adds	r3, #36	@ 0x24
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f805 	bl	800a0f4 <xTaskRemoveFromEventList>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d013      	beq.n	8009118 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090f0:	4b3f      	ldr	r3, [pc, #252]	@ (80091f0 <xQueueGenericSend+0x200>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	e00a      	b.n	8009118 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009108:	4b39      	ldr	r3, [pc, #228]	@ (80091f0 <xQueueGenericSend+0x200>)
 800910a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009118:	f7ff fd70 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 800911c:	2301      	movs	r3, #1
 800911e:	e063      	b.n	80091e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d103      	bne.n	800912e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009126:	f7ff fd69 	bl	8008bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800912a:	2300      	movs	r3, #0
 800912c:	e05c      	b.n	80091e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800912e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009134:	f107 0314 	add.w	r3, r7, #20
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f83f 	bl	800a1bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800913e:	2301      	movs	r3, #1
 8009140:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009142:	f7ff fd5b 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009146:	f000 fda7 	bl	8009c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800914a:	f7ff fd25 	bl	8008b98 <vPortEnterCritical>
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009154:	b25b      	sxtb	r3, r3
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800915a:	d103      	bne.n	8009164 <xQueueGenericSend+0x174>
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800916a:	b25b      	sxtb	r3, r3
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009170:	d103      	bne.n	800917a <xQueueGenericSend+0x18a>
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800917a:	f7ff fd3f 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800917e:	1d3a      	adds	r2, r7, #4
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f001 f82e 	bl	800a1e8 <xTaskCheckForTimeOut>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d124      	bne.n	80091dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009192:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009194:	f000 faa6 	bl	80096e4 <prvIsQueueFull>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d018      	beq.n	80091d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	3310      	adds	r3, #16
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 ff52 	bl	800a050 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ae:	f000 fa31 	bl	8009614 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091b2:	f000 fd7f 	bl	8009cb4 <xTaskResumeAll>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f af7c 	bne.w	80090b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80091be:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <xQueueGenericSend+0x200>)
 80091c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	e772      	b.n	80090b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091d2:	f000 fa1f 	bl	8009614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091d6:	f000 fd6d 	bl	8009cb4 <xTaskResumeAll>
 80091da:	e76c      	b.n	80090b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091de:	f000 fa19 	bl	8009614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091e2:	f000 fd67 	bl	8009cb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3738      	adds	r7, #56	@ 0x38
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b090      	sub	sp, #64	@ 0x40
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10b      	bne.n	8009224 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800921e:	bf00      	nop
 8009220:	bf00      	nop
 8009222:	e7fd      	b.n	8009220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <xQueueGenericSendFromISR+0x3e>
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <xQueueGenericSendFromISR+0x42>
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <xQueueGenericSendFromISR+0x44>
 8009236:	2300      	movs	r3, #0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10b      	bne.n	8009254 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800924e:	bf00      	nop
 8009250:	bf00      	nop
 8009252:	e7fd      	b.n	8009250 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b02      	cmp	r3, #2
 8009258:	d103      	bne.n	8009262 <xQueueGenericSendFromISR+0x6e>
 800925a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d101      	bne.n	8009266 <xQueueGenericSendFromISR+0x72>
 8009262:	2301      	movs	r3, #1
 8009264:	e000      	b.n	8009268 <xQueueGenericSendFromISR+0x74>
 8009266:	2300      	movs	r3, #0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	623b      	str	r3, [r7, #32]
}
 800927e:	bf00      	nop
 8009280:	bf00      	nop
 8009282:	e7fd      	b.n	8009280 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009284:	f7ff fd68 	bl	8008d58 <vPortValidateInterruptPriority>
	__asm volatile
 8009288:	f3ef 8211 	mrs	r2, BASEPRI
 800928c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	61fa      	str	r2, [r7, #28]
 800929e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80092a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d302      	bcc.n	80092b6 <xQueueGenericSendFromISR+0xc2>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d12f      	bne.n	8009316 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092cc:	f000 f912 	bl	80094f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092d8:	d112      	bne.n	8009300 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d016      	beq.n	8009310 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e4:	3324      	adds	r3, #36	@ 0x24
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 ff04 	bl	800a0f4 <xTaskRemoveFromEventList>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00e      	beq.n	8009310 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e007      	b.n	8009310 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009304:	3301      	adds	r3, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	b25a      	sxtb	r2, r3
 800930a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009310:	2301      	movs	r3, #1
 8009312:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009314:	e001      	b.n	800931a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009316:	2300      	movs	r3, #0
 8009318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800931a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f383 8811 	msr	BASEPRI, r3
}
 8009324:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009328:	4618      	mov	r0, r3
 800932a:	3740      	adds	r7, #64	@ 0x40
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08c      	sub	sp, #48	@ 0x30
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800933c:	2300      	movs	r3, #0
 800933e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <xQueueReceive+0x32>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	623b      	str	r3, [r7, #32]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d103      	bne.n	8009370 <xQueueReceive+0x40>
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <xQueueReceive+0x44>
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <xQueueReceive+0x46>
 8009374:	2300      	movs	r3, #0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10b      	bne.n	8009392 <xQueueReceive+0x62>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	61fb      	str	r3, [r7, #28]
}
 800938c:	bf00      	nop
 800938e:	bf00      	nop
 8009390:	e7fd      	b.n	800938e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009392:	f001 f875 	bl	800a480 <xTaskGetSchedulerState>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <xQueueReceive+0x72>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <xQueueReceive+0x76>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <xQueueReceive+0x78>
 80093a6:	2300      	movs	r3, #0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <xQueueReceive+0x94>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	61bb      	str	r3, [r7, #24]
}
 80093be:	bf00      	nop
 80093c0:	bf00      	nop
 80093c2:	e7fd      	b.n	80093c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093c4:	f7ff fbe8 	bl	8008b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01f      	beq.n	8009414 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d8:	f000 f8f6 	bl	80095c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093de:	1e5a      	subs	r2, r3, #1
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00f      	beq.n	800940c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ee:	3310      	adds	r3, #16
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fe7f 	bl	800a0f4 <xTaskRemoveFromEventList>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093fc:	4b3c      	ldr	r3, [pc, #240]	@ (80094f0 <xQueueReceive+0x1c0>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800940c:	f7ff fbf6 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 8009410:	2301      	movs	r3, #1
 8009412:	e069      	b.n	80094e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d103      	bne.n	8009422 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800941a:	f7ff fbef 	bl	8008bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800941e:	2300      	movs	r3, #0
 8009420:	e062      	b.n	80094e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009424:	2b00      	cmp	r3, #0
 8009426:	d106      	bne.n	8009436 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009428:	f107 0310 	add.w	r3, r7, #16
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fec5 	bl	800a1bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009432:	2301      	movs	r3, #1
 8009434:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009436:	f7ff fbe1 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800943a:	f000 fc2d 	bl	8009c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800943e:	f7ff fbab 	bl	8008b98 <vPortEnterCritical>
 8009442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009448:	b25b      	sxtb	r3, r3
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800944e:	d103      	bne.n	8009458 <xQueueReceive+0x128>
 8009450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800945e:	b25b      	sxtb	r3, r3
 8009460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009464:	d103      	bne.n	800946e <xQueueReceive+0x13e>
 8009466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800946e:	f7ff fbc5 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009472:	1d3a      	adds	r2, r7, #4
 8009474:	f107 0310 	add.w	r3, r7, #16
 8009478:	4611      	mov	r1, r2
 800947a:	4618      	mov	r0, r3
 800947c:	f000 feb4 	bl	800a1e8 <xTaskCheckForTimeOut>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d123      	bne.n	80094ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009488:	f000 f916 	bl	80096b8 <prvIsQueueEmpty>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d017      	beq.n	80094c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	3324      	adds	r3, #36	@ 0x24
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fdd8 	bl	800a050 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094a2:	f000 f8b7 	bl	8009614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094a6:	f000 fc05 	bl	8009cb4 <xTaskResumeAll>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d189      	bne.n	80093c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80094b0:	4b0f      	ldr	r3, [pc, #60]	@ (80094f0 <xQueueReceive+0x1c0>)
 80094b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	e780      	b.n	80093c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094c4:	f000 f8a6 	bl	8009614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094c8:	f000 fbf4 	bl	8009cb4 <xTaskResumeAll>
 80094cc:	e77a      	b.n	80093c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094d0:	f000 f8a0 	bl	8009614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094d4:	f000 fbee 	bl	8009cb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094da:	f000 f8ed 	bl	80096b8 <prvIsQueueEmpty>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f43f af6f 	beq.w	80093c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3730      	adds	r7, #48	@ 0x30
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10d      	bne.n	800952e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d14d      	bne.n	80095b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 ffcc 	bl	800a4bc <xTaskPriorityDisinherit>
 8009524:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	e043      	b.n	80095b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d119      	bne.n	8009568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6858      	ldr	r0, [r3, #4]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953c:	461a      	mov	r2, r3
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	f001 fc5e 	bl	800ae00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954c:	441a      	add	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	429a      	cmp	r2, r3
 800955c:	d32b      	bcc.n	80095b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	e026      	b.n	80095b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68d8      	ldr	r0, [r3, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009570:	461a      	mov	r2, r3
 8009572:	68b9      	ldr	r1, [r7, #8]
 8009574:	f001 fc44 	bl	800ae00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009580:	425b      	negs	r3, r3
 8009582:	441a      	add	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d207      	bcs.n	80095a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800959c:	425b      	negs	r3, r3
 800959e:	441a      	add	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d105      	bne.n	80095b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80095be:	697b      	ldr	r3, [r7, #20]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d018      	beq.n	800960c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e2:	441a      	add	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d303      	bcc.n	80095fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68d9      	ldr	r1, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009604:	461a      	mov	r2, r3
 8009606:	6838      	ldr	r0, [r7, #0]
 8009608:	f001 fbfa 	bl	800ae00 <memcpy>
	}
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800961c:	f7ff fabc 	bl	8008b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009626:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009628:	e011      	b.n	800964e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d012      	beq.n	8009658 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3324      	adds	r3, #36	@ 0x24
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fd5c 	bl	800a0f4 <xTaskRemoveFromEventList>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009642:	f000 fe35 	bl	800a2b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	3b01      	subs	r3, #1
 800964a:	b2db      	uxtb	r3, r3
 800964c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800964e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009652:	2b00      	cmp	r3, #0
 8009654:	dce9      	bgt.n	800962a <prvUnlockQueue+0x16>
 8009656:	e000      	b.n	800965a <prvUnlockQueue+0x46>
					break;
 8009658:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	22ff      	movs	r2, #255	@ 0xff
 800965e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009662:	f7ff facb 	bl	8008bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009666:	f7ff fa97 	bl	8008b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009670:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009672:	e011      	b.n	8009698 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d012      	beq.n	80096a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3310      	adds	r3, #16
 8009680:	4618      	mov	r0, r3
 8009682:	f000 fd37 	bl	800a0f4 <xTaskRemoveFromEventList>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800968c:	f000 fe10 	bl	800a2b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	3b01      	subs	r3, #1
 8009694:	b2db      	uxtb	r3, r3
 8009696:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800969c:	2b00      	cmp	r3, #0
 800969e:	dce9      	bgt.n	8009674 <prvUnlockQueue+0x60>
 80096a0:	e000      	b.n	80096a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	22ff      	movs	r2, #255	@ 0xff
 80096a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80096ac:	f7ff faa6 	bl	8008bfc <vPortExitCritical>
}
 80096b0:	bf00      	nop
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096c0:	f7ff fa6a 	bl	8008b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e001      	b.n	80096d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096d6:	f7ff fa91 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096ec:	f7ff fa54 	bl	8008b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d102      	bne.n	8009702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096fc:	2301      	movs	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e001      	b.n	8009706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009706:	f7ff fa79 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 800970a:	68fb      	ldr	r3, [r7, #12]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e014      	b.n	800974e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009724:	4a0f      	ldr	r2, [pc, #60]	@ (8009764 <vQueueAddToRegistry+0x50>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10b      	bne.n	8009748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009730:	490c      	ldr	r1, [pc, #48]	@ (8009764 <vQueueAddToRegistry+0x50>)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800973a:	4a0a      	ldr	r2, [pc, #40]	@ (8009764 <vQueueAddToRegistry+0x50>)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	4413      	add	r3, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009746:	e006      	b.n	8009756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b07      	cmp	r3, #7
 8009752:	d9e7      	bls.n	8009724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	24004be0 	.word	0x24004be0

08009768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009778:	f7ff fa0e 	bl	8008b98 <vPortEnterCritical>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009782:	b25b      	sxtb	r3, r3
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009788:	d103      	bne.n	8009792 <vQueueWaitForMessageRestricted+0x2a>
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009798:	b25b      	sxtb	r3, r3
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800979e:	d103      	bne.n	80097a8 <vQueueWaitForMessageRestricted+0x40>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097a8:	f7ff fa28 	bl	8008bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d106      	bne.n	80097c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	3324      	adds	r3, #36	@ 0x24
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fc6d 	bl	800a09c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097c2:	6978      	ldr	r0, [r7, #20]
 80097c4:	f7ff ff26 	bl	8009614 <prvUnlockQueue>
	}
 80097c8:	bf00      	nop
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08e      	sub	sp, #56	@ 0x38
 80097d4:	af04      	add	r7, sp, #16
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	623b      	str	r3, [r7, #32]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10b      	bne.n	800981a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	61fb      	str	r3, [r7, #28]
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	e7fd      	b.n	8009816 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800981a:	23a8      	movs	r3, #168	@ 0xa8
 800981c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2ba8      	cmp	r3, #168	@ 0xa8
 8009822:	d00b      	beq.n	800983c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	61bb      	str	r3, [r7, #24]
}
 8009836:	bf00      	nop
 8009838:	bf00      	nop
 800983a:	e7fd      	b.n	8009838 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800983c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	2b00      	cmp	r3, #0
 8009842:	d01e      	beq.n	8009882 <xTaskCreateStatic+0xb2>
 8009844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009846:	2b00      	cmp	r3, #0
 8009848:	d01b      	beq.n	8009882 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800984e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009852:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	2202      	movs	r2, #2
 8009858:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800985c:	2300      	movs	r3, #0
 800985e:	9303      	str	r3, [sp, #12]
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	9302      	str	r3, [sp, #8]
 8009864:	f107 0314 	add.w	r3, r7, #20
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	68b9      	ldr	r1, [r7, #8]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 f851 	bl	800991c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800987a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800987c:	f000 f8f6 	bl	8009a6c <prvAddNewTaskToReadyList>
 8009880:	e001      	b.n	8009886 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009886:	697b      	ldr	r3, [r7, #20]
	}
 8009888:	4618      	mov	r0, r3
 800988a:	3728      	adds	r7, #40	@ 0x28
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08c      	sub	sp, #48	@ 0x30
 8009894:	af04      	add	r7, sp, #16
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	4613      	mov	r3, r2
 800989e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fda3 	bl	80083f0 <pvPortMalloc>
 80098aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00e      	beq.n	80098d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098b2:	20a8      	movs	r0, #168	@ 0xa8
 80098b4:	f7fe fd9c 	bl	80083f0 <pvPortMalloc>
 80098b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80098c6:	e005      	b.n	80098d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098c8:	6978      	ldr	r0, [r7, #20]
 80098ca:	f7fe fe5f 	bl	800858c <vPortFree>
 80098ce:	e001      	b.n	80098d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d017      	beq.n	800990a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098e2:	88fa      	ldrh	r2, [r7, #6]
 80098e4:	2300      	movs	r3, #0
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	9302      	str	r3, [sp, #8]
 80098ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	68b9      	ldr	r1, [r7, #8]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 f80f 	bl	800991c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098fe:	69f8      	ldr	r0, [r7, #28]
 8009900:	f000 f8b4 	bl	8009a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009904:	2301      	movs	r3, #1
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	e002      	b.n	8009910 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800990a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800990e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009910:	69bb      	ldr	r3, [r7, #24]
	}
 8009912:	4618      	mov	r0, r3
 8009914:	3720      	adds	r7, #32
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	461a      	mov	r2, r3
 8009934:	21a5      	movs	r1, #165	@ 0xa5
 8009936:	f001 f9df 	bl	800acf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009944:	440b      	add	r3, r1
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	f023 0307 	bic.w	r3, r3, #7
 8009952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00b      	beq.n	8009976 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	617b      	str	r3, [r7, #20]
}
 8009970:	bf00      	nop
 8009972:	bf00      	nop
 8009974:	e7fd      	b.n	8009972 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01f      	beq.n	80099bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800997c:	2300      	movs	r3, #0
 800997e:	61fb      	str	r3, [r7, #28]
 8009980:	e012      	b.n	80099a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	4413      	add	r3, r2
 8009988:	7819      	ldrb	r1, [r3, #0]
 800998a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	4413      	add	r3, r2
 8009990:	3334      	adds	r3, #52	@ 0x34
 8009992:	460a      	mov	r2, r1
 8009994:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d006      	beq.n	80099b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	3301      	adds	r3, #1
 80099a6:	61fb      	str	r3, [r7, #28]
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	2b0f      	cmp	r3, #15
 80099ac:	d9e9      	bls.n	8009982 <prvInitialiseNewTask+0x66>
 80099ae:	e000      	b.n	80099b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80099b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099ba:	e003      	b.n	80099c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	2b37      	cmp	r3, #55	@ 0x37
 80099c8:	d901      	bls.n	80099ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099ca:	2337      	movs	r3, #55	@ 0x37
 80099cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	2200      	movs	r2, #0
 80099de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e2:	3304      	adds	r3, #4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe ff11 	bl	800880c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	3318      	adds	r3, #24
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe ff0c 	bl	800880c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1c:	3354      	adds	r3, #84	@ 0x54
 8009a1e:	224c      	movs	r2, #76	@ 0x4c
 8009a20:	2100      	movs	r1, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 f968 	bl	800acf8 <memset>
 8009a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8009a60 <prvInitialiseNewTask+0x144>)
 8009a2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a30:	4a0c      	ldr	r2, [pc, #48]	@ (8009a64 <prvInitialiseNewTask+0x148>)
 8009a32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	4a0c      	ldr	r2, [pc, #48]	@ (8009a68 <prvInitialiseNewTask+0x14c>)
 8009a38:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	68f9      	ldr	r1, [r7, #12]
 8009a3e:	69b8      	ldr	r0, [r7, #24]
 8009a40:	f7fe ff78 	bl	8008934 <pxPortInitialiseStack>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a56:	bf00      	nop
 8009a58:	3720      	adds	r7, #32
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	2400524c 	.word	0x2400524c
 8009a64:	240052b4 	.word	0x240052b4
 8009a68:	2400531c 	.word	0x2400531c

08009a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a74:	f7ff f890 	bl	8008b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a78:	4b2d      	ldr	r3, [pc, #180]	@ (8009b30 <prvAddNewTaskToReadyList+0xc4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8009b30 <prvAddNewTaskToReadyList+0xc4>)
 8009a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a82:	4b2c      	ldr	r3, [pc, #176]	@ (8009b34 <prvAddNewTaskToReadyList+0xc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d109      	bne.n	8009a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8009b34 <prvAddNewTaskToReadyList+0xc8>)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a90:	4b27      	ldr	r3, [pc, #156]	@ (8009b30 <prvAddNewTaskToReadyList+0xc4>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d110      	bne.n	8009aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a98:	f000 fc2e 	bl	800a2f8 <prvInitialiseTaskLists>
 8009a9c:	e00d      	b.n	8009aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a9e:	4b26      	ldr	r3, [pc, #152]	@ (8009b38 <prvAddNewTaskToReadyList+0xcc>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aa6:	4b23      	ldr	r3, [pc, #140]	@ (8009b34 <prvAddNewTaskToReadyList+0xc8>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d802      	bhi.n	8009aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8009b34 <prvAddNewTaskToReadyList+0xc8>)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009aba:	4b20      	ldr	r3, [pc, #128]	@ (8009b3c <prvAddNewTaskToReadyList+0xd0>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8009b3c <prvAddNewTaskToReadyList+0xd0>)
 8009ac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8009b3c <prvAddNewTaskToReadyList+0xd0>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b40 <prvAddNewTaskToReadyList+0xd4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d903      	bls.n	8009ae0 <prvAddNewTaskToReadyList+0x74>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009adc:	4a18      	ldr	r2, [pc, #96]	@ (8009b40 <prvAddNewTaskToReadyList+0xd4>)
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4a15      	ldr	r2, [pc, #84]	@ (8009b44 <prvAddNewTaskToReadyList+0xd8>)
 8009aee:	441a      	add	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	4610      	mov	r0, r2
 8009af8:	f7fe fe95 	bl	8008826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009afc:	f7ff f87e 	bl	8008bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b00:	4b0d      	ldr	r3, [pc, #52]	@ (8009b38 <prvAddNewTaskToReadyList+0xcc>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00e      	beq.n	8009b26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b08:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <prvAddNewTaskToReadyList+0xc8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d207      	bcs.n	8009b26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b16:	4b0c      	ldr	r3, [pc, #48]	@ (8009b48 <prvAddNewTaskToReadyList+0xdc>)
 8009b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	240050f4 	.word	0x240050f4
 8009b34:	24004c20 	.word	0x24004c20
 8009b38:	24005100 	.word	0x24005100
 8009b3c:	24005110 	.word	0x24005110
 8009b40:	240050fc 	.word	0x240050fc
 8009b44:	24004c24 	.word	0x24004c24
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d018      	beq.n	8009b90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b5e:	4b14      	ldr	r3, [pc, #80]	@ (8009bb0 <vTaskDelay+0x64>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <vTaskDelay+0x32>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60bb      	str	r3, [r7, #8]
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	e7fd      	b.n	8009b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b7e:	f000 f88b 	bl	8009c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fd09 	bl	800a59c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b8a:	f000 f893 	bl	8009cb4 <xTaskResumeAll>
 8009b8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d107      	bne.n	8009ba6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b96:	4b07      	ldr	r3, [pc, #28]	@ (8009bb4 <vTaskDelay+0x68>)
 8009b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	2400511c 	.word	0x2400511c
 8009bb4:	e000ed04 	.word	0xe000ed04

08009bb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08a      	sub	sp, #40	@ 0x28
 8009bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bc6:	463a      	mov	r2, r7
 8009bc8:	1d39      	adds	r1, r7, #4
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe fbda 	bl	8008388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	9202      	str	r2, [sp, #8]
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	2300      	movs	r3, #0
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	2300      	movs	r3, #0
 8009be4:	460a      	mov	r2, r1
 8009be6:	4924      	ldr	r1, [pc, #144]	@ (8009c78 <vTaskStartScheduler+0xc0>)
 8009be8:	4824      	ldr	r0, [pc, #144]	@ (8009c7c <vTaskStartScheduler+0xc4>)
 8009bea:	f7ff fdf1 	bl	80097d0 <xTaskCreateStatic>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	4a23      	ldr	r2, [pc, #140]	@ (8009c80 <vTaskStartScheduler+0xc8>)
 8009bf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bf4:	4b22      	ldr	r3, [pc, #136]	@ (8009c80 <vTaskStartScheduler+0xc8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	e001      	b.n	8009c06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d102      	bne.n	8009c12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c0c:	f000 fd1a 	bl	800a644 <xTimerCreateTimerTask>
 8009c10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d11b      	bne.n	8009c50 <vTaskStartScheduler+0x98>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	613b      	str	r3, [r7, #16]
}
 8009c2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c2c:	4b15      	ldr	r3, [pc, #84]	@ (8009c84 <vTaskStartScheduler+0xcc>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3354      	adds	r3, #84	@ 0x54
 8009c32:	4a15      	ldr	r2, [pc, #84]	@ (8009c88 <vTaskStartScheduler+0xd0>)
 8009c34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c36:	4b15      	ldr	r3, [pc, #84]	@ (8009c8c <vTaskStartScheduler+0xd4>)
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c3e:	4b14      	ldr	r3, [pc, #80]	@ (8009c90 <vTaskStartScheduler+0xd8>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c44:	4b13      	ldr	r3, [pc, #76]	@ (8009c94 <vTaskStartScheduler+0xdc>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c4a:	f7fe ff01 	bl	8008a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c4e:	e00f      	b.n	8009c70 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c56:	d10b      	bne.n	8009c70 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	60fb      	str	r3, [r7, #12]
}
 8009c6a:	bf00      	nop
 8009c6c:	bf00      	nop
 8009c6e:	e7fd      	b.n	8009c6c <vTaskStartScheduler+0xb4>
}
 8009c70:	bf00      	nop
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	0800aef8 	.word	0x0800aef8
 8009c7c:	0800a2c9 	.word	0x0800a2c9
 8009c80:	24005118 	.word	0x24005118
 8009c84:	24004c20 	.word	0x24004c20
 8009c88:	24000014 	.word	0x24000014
 8009c8c:	24005114 	.word	0x24005114
 8009c90:	24005100 	.word	0x24005100
 8009c94:	240050f8 	.word	0x240050f8

08009c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c9c:	4b04      	ldr	r3, [pc, #16]	@ (8009cb0 <vTaskSuspendAll+0x18>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	4a03      	ldr	r2, [pc, #12]	@ (8009cb0 <vTaskSuspendAll+0x18>)
 8009ca4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ca6:	bf00      	nop
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	2400511c 	.word	0x2400511c

08009cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cc2:	4b42      	ldr	r3, [pc, #264]	@ (8009dcc <xTaskResumeAll+0x118>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <xTaskResumeAll+0x2e>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	603b      	str	r3, [r7, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	e7fd      	b.n	8009cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ce2:	f7fe ff59 	bl	8008b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ce6:	4b39      	ldr	r3, [pc, #228]	@ (8009dcc <xTaskResumeAll+0x118>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	4a37      	ldr	r2, [pc, #220]	@ (8009dcc <xTaskResumeAll+0x118>)
 8009cee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cf0:	4b36      	ldr	r3, [pc, #216]	@ (8009dcc <xTaskResumeAll+0x118>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d162      	bne.n	8009dbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cf8:	4b35      	ldr	r3, [pc, #212]	@ (8009dd0 <xTaskResumeAll+0x11c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d05e      	beq.n	8009dbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d00:	e02f      	b.n	8009d62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d02:	4b34      	ldr	r3, [pc, #208]	@ (8009dd4 <xTaskResumeAll+0x120>)
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3318      	adds	r3, #24
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fde6 	bl	80088e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fe fde1 	bl	80088e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d22:	4b2d      	ldr	r3, [pc, #180]	@ (8009dd8 <xTaskResumeAll+0x124>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d903      	bls.n	8009d32 <xTaskResumeAll+0x7e>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8009dd8 <xTaskResumeAll+0x124>)
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d36:	4613      	mov	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4a27      	ldr	r2, [pc, #156]	@ (8009ddc <xTaskResumeAll+0x128>)
 8009d40:	441a      	add	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4619      	mov	r1, r3
 8009d48:	4610      	mov	r0, r2
 8009d4a:	f7fe fd6c 	bl	8008826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d52:	4b23      	ldr	r3, [pc, #140]	@ (8009de0 <xTaskResumeAll+0x12c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d302      	bcc.n	8009d62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009d5c:	4b21      	ldr	r3, [pc, #132]	@ (8009de4 <xTaskResumeAll+0x130>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d62:	4b1c      	ldr	r3, [pc, #112]	@ (8009dd4 <xTaskResumeAll+0x120>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1cb      	bne.n	8009d02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d70:	f000 fb66 	bl	800a440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d74:	4b1c      	ldr	r3, [pc, #112]	@ (8009de8 <xTaskResumeAll+0x134>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d010      	beq.n	8009da2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d80:	f000 f846 	bl	8009e10 <xTaskIncrementTick>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009d8a:	4b16      	ldr	r3, [pc, #88]	@ (8009de4 <xTaskResumeAll+0x130>)
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1f1      	bne.n	8009d80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009d9c:	4b12      	ldr	r3, [pc, #72]	@ (8009de8 <xTaskResumeAll+0x134>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009da2:	4b10      	ldr	r3, [pc, #64]	@ (8009de4 <xTaskResumeAll+0x130>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009daa:	2301      	movs	r3, #1
 8009dac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009dae:	4b0f      	ldr	r3, [pc, #60]	@ (8009dec <xTaskResumeAll+0x138>)
 8009db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dbe:	f7fe ff1d 	bl	8008bfc <vPortExitCritical>

	return xAlreadyYielded;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	2400511c 	.word	0x2400511c
 8009dd0:	240050f4 	.word	0x240050f4
 8009dd4:	240050b4 	.word	0x240050b4
 8009dd8:	240050fc 	.word	0x240050fc
 8009ddc:	24004c24 	.word	0x24004c24
 8009de0:	24004c20 	.word	0x24004c20
 8009de4:	24005108 	.word	0x24005108
 8009de8:	24005104 	.word	0x24005104
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009df6:	4b05      	ldr	r3, [pc, #20]	@ (8009e0c <xTaskGetTickCount+0x1c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dfc:	687b      	ldr	r3, [r7, #4]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	240050f8 	.word	0x240050f8

08009e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e16:	2300      	movs	r3, #0
 8009e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8009f58 <xTaskIncrementTick+0x148>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f040 8090 	bne.w	8009f44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e24:	4b4d      	ldr	r3, [pc, #308]	@ (8009f5c <xTaskIncrementTick+0x14c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8009f5c <xTaskIncrementTick+0x14c>)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d121      	bne.n	8009e7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e38:	4b49      	ldr	r3, [pc, #292]	@ (8009f60 <xTaskIncrementTick+0x150>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	603b      	str	r3, [r7, #0]
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <xTaskIncrementTick+0x46>
 8009e5a:	4b41      	ldr	r3, [pc, #260]	@ (8009f60 <xTaskIncrementTick+0x150>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	4b40      	ldr	r3, [pc, #256]	@ (8009f64 <xTaskIncrementTick+0x154>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a3e      	ldr	r2, [pc, #248]	@ (8009f60 <xTaskIncrementTick+0x150>)
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	4a3e      	ldr	r2, [pc, #248]	@ (8009f64 <xTaskIncrementTick+0x154>)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f68 <xTaskIncrementTick+0x158>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3301      	adds	r3, #1
 8009e74:	4a3c      	ldr	r2, [pc, #240]	@ (8009f68 <xTaskIncrementTick+0x158>)
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	f000 fae2 	bl	800a440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8009f6c <xTaskIncrementTick+0x15c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d349      	bcc.n	8009f1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e86:	4b36      	ldr	r3, [pc, #216]	@ (8009f60 <xTaskIncrementTick+0x150>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e90:	4b36      	ldr	r3, [pc, #216]	@ (8009f6c <xTaskIncrementTick+0x15c>)
 8009e92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e96:	601a      	str	r2, [r3, #0]
					break;
 8009e98:	e03f      	b.n	8009f1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9a:	4b31      	ldr	r3, [pc, #196]	@ (8009f60 <xTaskIncrementTick+0x150>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d203      	bcs.n	8009eba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8009f6c <xTaskIncrementTick+0x15c>)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009eb8:	e02f      	b.n	8009f1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe fd0e 	bl	80088e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d004      	beq.n	8009ed6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	3318      	adds	r3, #24
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fe fd05 	bl	80088e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eda:	4b25      	ldr	r3, [pc, #148]	@ (8009f70 <xTaskIncrementTick+0x160>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d903      	bls.n	8009eea <xTaskIncrementTick+0xda>
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee6:	4a22      	ldr	r2, [pc, #136]	@ (8009f70 <xTaskIncrementTick+0x160>)
 8009ee8:	6013      	str	r3, [r2, #0]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8009f74 <xTaskIncrementTick+0x164>)
 8009ef8:	441a      	add	r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f7fe fc90 	bl	8008826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8009f78 <xTaskIncrementTick+0x168>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d3b8      	bcc.n	8009e86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009f14:	2301      	movs	r3, #1
 8009f16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f18:	e7b5      	b.n	8009e86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f1a:	4b17      	ldr	r3, [pc, #92]	@ (8009f78 <xTaskIncrementTick+0x168>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f20:	4914      	ldr	r1, [pc, #80]	@ (8009f74 <xTaskIncrementTick+0x164>)
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d901      	bls.n	8009f36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009f32:	2301      	movs	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f36:	4b11      	ldr	r3, [pc, #68]	@ (8009f7c <xTaskIncrementTick+0x16c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	e004      	b.n	8009f4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f44:	4b0e      	ldr	r3, [pc, #56]	@ (8009f80 <xTaskIncrementTick+0x170>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f80 <xTaskIncrementTick+0x170>)
 8009f4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f4e:	697b      	ldr	r3, [r7, #20]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	2400511c 	.word	0x2400511c
 8009f5c:	240050f8 	.word	0x240050f8
 8009f60:	240050ac 	.word	0x240050ac
 8009f64:	240050b0 	.word	0x240050b0
 8009f68:	2400510c 	.word	0x2400510c
 8009f6c:	24005114 	.word	0x24005114
 8009f70:	240050fc 	.word	0x240050fc
 8009f74:	24004c24 	.word	0x24004c24
 8009f78:	24004c20 	.word	0x24004c20
 8009f7c:	24005108 	.word	0x24005108
 8009f80:	24005104 	.word	0x24005104

08009f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f8a:	4b2b      	ldr	r3, [pc, #172]	@ (800a038 <vTaskSwitchContext+0xb4>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f92:	4b2a      	ldr	r3, [pc, #168]	@ (800a03c <vTaskSwitchContext+0xb8>)
 8009f94:	2201      	movs	r2, #1
 8009f96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f98:	e047      	b.n	800a02a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009f9a:	4b28      	ldr	r3, [pc, #160]	@ (800a03c <vTaskSwitchContext+0xb8>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa0:	4b27      	ldr	r3, [pc, #156]	@ (800a040 <vTaskSwitchContext+0xbc>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	e011      	b.n	8009fcc <vTaskSwitchContext+0x48>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10b      	bne.n	8009fc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	e7fd      	b.n	8009fc2 <vTaskSwitchContext+0x3e>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	491d      	ldr	r1, [pc, #116]	@ (800a044 <vTaskSwitchContext+0xc0>)
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	440b      	add	r3, r1
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0e3      	beq.n	8009fa8 <vTaskSwitchContext+0x24>
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4a16      	ldr	r2, [pc, #88]	@ (800a044 <vTaskSwitchContext+0xc0>)
 8009fec:	4413      	add	r3, r2
 8009fee:	60bb      	str	r3, [r7, #8]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	605a      	str	r2, [r3, #4]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	3308      	adds	r3, #8
 800a002:	429a      	cmp	r2, r3
 800a004:	d104      	bne.n	800a010 <vTaskSwitchContext+0x8c>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	605a      	str	r2, [r3, #4]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	4a0c      	ldr	r2, [pc, #48]	@ (800a048 <vTaskSwitchContext+0xc4>)
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	4a09      	ldr	r2, [pc, #36]	@ (800a040 <vTaskSwitchContext+0xbc>)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a020:	4b09      	ldr	r3, [pc, #36]	@ (800a048 <vTaskSwitchContext+0xc4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3354      	adds	r3, #84	@ 0x54
 800a026:	4a09      	ldr	r2, [pc, #36]	@ (800a04c <vTaskSwitchContext+0xc8>)
 800a028:	6013      	str	r3, [r2, #0]
}
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	2400511c 	.word	0x2400511c
 800a03c:	24005108 	.word	0x24005108
 800a040:	240050fc 	.word	0x240050fc
 800a044:	24004c24 	.word	0x24004c24
 800a048:	24004c20 	.word	0x24004c20
 800a04c:	24000014 	.word	0x24000014

0800a050 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10b      	bne.n	800a078 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	e7fd      	b.n	800a074 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a078:	4b07      	ldr	r3, [pc, #28]	@ (800a098 <vTaskPlaceOnEventList+0x48>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3318      	adds	r3, #24
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7fe fbf4 	bl	800886e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a086:	2101      	movs	r1, #1
 800a088:	6838      	ldr	r0, [r7, #0]
 800a08a:	f000 fa87 	bl	800a59c <prvAddCurrentTaskToDelayedList>
}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	24004c20 	.word	0x24004c20

0800a09c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10b      	bne.n	800a0c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	617b      	str	r3, [r7, #20]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a0f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3318      	adds	r3, #24
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7fe fba9 	bl	8008826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	68b8      	ldr	r0, [r7, #8]
 800a0e4:	f000 fa5a 	bl	800a59c <prvAddCurrentTaskToDelayedList>
	}
 800a0e8:	bf00      	nop
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	24004c20 	.word	0x24004c20

0800a0f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10b      	bne.n	800a122 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	60fb      	str	r3, [r7, #12]
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	e7fd      	b.n	800a11e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	3318      	adds	r3, #24
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fbda 	bl	80088e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a12c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <xTaskRemoveFromEventList+0xb0>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d11d      	bne.n	800a170 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	3304      	adds	r3, #4
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fbd1 	bl	80088e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a142:	4b19      	ldr	r3, [pc, #100]	@ (800a1a8 <xTaskRemoveFromEventList+0xb4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	429a      	cmp	r2, r3
 800a148:	d903      	bls.n	800a152 <xTaskRemoveFromEventList+0x5e>
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14e:	4a16      	ldr	r2, [pc, #88]	@ (800a1a8 <xTaskRemoveFromEventList+0xb4>)
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a156:	4613      	mov	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4a13      	ldr	r2, [pc, #76]	@ (800a1ac <xTaskRemoveFromEventList+0xb8>)
 800a160:	441a      	add	r2, r3
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	3304      	adds	r3, #4
 800a166:	4619      	mov	r1, r3
 800a168:	4610      	mov	r0, r2
 800a16a:	f7fe fb5c 	bl	8008826 <vListInsertEnd>
 800a16e:	e005      	b.n	800a17c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3318      	adds	r3, #24
 800a174:	4619      	mov	r1, r3
 800a176:	480e      	ldr	r0, [pc, #56]	@ (800a1b0 <xTaskRemoveFromEventList+0xbc>)
 800a178:	f7fe fb55 	bl	8008826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a180:	4b0c      	ldr	r3, [pc, #48]	@ (800a1b4 <xTaskRemoveFromEventList+0xc0>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a186:	429a      	cmp	r2, r3
 800a188:	d905      	bls.n	800a196 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a18a:	2301      	movs	r3, #1
 800a18c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a18e:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <xTaskRemoveFromEventList+0xc4>)
 800a190:	2201      	movs	r2, #1
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e001      	b.n	800a19a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a19a:	697b      	ldr	r3, [r7, #20]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	2400511c 	.word	0x2400511c
 800a1a8:	240050fc 	.word	0x240050fc
 800a1ac:	24004c24 	.word	0x24004c24
 800a1b0:	240050b4 	.word	0x240050b4
 800a1b4:	24004c20 	.word	0x24004c20
 800a1b8:	24005108 	.word	0x24005108

0800a1bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1c4:	4b06      	ldr	r3, [pc, #24]	@ (800a1e0 <vTaskInternalSetTimeOutState+0x24>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1cc:	4b05      	ldr	r3, [pc, #20]	@ (800a1e4 <vTaskInternalSetTimeOutState+0x28>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	605a      	str	r2, [r3, #4]
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	2400510c 	.word	0x2400510c
 800a1e4:	240050f8 	.word	0x240050f8

0800a1e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10b      	bne.n	800a210 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	613b      	str	r3, [r7, #16]
}
 800a20a:	bf00      	nop
 800a20c:	bf00      	nop
 800a20e:	e7fd      	b.n	800a20c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10b      	bne.n	800a22e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	60fb      	str	r3, [r7, #12]
}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	e7fd      	b.n	800a22a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a22e:	f7fe fcb3 	bl	8008b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a232:	4b1d      	ldr	r3, [pc, #116]	@ (800a2a8 <xTaskCheckForTimeOut+0xc0>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a24a:	d102      	bne.n	800a252 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	61fb      	str	r3, [r7, #28]
 800a250:	e023      	b.n	800a29a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b15      	ldr	r3, [pc, #84]	@ (800a2ac <xTaskCheckForTimeOut+0xc4>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d007      	beq.n	800a26e <xTaskCheckForTimeOut+0x86>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	429a      	cmp	r2, r3
 800a266:	d302      	bcc.n	800a26e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a268:	2301      	movs	r3, #1
 800a26a:	61fb      	str	r3, [r7, #28]
 800a26c:	e015      	b.n	800a29a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	429a      	cmp	r2, r3
 800a276:	d20b      	bcs.n	800a290 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff ff99 	bl	800a1bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
 800a28e:	e004      	b.n	800a29a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a296:	2301      	movs	r3, #1
 800a298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a29a:	f7fe fcaf 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 800a29e:	69fb      	ldr	r3, [r7, #28]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3720      	adds	r7, #32
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	240050f8 	.word	0x240050f8
 800a2ac:	2400510c 	.word	0x2400510c

0800a2b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2b4:	4b03      	ldr	r3, [pc, #12]	@ (800a2c4 <vTaskMissedYield+0x14>)
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
}
 800a2ba:	bf00      	nop
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	24005108 	.word	0x24005108

0800a2c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2d0:	f000 f852 	bl	800a378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2d4:	4b06      	ldr	r3, [pc, #24]	@ (800a2f0 <prvIdleTask+0x28>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d9f9      	bls.n	800a2d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2dc:	4b05      	ldr	r3, [pc, #20]	@ (800a2f4 <prvIdleTask+0x2c>)
 800a2de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2ec:	e7f0      	b.n	800a2d0 <prvIdleTask+0x8>
 800a2ee:	bf00      	nop
 800a2f0:	24004c24 	.word	0x24004c24
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2fe:	2300      	movs	r3, #0
 800a300:	607b      	str	r3, [r7, #4]
 800a302:	e00c      	b.n	800a31e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4a12      	ldr	r2, [pc, #72]	@ (800a358 <prvInitialiseTaskLists+0x60>)
 800a310:	4413      	add	r3, r2
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fa5a 	bl	80087cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3301      	adds	r3, #1
 800a31c:	607b      	str	r3, [r7, #4]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b37      	cmp	r3, #55	@ 0x37
 800a322:	d9ef      	bls.n	800a304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a324:	480d      	ldr	r0, [pc, #52]	@ (800a35c <prvInitialiseTaskLists+0x64>)
 800a326:	f7fe fa51 	bl	80087cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a32a:	480d      	ldr	r0, [pc, #52]	@ (800a360 <prvInitialiseTaskLists+0x68>)
 800a32c:	f7fe fa4e 	bl	80087cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a330:	480c      	ldr	r0, [pc, #48]	@ (800a364 <prvInitialiseTaskLists+0x6c>)
 800a332:	f7fe fa4b 	bl	80087cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a336:	480c      	ldr	r0, [pc, #48]	@ (800a368 <prvInitialiseTaskLists+0x70>)
 800a338:	f7fe fa48 	bl	80087cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a33c:	480b      	ldr	r0, [pc, #44]	@ (800a36c <prvInitialiseTaskLists+0x74>)
 800a33e:	f7fe fa45 	bl	80087cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a342:	4b0b      	ldr	r3, [pc, #44]	@ (800a370 <prvInitialiseTaskLists+0x78>)
 800a344:	4a05      	ldr	r2, [pc, #20]	@ (800a35c <prvInitialiseTaskLists+0x64>)
 800a346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a348:	4b0a      	ldr	r3, [pc, #40]	@ (800a374 <prvInitialiseTaskLists+0x7c>)
 800a34a:	4a05      	ldr	r2, [pc, #20]	@ (800a360 <prvInitialiseTaskLists+0x68>)
 800a34c:	601a      	str	r2, [r3, #0]
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	24004c24 	.word	0x24004c24
 800a35c:	24005084 	.word	0x24005084
 800a360:	24005098 	.word	0x24005098
 800a364:	240050b4 	.word	0x240050b4
 800a368:	240050c8 	.word	0x240050c8
 800a36c:	240050e0 	.word	0x240050e0
 800a370:	240050ac 	.word	0x240050ac
 800a374:	240050b0 	.word	0x240050b0

0800a378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a37e:	e019      	b.n	800a3b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a380:	f7fe fc0a 	bl	8008b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a384:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <prvCheckTasksWaitingTermination+0x50>)
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe faa5 	bl	80088e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a396:	4b0d      	ldr	r3, [pc, #52]	@ (800a3cc <prvCheckTasksWaitingTermination+0x54>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	4a0b      	ldr	r2, [pc, #44]	@ (800a3cc <prvCheckTasksWaitingTermination+0x54>)
 800a39e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d0 <prvCheckTasksWaitingTermination+0x58>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a3d0 <prvCheckTasksWaitingTermination+0x58>)
 800a3a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3aa:	f7fe fc27 	bl	8008bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f810 	bl	800a3d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3b4:	4b06      	ldr	r3, [pc, #24]	@ (800a3d0 <prvCheckTasksWaitingTermination+0x58>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1e1      	bne.n	800a380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	240050c8 	.word	0x240050c8
 800a3cc:	240050f4 	.word	0x240050f4
 800a3d0:	240050dc 	.word	0x240050dc

0800a3d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3354      	adds	r3, #84	@ 0x54
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 fc91 	bl	800ad08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d108      	bne.n	800a402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe f8c9 	bl	800858c <vPortFree>
				vPortFree( pxTCB );
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fe f8c6 	bl	800858c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a400:	e019      	b.n	800a436 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d103      	bne.n	800a414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7fe f8bd 	bl	800858c <vPortFree>
	}
 800a412:	e010      	b.n	800a436 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d00b      	beq.n	800a436 <prvDeleteTCB+0x62>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60fb      	str	r3, [r7, #12]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <prvDeleteTCB+0x5e>
	}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a446:	4b0c      	ldr	r3, [pc, #48]	@ (800a478 <prvResetNextTaskUnblockTime+0x38>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a450:	4b0a      	ldr	r3, [pc, #40]	@ (800a47c <prvResetNextTaskUnblockTime+0x3c>)
 800a452:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a458:	e008      	b.n	800a46c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45a:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <prvResetNextTaskUnblockTime+0x38>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4a04      	ldr	r2, [pc, #16]	@ (800a47c <prvResetNextTaskUnblockTime+0x3c>)
 800a46a:	6013      	str	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	240050ac 	.word	0x240050ac
 800a47c:	24005114 	.word	0x24005114

0800a480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a486:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <xTaskGetSchedulerState+0x34>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a48e:	2301      	movs	r3, #1
 800a490:	607b      	str	r3, [r7, #4]
 800a492:	e008      	b.n	800a4a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a494:	4b08      	ldr	r3, [pc, #32]	@ (800a4b8 <xTaskGetSchedulerState+0x38>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d102      	bne.n	800a4a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a49c:	2302      	movs	r3, #2
 800a49e:	607b      	str	r3, [r7, #4]
 800a4a0:	e001      	b.n	800a4a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4a6:	687b      	ldr	r3, [r7, #4]
	}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	24005100 	.word	0x24005100
 800a4b8:	2400511c 	.word	0x2400511c

0800a4bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d058      	beq.n	800a584 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4d2:	4b2f      	ldr	r3, [pc, #188]	@ (800a590 <xTaskPriorityDisinherit+0xd4>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d00b      	beq.n	800a4f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60fb      	str	r3, [r7, #12]
}
 800a4ee:	bf00      	nop
 800a4f0:	bf00      	nop
 800a4f2:	e7fd      	b.n	800a4f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10b      	bne.n	800a514 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	60bb      	str	r3, [r7, #8]
}
 800a50e:	bf00      	nop
 800a510:	bf00      	nop
 800a512:	e7fd      	b.n	800a510 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a518:	1e5a      	subs	r2, r3, #1
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a526:	429a      	cmp	r2, r3
 800a528:	d02c      	beq.n	800a584 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d128      	bne.n	800a584 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	3304      	adds	r3, #4
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe f9d2 	bl	80088e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a548:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a554:	4b0f      	ldr	r3, [pc, #60]	@ (800a594 <xTaskPriorityDisinherit+0xd8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d903      	bls.n	800a564 <xTaskPriorityDisinherit+0xa8>
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a560:	4a0c      	ldr	r2, [pc, #48]	@ (800a594 <xTaskPriorityDisinherit+0xd8>)
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4a09      	ldr	r2, [pc, #36]	@ (800a598 <xTaskPriorityDisinherit+0xdc>)
 800a572:	441a      	add	r2, r3
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	3304      	adds	r3, #4
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f7fe f953 	bl	8008826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a580:	2301      	movs	r3, #1
 800a582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a584:	697b      	ldr	r3, [r7, #20]
	}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	24004c20 	.word	0x24004c20
 800a594:	240050fc 	.word	0x240050fc
 800a598:	24004c24 	.word	0x24004c24

0800a59c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5a6:	4b21      	ldr	r3, [pc, #132]	@ (800a62c <prvAddCurrentTaskToDelayedList+0x90>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ac:	4b20      	ldr	r3, [pc, #128]	@ (800a630 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe f994 	bl	80088e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5be:	d10a      	bne.n	800a5d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d007      	beq.n	800a5d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a630 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4819      	ldr	r0, [pc, #100]	@ (800a634 <prvAddCurrentTaskToDelayedList+0x98>)
 800a5d0:	f7fe f929 	bl	8008826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5d4:	e026      	b.n	800a624 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4413      	add	r3, r2
 800a5dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5de:	4b14      	ldr	r3, [pc, #80]	@ (800a630 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d209      	bcs.n	800a602 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5ee:	4b12      	ldr	r3, [pc, #72]	@ (800a638 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a630 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	f7fe f937 	bl	800886e <vListInsert>
}
 800a600:	e010      	b.n	800a624 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a602:	4b0e      	ldr	r3, [pc, #56]	@ (800a63c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	4b0a      	ldr	r3, [pc, #40]	@ (800a630 <prvAddCurrentTaskToDelayedList+0x94>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f7fe f92d 	bl	800886e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a614:	4b0a      	ldr	r3, [pc, #40]	@ (800a640 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d202      	bcs.n	800a624 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a61e:	4a08      	ldr	r2, [pc, #32]	@ (800a640 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	6013      	str	r3, [r2, #0]
}
 800a624:	bf00      	nop
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	240050f8 	.word	0x240050f8
 800a630:	24004c20 	.word	0x24004c20
 800a634:	240050e0 	.word	0x240050e0
 800a638:	240050b0 	.word	0x240050b0
 800a63c:	240050ac 	.word	0x240050ac
 800a640:	24005114 	.word	0x24005114

0800a644 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08a      	sub	sp, #40	@ 0x28
 800a648:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a64e:	f000 fb13 	bl	800ac78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a652:	4b1d      	ldr	r3, [pc, #116]	@ (800a6c8 <xTimerCreateTimerTask+0x84>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d021      	beq.n	800a69e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a662:	1d3a      	adds	r2, r7, #4
 800a664:	f107 0108 	add.w	r1, r7, #8
 800a668:	f107 030c 	add.w	r3, r7, #12
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fd fea5 	bl	80083bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	9202      	str	r2, [sp, #8]
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	2302      	movs	r3, #2
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	2300      	movs	r3, #0
 800a682:	460a      	mov	r2, r1
 800a684:	4911      	ldr	r1, [pc, #68]	@ (800a6cc <xTimerCreateTimerTask+0x88>)
 800a686:	4812      	ldr	r0, [pc, #72]	@ (800a6d0 <xTimerCreateTimerTask+0x8c>)
 800a688:	f7ff f8a2 	bl	80097d0 <xTaskCreateStatic>
 800a68c:	4603      	mov	r3, r0
 800a68e:	4a11      	ldr	r2, [pc, #68]	@ (800a6d4 <xTimerCreateTimerTask+0x90>)
 800a690:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a692:	4b10      	ldr	r3, [pc, #64]	@ (800a6d4 <xTimerCreateTimerTask+0x90>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a69a:	2301      	movs	r3, #1
 800a69c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10b      	bne.n	800a6bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	613b      	str	r3, [r7, #16]
}
 800a6b6:	bf00      	nop
 800a6b8:	bf00      	nop
 800a6ba:	e7fd      	b.n	800a6b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6bc:	697b      	ldr	r3, [r7, #20]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	24005150 	.word	0x24005150
 800a6cc:	0800af00 	.word	0x0800af00
 800a6d0:	0800a811 	.word	0x0800a811
 800a6d4:	24005154 	.word	0x24005154

0800a6d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	@ 0x28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10b      	bne.n	800a708 <xTimerGenericCommand+0x30>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	623b      	str	r3, [r7, #32]
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	e7fd      	b.n	800a704 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a708:	4b19      	ldr	r3, [pc, #100]	@ (800a770 <xTimerGenericCommand+0x98>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d02a      	beq.n	800a766 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b05      	cmp	r3, #5
 800a720:	dc18      	bgt.n	800a754 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a722:	f7ff fead 	bl	800a480 <xTaskGetSchedulerState>
 800a726:	4603      	mov	r3, r0
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d109      	bne.n	800a740 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a72c:	4b10      	ldr	r3, [pc, #64]	@ (800a770 <xTimerGenericCommand+0x98>)
 800a72e:	6818      	ldr	r0, [r3, #0]
 800a730:	f107 0110 	add.w	r1, r7, #16
 800a734:	2300      	movs	r3, #0
 800a736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a738:	f7fe fc5a 	bl	8008ff0 <xQueueGenericSend>
 800a73c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a73e:	e012      	b.n	800a766 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a740:	4b0b      	ldr	r3, [pc, #44]	@ (800a770 <xTimerGenericCommand+0x98>)
 800a742:	6818      	ldr	r0, [r3, #0]
 800a744:	f107 0110 	add.w	r1, r7, #16
 800a748:	2300      	movs	r3, #0
 800a74a:	2200      	movs	r2, #0
 800a74c:	f7fe fc50 	bl	8008ff0 <xQueueGenericSend>
 800a750:	6278      	str	r0, [r7, #36]	@ 0x24
 800a752:	e008      	b.n	800a766 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a754:	4b06      	ldr	r3, [pc, #24]	@ (800a770 <xTimerGenericCommand+0x98>)
 800a756:	6818      	ldr	r0, [r3, #0]
 800a758:	f107 0110 	add.w	r1, r7, #16
 800a75c:	2300      	movs	r3, #0
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	f7fe fd48 	bl	80091f4 <xQueueGenericSendFromISR>
 800a764:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3728      	adds	r7, #40	@ 0x28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	24005150 	.word	0x24005150

0800a774 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af02      	add	r7, sp, #8
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a77e:	4b23      	ldr	r3, [pc, #140]	@ (800a80c <prvProcessExpiredTimer+0x98>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fe f8a7 	bl	80088e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d023      	beq.n	800a7e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	699a      	ldr	r2, [r3, #24]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	18d1      	adds	r1, r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	6978      	ldr	r0, [r7, #20]
 800a7ae:	f000 f8d5 	bl	800a95c <prvInsertTimerInActiveList>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d020      	beq.n	800a7fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	6978      	ldr	r0, [r7, #20]
 800a7c4:	f7ff ff88 	bl	800a6d8 <xTimerGenericCommand>
 800a7c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d114      	bne.n	800a7fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60fb      	str	r3, [r7, #12]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7ee:	f023 0301 	bic.w	r3, r3, #1
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	6978      	ldr	r0, [r7, #20]
 800a800:	4798      	blx	r3
}
 800a802:	bf00      	nop
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	24005148 	.word	0x24005148

0800a810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 f859 	bl	800a8d4 <prvGetNextExpireTime>
 800a822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4619      	mov	r1, r3
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f805 	bl	800a838 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a82e:	f000 f8d7 	bl	800a9e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a832:	bf00      	nop
 800a834:	e7f0      	b.n	800a818 <prvTimerTask+0x8>
	...

0800a838 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a842:	f7ff fa29 	bl	8009c98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 f866 	bl	800a91c <prvSampleTimeNow>
 800a850:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d130      	bne.n	800a8ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10a      	bne.n	800a874 <prvProcessTimerOrBlockTask+0x3c>
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	429a      	cmp	r2, r3
 800a864:	d806      	bhi.n	800a874 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a866:	f7ff fa25 	bl	8009cb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a86a:	68f9      	ldr	r1, [r7, #12]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff ff81 	bl	800a774 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a872:	e024      	b.n	800a8be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d008      	beq.n	800a88c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a87a:	4b13      	ldr	r3, [pc, #76]	@ (800a8c8 <prvProcessTimerOrBlockTask+0x90>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <prvProcessTimerOrBlockTask+0x50>
 800a884:	2301      	movs	r3, #1
 800a886:	e000      	b.n	800a88a <prvProcessTimerOrBlockTask+0x52>
 800a888:	2300      	movs	r3, #0
 800a88a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a88c:	4b0f      	ldr	r3, [pc, #60]	@ (800a8cc <prvProcessTimerOrBlockTask+0x94>)
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	4619      	mov	r1, r3
 800a89a:	f7fe ff65 	bl	8009768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a89e:	f7ff fa09 	bl	8009cb4 <xTaskResumeAll>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8a8:	4b09      	ldr	r3, [pc, #36]	@ (800a8d0 <prvProcessTimerOrBlockTask+0x98>)
 800a8aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	f3bf 8f6f 	isb	sy
}
 800a8b8:	e001      	b.n	800a8be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8ba:	f7ff f9fb 	bl	8009cb4 <xTaskResumeAll>
}
 800a8be:	bf00      	nop
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	2400514c 	.word	0x2400514c
 800a8cc:	24005150 	.word	0x24005150
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a918 <prvGetNextExpireTime+0x44>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <prvGetNextExpireTime+0x16>
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	e000      	b.n	800a8ec <prvGetNextExpireTime+0x18>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d105      	bne.n	800a904 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f8:	4b07      	ldr	r3, [pc, #28]	@ (800a918 <prvGetNextExpireTime+0x44>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	e001      	b.n	800a908 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a908:	68fb      	ldr	r3, [r7, #12]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	24005148 	.word	0x24005148

0800a91c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a924:	f7ff fa64 	bl	8009df0 <xTaskGetTickCount>
 800a928:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a92a:	4b0b      	ldr	r3, [pc, #44]	@ (800a958 <prvSampleTimeNow+0x3c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	429a      	cmp	r2, r3
 800a932:	d205      	bcs.n	800a940 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a934:	f000 f93a 	bl	800abac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	e002      	b.n	800a946 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a946:	4a04      	ldr	r2, [pc, #16]	@ (800a958 <prvSampleTimeNow+0x3c>)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a94c:	68fb      	ldr	r3, [r7, #12]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	24005158 	.word	0x24005158

0800a95c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d812      	bhi.n	800a9a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	1ad2      	subs	r2, r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d302      	bcc.n	800a996 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a990:	2301      	movs	r3, #1
 800a992:	617b      	str	r3, [r7, #20]
 800a994:	e01b      	b.n	800a9ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a996:	4b10      	ldr	r3, [pc, #64]	@ (800a9d8 <prvInsertTimerInActiveList+0x7c>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3304      	adds	r3, #4
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f7fd ff64 	bl	800886e <vListInsert>
 800a9a6:	e012      	b.n	800a9ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d206      	bcs.n	800a9be <prvInsertTimerInActiveList+0x62>
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d302      	bcc.n	800a9be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	e007      	b.n	800a9ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9be:	4b07      	ldr	r3, [pc, #28]	@ (800a9dc <prvInsertTimerInActiveList+0x80>)
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f7fd ff50 	bl	800886e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9ce:	697b      	ldr	r3, [r7, #20]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	2400514c 	.word	0x2400514c
 800a9dc:	24005148 	.word	0x24005148

0800a9e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08e      	sub	sp, #56	@ 0x38
 800a9e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9e6:	e0ce      	b.n	800ab86 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da19      	bge.n	800aa22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9ee:	1d3b      	adds	r3, r7, #4
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	61fb      	str	r3, [r7, #28]
}
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	e7fd      	b.n	800aa0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa18:	6850      	ldr	r0, [r2, #4]
 800aa1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa1c:	6892      	ldr	r2, [r2, #8]
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f2c0 80ae 	blt.w	800ab86 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa38:	3304      	adds	r3, #4
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fd ff50 	bl	80088e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa40:	463b      	mov	r3, r7
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff ff6a 	bl	800a91c <prvSampleTimeNow>
 800aa48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	f200 8097 	bhi.w	800ab80 <prvProcessReceivedCommands+0x1a0>
 800aa52:	a201      	add	r2, pc, #4	@ (adr r2, 800aa58 <prvProcessReceivedCommands+0x78>)
 800aa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa58:	0800aa81 	.word	0x0800aa81
 800aa5c:	0800aa81 	.word	0x0800aa81
 800aa60:	0800aa81 	.word	0x0800aa81
 800aa64:	0800aaf7 	.word	0x0800aaf7
 800aa68:	0800ab0b 	.word	0x0800ab0b
 800aa6c:	0800ab57 	.word	0x0800ab57
 800aa70:	0800aa81 	.word	0x0800aa81
 800aa74:	0800aa81 	.word	0x0800aa81
 800aa78:	0800aaf7 	.word	0x0800aaf7
 800aa7c:	0800ab0b 	.word	0x0800ab0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	18d1      	adds	r1, r2, r3
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaa0:	f7ff ff5c 	bl	800a95c <prvInsertTimerInActiveList>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d06c      	beq.n	800ab84 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aab0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d061      	beq.n	800ab84 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	441a      	add	r2, r3
 800aac8:	2300      	movs	r3, #0
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	2300      	movs	r3, #0
 800aace:	2100      	movs	r1, #0
 800aad0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aad2:	f7ff fe01 	bl	800a6d8 <xTimerGenericCommand>
 800aad6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d152      	bne.n	800ab84 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	61bb      	str	r3, [r7, #24]
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aafc:	f023 0301 	bic.w	r3, r3, #1
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ab08:	e03d      	b.n	800ab86 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab10:	f043 0301 	orr.w	r3, r3, #1
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10b      	bne.n	800ab42 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	617b      	str	r3, [r7, #20]
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	e7fd      	b.n	800ab3e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab44:	699a      	ldr	r2, [r3, #24]
 800ab46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab48:	18d1      	adds	r1, r2, r3
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab50:	f7ff ff04 	bl	800a95c <prvInsertTimerInActiveList>
					break;
 800ab54:	e017      	b.n	800ab86 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d103      	bne.n	800ab6c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ab64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab66:	f7fd fd11 	bl	800858c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab6a:	e00c      	b.n	800ab86 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab72:	f023 0301 	bic.w	r3, r3, #1
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ab7e:	e002      	b.n	800ab86 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ab80:	bf00      	nop
 800ab82:	e000      	b.n	800ab86 <prvProcessReceivedCommands+0x1a6>
					break;
 800ab84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab86:	4b08      	ldr	r3, [pc, #32]	@ (800aba8 <prvProcessReceivedCommands+0x1c8>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	1d39      	adds	r1, r7, #4
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fbce 	bl	8009330 <xQueueReceive>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f47f af26 	bne.w	800a9e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab9c:	bf00      	nop
 800ab9e:	bf00      	nop
 800aba0:	3730      	adds	r7, #48	@ 0x30
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	24005150 	.word	0x24005150

0800abac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abb2:	e049      	b.n	800ac48 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abb4:	4b2e      	ldr	r3, [pc, #184]	@ (800ac70 <prvSwitchTimerLists+0xc4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abbe:	4b2c      	ldr	r3, [pc, #176]	@ (800ac70 <prvSwitchTimerLists+0xc4>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3304      	adds	r3, #4
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd fe87 	bl	80088e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d02f      	beq.n	800ac48 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	4413      	add	r3, r2
 800abf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d90e      	bls.n	800ac18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac06:	4b1a      	ldr	r3, [pc, #104]	@ (800ac70 <prvSwitchTimerLists+0xc4>)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4610      	mov	r0, r2
 800ac12:	f7fd fe2c 	bl	800886e <vListInsert>
 800ac16:	e017      	b.n	800ac48 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	2100      	movs	r1, #0
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff fd58 	bl	800a6d8 <xTimerGenericCommand>
 800ac28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10b      	bne.n	800ac48 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	603b      	str	r3, [r7, #0]
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	e7fd      	b.n	800ac44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac48:	4b09      	ldr	r3, [pc, #36]	@ (800ac70 <prvSwitchTimerLists+0xc4>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1b0      	bne.n	800abb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac52:	4b07      	ldr	r3, [pc, #28]	@ (800ac70 <prvSwitchTimerLists+0xc4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac58:	4b06      	ldr	r3, [pc, #24]	@ (800ac74 <prvSwitchTimerLists+0xc8>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a04      	ldr	r2, [pc, #16]	@ (800ac70 <prvSwitchTimerLists+0xc4>)
 800ac5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac60:	4a04      	ldr	r2, [pc, #16]	@ (800ac74 <prvSwitchTimerLists+0xc8>)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	6013      	str	r3, [r2, #0]
}
 800ac66:	bf00      	nop
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	24005148 	.word	0x24005148
 800ac74:	2400514c 	.word	0x2400514c

0800ac78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac7e:	f7fd ff8b 	bl	8008b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac82:	4b15      	ldr	r3, [pc, #84]	@ (800acd8 <prvCheckForValidListAndQueue+0x60>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d120      	bne.n	800accc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac8a:	4814      	ldr	r0, [pc, #80]	@ (800acdc <prvCheckForValidListAndQueue+0x64>)
 800ac8c:	f7fd fd9e 	bl	80087cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac90:	4813      	ldr	r0, [pc, #76]	@ (800ace0 <prvCheckForValidListAndQueue+0x68>)
 800ac92:	f7fd fd9b 	bl	80087cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac96:	4b13      	ldr	r3, [pc, #76]	@ (800ace4 <prvCheckForValidListAndQueue+0x6c>)
 800ac98:	4a10      	ldr	r2, [pc, #64]	@ (800acdc <prvCheckForValidListAndQueue+0x64>)
 800ac9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac9c:	4b12      	ldr	r3, [pc, #72]	@ (800ace8 <prvCheckForValidListAndQueue+0x70>)
 800ac9e:	4a10      	ldr	r2, [pc, #64]	@ (800ace0 <prvCheckForValidListAndQueue+0x68>)
 800aca0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aca2:	2300      	movs	r3, #0
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	4b11      	ldr	r3, [pc, #68]	@ (800acec <prvCheckForValidListAndQueue+0x74>)
 800aca8:	4a11      	ldr	r2, [pc, #68]	@ (800acf0 <prvCheckForValidListAndQueue+0x78>)
 800acaa:	2110      	movs	r1, #16
 800acac:	200a      	movs	r0, #10
 800acae:	f7fe f8ff 	bl	8008eb0 <xQueueGenericCreateStatic>
 800acb2:	4603      	mov	r3, r0
 800acb4:	4a08      	ldr	r2, [pc, #32]	@ (800acd8 <prvCheckForValidListAndQueue+0x60>)
 800acb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800acb8:	4b07      	ldr	r3, [pc, #28]	@ (800acd8 <prvCheckForValidListAndQueue+0x60>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d005      	beq.n	800accc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acc0:	4b05      	ldr	r3, [pc, #20]	@ (800acd8 <prvCheckForValidListAndQueue+0x60>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	490b      	ldr	r1, [pc, #44]	@ (800acf4 <prvCheckForValidListAndQueue+0x7c>)
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fd24 	bl	8009714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800accc:	f7fd ff96 	bl	8008bfc <vPortExitCritical>
}
 800acd0:	bf00      	nop
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	24005150 	.word	0x24005150
 800acdc:	24005120 	.word	0x24005120
 800ace0:	24005134 	.word	0x24005134
 800ace4:	24005148 	.word	0x24005148
 800ace8:	2400514c 	.word	0x2400514c
 800acec:	240051fc 	.word	0x240051fc
 800acf0:	2400515c 	.word	0x2400515c
 800acf4:	0800af08 	.word	0x0800af08

0800acf8 <memset>:
 800acf8:	4402      	add	r2, r0
 800acfa:	4603      	mov	r3, r0
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d100      	bne.n	800ad02 <memset+0xa>
 800ad00:	4770      	bx	lr
 800ad02:	f803 1b01 	strb.w	r1, [r3], #1
 800ad06:	e7f9      	b.n	800acfc <memset+0x4>

0800ad08 <_reclaim_reent>:
 800ad08:	4b29      	ldr	r3, [pc, #164]	@ (800adb0 <_reclaim_reent+0xa8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4283      	cmp	r3, r0
 800ad0e:	b570      	push	{r4, r5, r6, lr}
 800ad10:	4604      	mov	r4, r0
 800ad12:	d04b      	beq.n	800adac <_reclaim_reent+0xa4>
 800ad14:	69c3      	ldr	r3, [r0, #28]
 800ad16:	b1ab      	cbz	r3, 800ad44 <_reclaim_reent+0x3c>
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	b16b      	cbz	r3, 800ad38 <_reclaim_reent+0x30>
 800ad1c:	2500      	movs	r5, #0
 800ad1e:	69e3      	ldr	r3, [r4, #28]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	5959      	ldr	r1, [r3, r5]
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d13b      	bne.n	800ada0 <_reclaim_reent+0x98>
 800ad28:	3504      	adds	r5, #4
 800ad2a:	2d80      	cmp	r5, #128	@ 0x80
 800ad2c:	d1f7      	bne.n	800ad1e <_reclaim_reent+0x16>
 800ad2e:	69e3      	ldr	r3, [r4, #28]
 800ad30:	4620      	mov	r0, r4
 800ad32:	68d9      	ldr	r1, [r3, #12]
 800ad34:	f000 f872 	bl	800ae1c <_free_r>
 800ad38:	69e3      	ldr	r3, [r4, #28]
 800ad3a:	6819      	ldr	r1, [r3, #0]
 800ad3c:	b111      	cbz	r1, 800ad44 <_reclaim_reent+0x3c>
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 f86c 	bl	800ae1c <_free_r>
 800ad44:	6961      	ldr	r1, [r4, #20]
 800ad46:	b111      	cbz	r1, 800ad4e <_reclaim_reent+0x46>
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 f867 	bl	800ae1c <_free_r>
 800ad4e:	69e1      	ldr	r1, [r4, #28]
 800ad50:	b111      	cbz	r1, 800ad58 <_reclaim_reent+0x50>
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 f862 	bl	800ae1c <_free_r>
 800ad58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ad5a:	b111      	cbz	r1, 800ad62 <_reclaim_reent+0x5a>
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 f85d 	bl	800ae1c <_free_r>
 800ad62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad64:	b111      	cbz	r1, 800ad6c <_reclaim_reent+0x64>
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 f858 	bl	800ae1c <_free_r>
 800ad6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ad6e:	b111      	cbz	r1, 800ad76 <_reclaim_reent+0x6e>
 800ad70:	4620      	mov	r0, r4
 800ad72:	f000 f853 	bl	800ae1c <_free_r>
 800ad76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ad78:	b111      	cbz	r1, 800ad80 <_reclaim_reent+0x78>
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 f84e 	bl	800ae1c <_free_r>
 800ad80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ad82:	b111      	cbz	r1, 800ad8a <_reclaim_reent+0x82>
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 f849 	bl	800ae1c <_free_r>
 800ad8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad8c:	b111      	cbz	r1, 800ad94 <_reclaim_reent+0x8c>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 f844 	bl	800ae1c <_free_r>
 800ad94:	6a23      	ldr	r3, [r4, #32]
 800ad96:	b14b      	cbz	r3, 800adac <_reclaim_reent+0xa4>
 800ad98:	4620      	mov	r0, r4
 800ad9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad9e:	4718      	bx	r3
 800ada0:	680e      	ldr	r6, [r1, #0]
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 f83a 	bl	800ae1c <_free_r>
 800ada8:	4631      	mov	r1, r6
 800adaa:	e7bb      	b.n	800ad24 <_reclaim_reent+0x1c>
 800adac:	bd70      	pop	{r4, r5, r6, pc}
 800adae:	bf00      	nop
 800adb0:	24000014 	.word	0x24000014

0800adb4 <__libc_init_array>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	4d0d      	ldr	r5, [pc, #52]	@ (800adec <__libc_init_array+0x38>)
 800adb8:	4c0d      	ldr	r4, [pc, #52]	@ (800adf0 <__libc_init_array+0x3c>)
 800adba:	1b64      	subs	r4, r4, r5
 800adbc:	10a4      	asrs	r4, r4, #2
 800adbe:	2600      	movs	r6, #0
 800adc0:	42a6      	cmp	r6, r4
 800adc2:	d109      	bne.n	800add8 <__libc_init_array+0x24>
 800adc4:	4d0b      	ldr	r5, [pc, #44]	@ (800adf4 <__libc_init_array+0x40>)
 800adc6:	4c0c      	ldr	r4, [pc, #48]	@ (800adf8 <__libc_init_array+0x44>)
 800adc8:	f000 f87e 	bl	800aec8 <_init>
 800adcc:	1b64      	subs	r4, r4, r5
 800adce:	10a4      	asrs	r4, r4, #2
 800add0:	2600      	movs	r6, #0
 800add2:	42a6      	cmp	r6, r4
 800add4:	d105      	bne.n	800ade2 <__libc_init_array+0x2e>
 800add6:	bd70      	pop	{r4, r5, r6, pc}
 800add8:	f855 3b04 	ldr.w	r3, [r5], #4
 800addc:	4798      	blx	r3
 800adde:	3601      	adds	r6, #1
 800ade0:	e7ee      	b.n	800adc0 <__libc_init_array+0xc>
 800ade2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade6:	4798      	blx	r3
 800ade8:	3601      	adds	r6, #1
 800adea:	e7f2      	b.n	800add2 <__libc_init_array+0x1e>
 800adec:	0800af98 	.word	0x0800af98
 800adf0:	0800af98 	.word	0x0800af98
 800adf4:	0800af98 	.word	0x0800af98
 800adf8:	0800af9c 	.word	0x0800af9c

0800adfc <__retarget_lock_acquire_recursive>:
 800adfc:	4770      	bx	lr

0800adfe <__retarget_lock_release_recursive>:
 800adfe:	4770      	bx	lr

0800ae00 <memcpy>:
 800ae00:	440a      	add	r2, r1
 800ae02:	4291      	cmp	r1, r2
 800ae04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ae08:	d100      	bne.n	800ae0c <memcpy+0xc>
 800ae0a:	4770      	bx	lr
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae16:	4291      	cmp	r1, r2
 800ae18:	d1f9      	bne.n	800ae0e <memcpy+0xe>
 800ae1a:	bd10      	pop	{r4, pc}

0800ae1c <_free_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4605      	mov	r5, r0
 800ae20:	2900      	cmp	r1, #0
 800ae22:	d041      	beq.n	800aea8 <_free_r+0x8c>
 800ae24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae28:	1f0c      	subs	r4, r1, #4
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	bfb8      	it	lt
 800ae2e:	18e4      	addlt	r4, r4, r3
 800ae30:	f000 f83e 	bl	800aeb0 <__malloc_lock>
 800ae34:	4a1d      	ldr	r2, [pc, #116]	@ (800aeac <_free_r+0x90>)
 800ae36:	6813      	ldr	r3, [r2, #0]
 800ae38:	b933      	cbnz	r3, 800ae48 <_free_r+0x2c>
 800ae3a:	6063      	str	r3, [r4, #4]
 800ae3c:	6014      	str	r4, [r2, #0]
 800ae3e:	4628      	mov	r0, r5
 800ae40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae44:	f000 b83a 	b.w	800aebc <__malloc_unlock>
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d908      	bls.n	800ae5e <_free_r+0x42>
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	1821      	adds	r1, r4, r0
 800ae50:	428b      	cmp	r3, r1
 800ae52:	bf01      	itttt	eq
 800ae54:	6819      	ldreq	r1, [r3, #0]
 800ae56:	685b      	ldreq	r3, [r3, #4]
 800ae58:	1809      	addeq	r1, r1, r0
 800ae5a:	6021      	streq	r1, [r4, #0]
 800ae5c:	e7ed      	b.n	800ae3a <_free_r+0x1e>
 800ae5e:	461a      	mov	r2, r3
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	b10b      	cbz	r3, 800ae68 <_free_r+0x4c>
 800ae64:	42a3      	cmp	r3, r4
 800ae66:	d9fa      	bls.n	800ae5e <_free_r+0x42>
 800ae68:	6811      	ldr	r1, [r2, #0]
 800ae6a:	1850      	adds	r0, r2, r1
 800ae6c:	42a0      	cmp	r0, r4
 800ae6e:	d10b      	bne.n	800ae88 <_free_r+0x6c>
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	4401      	add	r1, r0
 800ae74:	1850      	adds	r0, r2, r1
 800ae76:	4283      	cmp	r3, r0
 800ae78:	6011      	str	r1, [r2, #0]
 800ae7a:	d1e0      	bne.n	800ae3e <_free_r+0x22>
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	6053      	str	r3, [r2, #4]
 800ae82:	4408      	add	r0, r1
 800ae84:	6010      	str	r0, [r2, #0]
 800ae86:	e7da      	b.n	800ae3e <_free_r+0x22>
 800ae88:	d902      	bls.n	800ae90 <_free_r+0x74>
 800ae8a:	230c      	movs	r3, #12
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	e7d6      	b.n	800ae3e <_free_r+0x22>
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	1821      	adds	r1, r4, r0
 800ae94:	428b      	cmp	r3, r1
 800ae96:	bf04      	itt	eq
 800ae98:	6819      	ldreq	r1, [r3, #0]
 800ae9a:	685b      	ldreq	r3, [r3, #4]
 800ae9c:	6063      	str	r3, [r4, #4]
 800ae9e:	bf04      	itt	eq
 800aea0:	1809      	addeq	r1, r1, r0
 800aea2:	6021      	streq	r1, [r4, #0]
 800aea4:	6054      	str	r4, [r2, #4]
 800aea6:	e7ca      	b.n	800ae3e <_free_r+0x22>
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	bf00      	nop
 800aeac:	24005388 	.word	0x24005388

0800aeb0 <__malloc_lock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	@ (800aeb8 <__malloc_lock+0x8>)
 800aeb2:	f7ff bfa3 	b.w	800adfc <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	24005384 	.word	0x24005384

0800aebc <__malloc_unlock>:
 800aebc:	4801      	ldr	r0, [pc, #4]	@ (800aec4 <__malloc_unlock+0x8>)
 800aebe:	f7ff bf9e 	b.w	800adfe <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	24005384 	.word	0x24005384

0800aec8 <_init>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	bf00      	nop
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr

0800aed4 <_fini>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	bf00      	nop
 800aed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeda:	bc08      	pop	{r3}
 800aedc:	469e      	mov	lr, r3
 800aede:	4770      	bx	lr
